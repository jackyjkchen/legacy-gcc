diff --git a/stl/stl_config.h b/stl/stl_config.h
index 35df341..0d200fb 100644
--- a/stl/stl_config.h
+++ b/stl/stl_config.h
@@ -263,6 +263,10 @@
 #  define __stl_debug_do(expr)
 # endif
 
+#if defined(__GNUC__) && __GNUC__ == 2 && __GNUC_MINOR__ < 8
+#define __PUT_STATIC_DATA_MEMBERS_HERE
+#endif
+
 // tuning of static template data members workaround
 # if ( __STL_STATIC_TEMPLATE_DATA < 1 )
 // ignore __PUT directive in this case
diff --git a/stl/stl_iterator.h b/stl/stl_iterator.h
index a3147f0..8fab2be 100644
--- a/stl/stl_iterator.h
+++ b/stl/stl_iterator.h
@@ -178,7 +178,7 @@ template <class _BidirectionalIterator, class _Tp, __DFL_TMPL_PARAM(_Reference,
 class reverse_bidirectional_iterator {
   typedef reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, 
                                          Reference__, _Distance> _Self;
-  friend inline bool operator== __STL_NULL_TMPL_ARGS (const _Self& x, const _Self& y);
+  friend bool operator== __STL_NULL_TMPL_ARGS (const _Self& x, const _Self& y);
 protected:
   _BidirectionalIterator current;
 public:
diff --git a/stl/stl_threads.h b/stl/stl_threads.h
index a6b68ea..c820c55 100644
--- a/stl/stl_threads.h
+++ b/stl/stl_threads.h
@@ -141,7 +141,7 @@ struct _Refcount_Base
     pthread_mutex_t
     _Swap_lock_struct<__dummy>::_S_swap_lock = PTHREAD_MUTEX_INITIALIZER;
 #  else
-    __DECLARE_INSTANCE(pthread_mutex_t, _Swap_lock_struct<__dummy>::_S_swap_lock, 
+    __DECLARE_INSTANCE(pthread_mutex_t, _Swap_lock_struct<0>::_S_swap_lock,
 		       =PTHREAD_MUTEX_INITIALIZER);
 # endif /* ( __STL_STATIC_TEMPLATE_DATA > 0 ) */
 
