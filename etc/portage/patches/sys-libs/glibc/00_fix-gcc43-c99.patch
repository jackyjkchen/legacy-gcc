diff --git a/math/math.h b/math/math.h
index a1631a8c..c95ad46b 100644
--- a/math/math.h
+++ b/math/math.h
@@ -878,46 +878,29 @@ extern int signgam;
 # endif
 # define __MATH_TG(TG_ARG, FUNC, ARGS)					\
   (sizeof (TG_ARG) == sizeof (float) ? FUNC ## f ARGS : FUNC ARGS)
-#elif __HAVE_DISTINCT_FLOAT128
-# if __HAVE_GENERIC_SELECTION
-#  if __HAVE_FLOATN_NOT_TYPEDEF && __HAVE_FLOAT32
-#   define __MATH_TG_F32(FUNC, ARGS) _Float32: FUNC ## f ARGS,
-#  else
-#   define __MATH_TG_F32(FUNC, ARGS)
-#  endif
-#  if __HAVE_FLOATN_NOT_TYPEDEF && __HAVE_FLOAT64X
-#   if __HAVE_FLOAT64X_LONG_DOUBLE
-#    define __MATH_TG_F64X(FUNC, ARGS) _Float64x: FUNC ## l ARGS,
-#   else
-#    define __MATH_TG_F64X(FUNC, ARGS) _Float64x: FUNC ## f128 ARGS,
-#   endif
+#elif __HAVE_DISTINCT_FLOAT128 && __HAVE_GENERIC_SELECTION
+# if __HAVE_FLOATN_NOT_TYPEDEF && __HAVE_FLOAT32
+#  define __MATH_TG_F32(FUNC, ARGS) _Float32: FUNC ## f ARGS,
+# else
+#  define __MATH_TG_F32(FUNC, ARGS)
+# endif
+# if __HAVE_FLOATN_NOT_TYPEDEF && __HAVE_FLOAT64X
+#  if __HAVE_FLOAT64X_LONG_DOUBLE
+#   define __MATH_TG_F64X(FUNC, ARGS) _Float64x: FUNC ## l ARGS,
 #  else
-#   define __MATH_TG_F64X(FUNC, ARGS)
+#   define __MATH_TG_F64X(FUNC, ARGS) _Float64x: FUNC ## f128 ARGS,
 #  endif
-#  define __MATH_TG(TG_ARG, FUNC, ARGS)	\
-     _Generic ((TG_ARG),			\
-	       float: FUNC ## f ARGS,		\
-	       __MATH_TG_F32 (FUNC, ARGS)	\
-	       default: FUNC ARGS,		\
-	       long double: FUNC ## l ARGS,	\
-	       __MATH_TG_F64X (FUNC, ARGS)	\
-	       _Float128: FUNC ## f128 ARGS)
 # else
-#  if __HAVE_FLOATN_NOT_TYPEDEF
-#   error "Non-typedef _FloatN but no _Generic."
-#  endif
-#  define __MATH_TG(TG_ARG, FUNC, ARGS)					\
-     __builtin_choose_expr						\
-     (__builtin_types_compatible_p (__typeof (TG_ARG), float),		\
-      FUNC ## f ARGS,							\
-      __builtin_choose_expr						\
-      (__builtin_types_compatible_p (__typeof (TG_ARG), double),	\
-       FUNC ARGS,							\
-       __builtin_choose_expr						\
-       (__builtin_types_compatible_p (__typeof (TG_ARG), long double),	\
-	FUNC ## l ARGS,							\
-	FUNC ## f128 ARGS)))
+#  define __MATH_TG_F64X(FUNC, ARGS)
 # endif
+# define __MATH_TG(TG_ARG, FUNC, ARGS)	\
+    _Generic ((TG_ARG),			\
+       float: FUNC ## f ARGS,		\
+       __MATH_TG_F32 (FUNC, ARGS)	\
+       default: FUNC ARGS,		\
+       long double: FUNC ## l ARGS,	\
+       __MATH_TG_F64X (FUNC, ARGS)	\
+       _Float128: FUNC ## f128 ARGS)
 #else
 # define __MATH_TG(TG_ARG, FUNC, ARGS)		\
   (sizeof (TG_ARG) == sizeof (float)		\
diff --git a/math/tgmath.h b/math/tgmath.h
index d3654e8c..97cdcde6 100644
--- a/math/tgmath.h
+++ b/math/tgmath.h
@@ -59,7 +59,9 @@
 # endif
 # if ((__HAVE_FLOAT64X && !__HAVE_FLOAT128)		\
       || (__HAVE_FLOAT128 && !__HAVE_FLOAT64X))
-#  error "Unsupported combination of types for <tgmath.h>."
+#  if __GNUC_PREREQ (4, 4)
+#   error "Unsupported combination of types for <tgmath.h>."
+#  endif
 # endif
 # define __TGMATH_1_NARROW_D(F, X)		\
   (F ## l (X))
