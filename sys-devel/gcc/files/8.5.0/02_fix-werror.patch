diff --git a/gcc/Makefile.in b/gcc/Makefile.in
index 4b26a25d9..b64b0f66e 100644
--- a/gcc/Makefile.in
+++ b/gcc/Makefile.in
@@ -219,6 +219,11 @@ libgcov-merge-tool.o-warn = -Wno-error
 gimple-match.o-warn = -Wno-unused
 generic-match.o-warn = -Wno-unused
 dfp.o-warn = -Wno-strict-aliasing
+build/genhooks.o-warn = -Wno-error=unused-result
+gcc.o-warn = -Wno-error=unused-result
+ipa-inline.o-warn = -Wno-error=strict-overflow
+lto-wrapper.o-warn = -Wno-error=unused-result
+lto/lto.o-warn = -Wno-error=unused-result
 
 # All warnings have to be shut off in stage1 if the compiler used then
 # isn't gcc; configure determines that.  WARN_CFLAGS will be either
diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index b015436c8..63a5baa14 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -9120,7 +9120,6 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,
   struct z_candidate *candidates = 0, *cand;
   tree explicit_targs = NULL_TREE;
   tree basetype = NULL_TREE;
-  tree access_binfo, binfo;
   tree optype;
   tree first_mem_arg = NULL_TREE;
   tree name;
@@ -9158,8 +9157,9 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,
   /* Dismantle the baselink to collect all the information we need.  */
   if (!conversion_path)
     conversion_path = BASELINK_BINFO (fns);
-  access_binfo = BASELINK_ACCESS_BINFO (fns);
-  binfo = BASELINK_BINFO (fns);
+  tree access_binfo = BASELINK_ACCESS_BINFO (fns);
+  tree binfo = BASELINK_BINFO (fns);
+  (void)binfo;
   optype = BASELINK_OPTYPE (fns);
   fns = BASELINK_FUNCTIONS (fns);
   if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)
