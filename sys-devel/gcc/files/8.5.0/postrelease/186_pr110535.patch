diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index 3b86c4780..937417c74 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -2301,6 +2301,14 @@ add_conv_candidate (struct z_candidate **candidates, tree fn, tree obj,
   if (*candidates && (*candidates)->fn == totype)
     return NULL;
 
+  if (!constraints_satisfied_p (fn))
+    {
+      reason = constraint_failure (fn);
+      viable = 0;
+      return add_candidate (candidates, fn, obj, arglist, len, convs,
+			    access_path, conversion_path, viable, reason, flags);
+    }
+
   for (i = 0; i < len; ++i)
     {
       tree arg, argtype, convert_type = NULL_TREE;
diff --git a/gcc/testsuite/g++.dg/cpp2a/concepts-surrogate1.C b/gcc/testsuite/g++.dg/cpp2a/concepts-surrogate1.C
new file mode 100644
index 000000000..3128dd5ed
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp2a/concepts-surrogate1.C
@@ -0,0 +1,13 @@
+// PR c++/110535
+// { dg-do compile { target c++2a } }
+// { dg-options "-fconcepts" }
+
+using F = int(int);
+
+template<bool B>
+struct A {
+ operator F*() requires B;
+};
+
+int i = A<true>{}(0);  // OK
+int j = A<false>{}(0); // { dg-error "no match" }
diff --git a/gcc/testsuite/g++.dg/cpp2a/concepts-surrogate2.C b/gcc/testsuite/g++.dg/cpp2a/concepts-surrogate2.C
new file mode 100644
index 000000000..9d9d3f505
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp2a/concepts-surrogate2.C
@@ -0,0 +1,15 @@
+// PR c++/110535
+// { dg-do compile { target c++2a } }
+// { dg-options "-fconcepts" }
+
+using F = int(int);
+using G = long(int);
+
+template<bool B>
+struct A {
+ operator F&() requires B;
+ operator G&() requires (!B);
+};
+
+int i = A<true>{}(0);  // { dg-bogus "ambiguous" }
+int j = A<false>{}(0); // { dg-bogus "ambiguous" }
