diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 470d5c4a6..175aaa02b 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -27006,6 +27006,10 @@ do_auto_deduction (tree type, tree init, tree auto_node,
   if (init && undeduced_auto_decl (init))
     return type;
 
+  /* We may be doing a partial substitution, but we still want to replace
+     auto_node.  */
+  complain &= ~tf_partial;
+
   if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))
     /* C++17 class template argument deduction.  */
     return do_class_deduction (type, tmpl, init, flags, complain);
diff --git a/gcc/testsuite/g++.dg/cpp1z/nontype-auto15.C b/gcc/testsuite/g++.dg/cpp1z/nontype-auto15.C
new file mode 100644
index 000000000..d94885d19
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp1z/nontype-auto15.C
@@ -0,0 +1,6 @@
+// PR c++/89966
+// { dg-do compile { target c++17 } }
+
+template < auto a0 >
+void f0() { }
+void f0_call() { f0< sizeof(int) >(); }
