diff --git a/gcc/testsuite/c-c++-common/Warray-bounds-2.c b/gcc/testsuite/c-c++-common/Warray-bounds-2.c
deleted file mode 100644
index b7e61ddec..000000000
--- a/gcc/testsuite/c-c++-common/Warray-bounds-2.c
+++ /dev/null
@@ -1,212 +0,0 @@
-/* Test to exercise that -Warray-bounds warnings for memory and string
-   functions are issued even when they are declared in system headers
-   (i.e., not just when they are explicitly declared in the source
-   file.)
-   Also verify that the warnings are issued even for calls where the
-   source of the excessive array bound is in a different function than
-   the call.
-   { dg-do compile }
-   { dg-options "-O2 -Warray-bounds -Wno-stringop-overflow" } */
-
-#include <stddef.h>
-#include <string.h>
-
-#define MAX  (__SIZE_MAX__ / 2)
-
-void sink (void*);
-
-struct __attribute__ ((packed)) Array
-{
-  char a13[13];
-  char a15[15];
-  char a17[17];
-};
-
-/* Exercise memcpy out-of-bounds offsets with an array of known size.  */
-
-static void
-wrap_memcpy_src_xsize (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  memcpy (d, s + i, n);   /* { dg-warning "offset 46 is out of the bounds \\\[0, 45] of object .ar. with type .(struct )?Array." "memcpy" } */
-}
-
-void call_memcpy_src_xsize (char *d, size_t n)
-{
-  struct Array ar;
-  sink (&ar);
-  wrap_memcpy_src_xsize (d, ar.a13, 46, n);
-  sink (&ar);
-}
-
-/* Exercise memcpy out-of-bounds offsets with an array of unknown size.  */
-
-static void
-wrap_memcpy_src_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  memcpy (d, s + i, n);   /* { dg-warning "pointer overflow between offset \[0-9\]+ and size 3" "memcpy" } */
-}
-
-void call_memcpy_src_diff_max (char *d, const char *s, size_t n)
-{
-  wrap_memcpy_src_diff_max (d, s, MAX, 3);
-}
-
-static void
-wrap_memcpy_dst_xsize (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  memcpy (d + i, s, n);   /* { dg-warning "offset 47 is out of the bounds \\\[0, 45] of object .ar1. with type .(struct )?Array." "memcpy" } */
-}
-
-void call_memcpy_dst_xsize (const char *s, size_t n)
-{
-  struct Array ar1;       /* { dg-message ".ar1. declared here" } */
-  sink (&ar1);
-  wrap_memcpy_dst_xsize (ar1.a15, s, 34, n);
-  sink (&ar1);
-}
-
-static void
-wrap_memcpy_dst_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  memcpy (d + i, s, n);   /* { dg-warning "offset -?\[0-9\]+ is out of the bounds \\\[0, 45] of object .ar2. with type .(struct )?Array." "memcpy" } */
-}
-
-void call_memcpy_dst_diff_max (const char *s, size_t n)
-{
-  struct Array ar2;       /* { dg-message ".ar2. declared here" } */
-  sink (&ar2);
-  wrap_memcpy_dst_diff_max (ar2.a15, s, MAX, n);
-  sink (&ar2);
-}
-
-
-static void wrap_strcat_src_xsize (char *d, const char *s, ptrdiff_t i)
-{
-  strcat (d, s + i);   /* { dg-warning "offset 46 is out of the bounds \\\[0, 45] of object .ar3. with type .(struct )?Array." "strcat" } */
-}
-
-void call_strcat_src_xsize (char *d)
-{
-  struct Array ar3;       /* { dg-message ".ar3. declared here" } */
-  sink (&ar3);
-  wrap_strcat_src_xsize (d, ar3.a15, 15 + 17 + 1);
-  sink (&ar3);
-}
-
-static void wrap_strcat_dst_xsize (char *d, const char *s, ptrdiff_t i)
-{
-  strcat (d + i, s);   /* { dg-warning "offset 47 is out of the bounds \\\[0, 45] of object .ar4. with type .(struct )?Array." "strcat" } */
-}
-
-void call_strcat_dst_xsize (const char *s)
-{
-  struct Array ar4;       /* { dg-message ".ar4. declared here" } */
-  sink (&ar4);
-  wrap_strcat_dst_xsize (ar4.a15, s, 15 + 17 + 2);
-  sink (&ar4);
-}
-
-
-static void wrap_strcpy_src_xsize (char *d, const char *s, ptrdiff_t i)
-{
-  strcpy (d, s + i);   /* { dg-warning "offset 48 is out of the bounds \\\[0, 45] of object .ar5. with type .(struct )?Array." "strcpy" } */
-}
-
-void call_strcpy_src_xsize (char *d)
-{
-  struct Array ar5;       /* { dg-message ".ar5. declared here" } */
-  sink (&ar5);
-  wrap_strcpy_src_xsize (d, ar5.a15, 15 + 17 + 3);
-  sink (&ar5);
-}
-
-static void wrap_strcpy_dst_xsize (char *d, const char *s, ptrdiff_t i)
-{
-  strcpy (d + i, s);   /* { dg-warning "offset 49 is out of the bounds \\\[0, 45] of object .ar6. with type .(struct )?Array." "strcpy" } */
-}
-
-void call_strcpy_dst_xsize (const char *s)
-{
-  struct Array ar6;       /* { dg-message ".ar6. declared here" } */
-  sink (&ar6);
-  wrap_strcpy_dst_xsize (ar6.a15, s, 15 + 17 + 4);
-  sink (&ar6);
-}
-
-
-/* Exercise strncpy out-of-bounds offsets with an array of known size.  */
-
-static void
-wrap_strncpy_src_xsize (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  strncpy (d, s + i, n);   /* { dg-warning "offset 46 is out of the bounds \\\[0, 45] of object .ar7. with type '(struct )?Array." "strncpy" } */
-}
-
-void call_strncpy_src_xsize (char *d, size_t n)
-{
-  struct Array ar7;       /* { dg-message ".ar7. declared here" } */
-  sink (&ar7);
-  wrap_strncpy_src_xsize (d, ar7.a17, 17 + 1, n);
-  sink (&ar7);
-}
-
-/* Exercise strncpy out-of-bounds offsets with an array of unknown size.  */
-
-static void
-wrap_strncpy_src_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  /* Unlike in the similar call to memcpy(), there is no pointer
-     overflow here because the size N is not added to the source
-     offset.  */
-  strncpy (d, s + i, n);
-}
-
-void call_strncpy_src_diff_max (char *d, const char *s, size_t n)
-{
-  wrap_strncpy_src_diff_max (d, s, MAX, 3);
-}
-
-static void
-wrap_strncpy_dst_xsize (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  strncpy (d + i, s, n);   /* { dg-warning "offset 47 is out of the bounds \\\[0, 45] of object .ar8. with type .(struct )?Array." "strncpy" } */
-}
-
-void call_strncpy_dst_xsize (const char *s, size_t n)
-{
-  struct Array ar8;       /* { dg-message ".ar8. declared here" } */
-  sink (&ar8);
-  wrap_strncpy_dst_xsize (ar8.a17, s, 17 + 2, n);
-  sink (&ar8);
-}
-
-static void
-wrap_strncpy_dst_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  strncpy (d + i, s, n);   /* { dg-warning "offset -\[0-9\]+ is out of the bounds \\\[0, 45] of object .ar9. with type .(struct )?Array." "strncpy" } */
-}
-
-void call_strncpy_dst_diff_max (const char *s, size_t n)
-{
-  struct Array ar9;       /* { dg-message ".ar9. declared here" "strncpy" } */
-  sink (&ar9);
-  wrap_strncpy_dst_diff_max (ar9.a17, s, MAX, n);
-  sink (&ar9);
-}
-
-static void
-wrap_strncpy_dstarray_diff_neg (char *d, const char *s, ptrdiff_t i, size_t n)
-{
-  strncpy (d + i, s, n);   /* { dg-warning "offset -\[0-9\]+ is out of the bounds \\\[0, 90] of object .ar10. with type .(struct )?Array ?\\\[2]." "strncpy" } */
-}
-
-void call_strncpy_dstarray_diff_neg (const char *s, size_t n)
-{
-  struct Array ar10[2];    /* { dg-message ".ar10. declared here" } */
-  sink (&ar10);
-
-  int off = (char*)ar10[1].a17 - (char*)ar10 + 1;
-  wrap_strncpy_dstarray_diff_neg (ar10[1].a17, s, -off, n);
-
-  sink (&ar10);
-}
diff --git a/gcc/testsuite/c-c++-common/Wrestrict-2.c b/gcc/testsuite/c-c++-common/Wrestrict-2.c
deleted file mode 100644
index c3e9ac82d..000000000
--- a/gcc/testsuite/c-c++-common/Wrestrict-2.c
+++ /dev/null
@@ -1,70 +0,0 @@
-/* PR 35503 - Warn about restricted pointers
-   Test to exercise that -Wrestrict warnings are issued for memory and
-   sring functions when they are declared in system headers (i.e., not
-   just when they are explicitly declared in the source file.)
-   Also verify that the warnings are issued even for calls where the
-   source of the aliasing violation is in a different function than
-   the restricted call.
-   { dg-do compile }
-   { dg-options "-O2 -Wrestrict" } */
-
-#include <string.h>
-
-static void wrap_memcpy (void *d, const void *s, size_t n)
-{
-  memcpy (d, s, n);   /* { dg-warning "accessing 2 bytes at offsets 0 and 1 overlaps 1 byte at offset 1" "memcpy" } */
-}
-
-void call_memcpy (char *d)
-{
-  const void *s = d + 1;
-  wrap_memcpy (d, s, 2);
-}
-
-
-static void wrap_strcat (char *d, const char *s)
-{
-  strcat (d, s);   /* { dg-warning "source argument is the same as destination" "strcat" } */
-}
-
-void call_strcat (char *d)
-{
-  const char *s = d;
-  wrap_strcat (d, s);
-}
-
-
-static void wrap_strcpy (char *d, const char *s)
-{
-  strcpy (d, s);   /* { dg-warning "source argument is the same as destination" "strcpy" } */
-}
-
-void call_strcpy (char *d)
-{
-  const char *s = d;
-  wrap_strcpy (d, s);
-}
-
-
-static void wrap_strncat (char *d, const char *s, size_t n)
-{
-  strncat (d, s, n);   /* { dg-warning "source argument is the same as destination" "strncat" } */
-}
-
-void call_strncat (char *d, size_t n)
-{
-  const char *s = d;
-  wrap_strncat (d, s, n);
-}
-
-
-static void wrap_strncpy (char *d, const char *s, size_t n)
-{
-  strncpy (d, s, n);   /* { dg-warning "source argument is the same as destination" "strncpy" } */
-}
-
-void call_strncpy (char *d, size_t n)
-{
-  const char *s = d;
-  wrap_strncpy (d, s, n);
-}
diff --git a/gcc/testsuite/c-c++-common/asan/pr59063-2.c b/gcc/testsuite/c-c++-common/asan/pr59063-2.c
index 759b7f24d..a22db6a0d 100644
--- a/gcc/testsuite/c-c++-common/asan/pr59063-2.c
+++ b/gcc/testsuite/c-c++-common/asan/pr59063-2.c
@@ -1,5 +1,4 @@
 /* { dg-do run { target { *-*-linux* } } } */
-/* { dg-options "-static-libasan" } */
 
 #include <time.h>
 static int weak_gettime (clockid_t clk_id, struct timespec *tp)
diff --git a/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c b/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
index a9c9b1828..ce8a3f58e 100644
--- a/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
+++ b/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-fno-builtin-malloc -fno-builtin-strncpy" } */
+/* { dg-options "-fno-builtin-malloc -fno-builtin-strncpy -Wno-stringop-overflow" } */
 /* { dg-shouldfail "asan" } */
 
 #include <string.h>
diff --git a/gcc/testsuite/c-c++-common/attr-nonstring-3.c b/gcc/testsuite/c-c++-common/attr-nonstring-3.c
index a54e73a32..78c81f355 100644
--- a/gcc/testsuite/c-c++-common/attr-nonstring-3.c
+++ b/gcc/testsuite/c-c++-common/attr-nonstring-3.c
@@ -1,7 +1,7 @@
 /* Test to exercise warnings when an array declared with attribute "nonstring"
    is passed to a function that expects a nul-terminated string as an argument.
    { dg-do compile }
-   { dg-options "-O2 -Wattributes -Wstringop-overflow -ftrack-macro-expansion=0" }  */
+   { dg-options "-O2 -Wattributes -Wstringop-overflow -ftrack-macro-expansion=0 -Wno-format-security" }  */
 
 typedef __SIZE_TYPE__       size_t;
 typedef __builtin_va_list   va_list;
diff --git a/gcc/testsuite/c-c++-common/torture/vector-compare-1.c b/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
index 4cdfcf718..a1bf21337 100644
--- a/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
+++ b/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-format" } */
 #define vector(elcount, type)  \
 __attribute__((vector_size((elcount)*sizeof(type)))) type
 
diff --git a/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c b/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
index e2176da4b..175efea0d 100644
--- a/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
+++ b/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
@@ -1,4 +1,5 @@
 /* { dg-shouldfail "tsan" } */
+/* { dg-options "-Wno-unused-result" } */
 /* { dg-additional-options "-ldl" } */
 
 #include <pthread.h>
diff --git a/gcc/testsuite/g++.dg/abi/pragma-pack1.C b/gcc/testsuite/g++.dg/abi/pragma-pack1.C
index 9b76071c9..689807c24 100644
--- a/gcc/testsuite/g++.dg/abi/pragma-pack1.C
+++ b/gcc/testsuite/g++.dg/abi/pragma-pack1.C
@@ -1,4 +1,5 @@
 // PR c++/7046
+// { dg-options "-Wno-format" }
 
 extern "C" int printf (const char *, ...);
 
diff --git a/gcc/testsuite/g++.dg/abi/regparm1.C b/gcc/testsuite/g++.dg/abi/regparm1.C
index c4710464a..63a40bfd8 100644
--- a/gcc/testsuite/g++.dg/abi/regparm1.C
+++ b/gcc/testsuite/g++.dg/abi/regparm1.C
@@ -1,5 +1,6 @@
 // PR c++/29911 (9381)
 // { dg-do run { target i?86-*-* x86_64-*-* } }
+// { dg-options "-Wno-format" }
 // { dg-require-effective-target c++11 }
 
 extern "C" int printf(const char *, ...);
diff --git a/gcc/testsuite/g++.dg/asan/asan_test.C b/gcc/testsuite/g++.dg/asan/asan_test.C
index f3f7626ef..b8c635fdc 100644
--- a/gcc/testsuite/g++.dg/asan/asan_test.C
+++ b/gcc/testsuite/g++.dg/asan/asan_test.C
@@ -2,7 +2,7 @@
 // { dg-skip-if "" { *-*-* } { "*" } { "-O2" } }
 // { dg-skip-if "" { *-*-* } { "-flto" } { "" } }
 // { dg-additional-sources "asan_globals_test-wrapper.cc" }
-// { dg-options "-std=c++11 -fsanitize=address -fno-builtin -Wall -Werror -g -DASAN_UAR=0 -DASAN_HAS_EXCEPTIONS=1 -DASAN_HAS_BLACKLIST=0 -DSANITIZER_USE_DEJAGNU_GTEST=1 -lasan -lpthread -ldl" }
+// { dg-options "-std=c++11 -fsanitize=address -fno-builtin -Wall -Wno-restrict -Wno-unused-result -Werror -g -DASAN_UAR=0 -DASAN_HAS_EXCEPTIONS=1 -DASAN_HAS_BLACKLIST=0 -DSANITIZER_USE_DEJAGNU_GTEST=1 -lasan -lpthread -ldl" }
 // { dg-additional-options "-DASAN_NEEDS_SEGV=1" { target { ! arm*-*-* } } }
 // { dg-additional-options "-DASAN_LOW_MEMORY=1 -DASAN_NEEDS_SEGV=0" { target arm*-*-* } }
 // { dg-additional-options "-DASAN_AVOID_EXPENSIVE_TESTS=1" { target { ! run_expensive_tests } } }
diff --git a/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C b/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
index e64c184a4..4c53b1c61 100644
--- a/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
+++ b/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
@@ -1,7 +1,7 @@
 // ASan interceptor can be accessed with __interceptor_ prefix.
 
 // { dg-do run { target *-*-linux* } }
-// { dg-options "-fno-builtin-free" }
+// { dg-options "-fno-builtin-free -Wno-unused-result" }
 // { dg-additional-options "-D__NO_INLINE__" { target { *-*-linux-gnu } } }
 // { dg-shouldfail "asan" }
 
diff --git a/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C b/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
index f59cd8453..886b244b8 100644
--- a/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
+++ b/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
@@ -1,5 +1,6 @@
 // PR c++/53202
 // { dg-do run { target c++11 } }
+// { dg-options "-Wno-format" }
 
 #include <tuple>
 
diff --git a/gcc/testsuite/g++.dg/ext/align1.C b/gcc/testsuite/g++.dg/ext/align1.C
index 6c960c396..4484e3b53 100644
--- a/gcc/testsuite/g++.dg/ext/align1.C
+++ b/gcc/testsuite/g++.dg/ext/align1.C
@@ -2,6 +2,7 @@
 // The alignment used to be 64 but Cygwin does not
 // support an alignment greater than 16 and COFF 
 // not support an alignment greater than 4.
+// { dg-options "-Wno-format" }
 
 extern "C" int printf (const char *, ...);
 
diff --git a/gcc/testsuite/g++.dg/init/elide3.C b/gcc/testsuite/g++.dg/init/elide3.C
index 7eb0389a3..22a01c7ee 100644
--- a/gcc/testsuite/g++.dg/init/elide3.C
+++ b/gcc/testsuite/g++.dg/init/elide3.C
@@ -1,5 +1,6 @@
 // PR c++/67557
 // { dg-do run }
+// { dg-options "-Wno-format" }
 
 namespace std
 {
diff --git a/gcc/testsuite/g++.dg/opt/alias2.C b/gcc/testsuite/g++.dg/opt/alias2.C
index 0b4122471..e75e52e54 100644
--- a/gcc/testsuite/g++.dg/opt/alias2.C
+++ b/gcc/testsuite/g++.dg/opt/alias2.C
@@ -1,5 +1,5 @@
 // { dg-do run }
-// { dg-options "-O2" }
+// { dg-options "-O2 -Wno-format" }
 
 extern "C" int printf (const char*, ...);
 
diff --git a/gcc/testsuite/g++.dg/pr83239.C b/gcc/testsuite/g++.dg/pr83239.C
index bf6be7a03..7df1521e6 100644
--- a/gcc/testsuite/g++.dg/pr83239.C
+++ b/gcc/testsuite/g++.dg/pr83239.C
@@ -1,7 +1,7 @@
 // PR tree-optimization/83239 - False positive from -Wstringop-overflow
 // on simple std::vector code
 // { dg-do compile }
-// { dg-options "-O3 -finline-limit=500 -Wall -fdump-tree-optimized"  }
+// { dg-options "-O3 -finline-limit=500 -Wall -fdump-tree-optimized -Wno-stringop-overflow"  }
 
 #include <vector>
 
diff --git a/gcc/testsuite/g++.dg/tc1/dr20.C b/gcc/testsuite/g++.dg/tc1/dr20.C
index 933385181..886b4de09 100644
--- a/gcc/testsuite/g++.dg/tc1/dr20.C
+++ b/gcc/testsuite/g++.dg/tc1/dr20.C
@@ -1,4 +1,5 @@
 // { dg-do run }
+// { dg-options "-Wno-format" }
 // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>
 // DR20: Some clarifications needed for 12.8 para 15 
 
diff --git a/gcc/testsuite/g++.dg/torture/pr77555.C b/gcc/testsuite/g++.dg/torture/pr77555.C
index 540d1a09a..cef4dd05f 100644
--- a/gcc/testsuite/g++.dg/torture/pr77555.C
+++ b/gcc/testsuite/g++.dg/torture/pr77555.C
@@ -1,5 +1,5 @@
 // { dg-do link }
-// { dg-options "-std=c++11" }
+// { dg-options "-std=c++11 -Wno-format" }
 
 extern "C" int printf(const char*, ...);
 struct A {
diff --git a/gcc/testsuite/g++.dg/warn/Wstringop-truncation-1.C b/gcc/testsuite/g++.dg/warn/Wstringop-truncation-1.C
deleted file mode 100644
index 830660197..000000000
--- a/gcc/testsuite/g++.dg/warn/Wstringop-truncation-1.C
+++ /dev/null
@@ -1,126 +0,0 @@
-/* PR/tree-optimization/84480 - bogus -Wstringop-truncation despite
-   assignment with an inlined string literal
-   { dg-do compile }
-   { dg-options "-O2 -Wstringop-truncation" }  */
-
-#include <string.h>
-
-template <size_t N>
-class GoodString
-{
-public:
-  GoodString (const char *s, size_t slen = N)
-  {
-    if (slen > N)
-      slen = N;
-
-    strncpy (str, s, slen);
-
-    str[slen] = '\0';
-  }
-
-private:
-  char str[N + 1];
-};
-
-void sink (void*);
-
-void good_nowarn_size_m2 ()
-{
-  GoodString<3> str ("12");
-  sink (&str);
-}
-
-void good_nowarn_size_m1 ()
-{
-  GoodString<3> str ("123");    // { dg-bogus "\\\[-Wstringop-truncation]" }
-  sink (&str);
-}
-
-static void good_nowarn_size_m1_var (const char* s)
-{
-  GoodString<3> str (s);        // { dg-bogus "\\\[-Wstringop-truncation]" }
-  sink (&str);
-}
-
-void call_good_nowarn_size_m1_var ()
-{
-  good_nowarn_size_m1_var ("456");
-}
-
-
-template <size_t N>
-class BadString1
-{
-public:
-  BadString1 (const char *s, size_t slen = N)
-  {
-    if (slen > N)
-      slen = N;
-
-    strncpy (str, s, slen);
-  }
-
-private:
-  char str[N + 1];
-};
-
-void bad1_nowarn_size_m2 ()
-{
-  BadString1<3> str ("12");
-  sink (&str);
-}
-
-
-template <size_t N>
-class BadString2
-{
-public:
-  BadString2 (const char *s, size_t slen = N)
-  {
-    if (slen > N)
-      slen = N;
-
-    strncpy (str, s, slen);     // { dg-warning "\\\[-Wstringop-truncation]" }
-  }
-
-private:
-  char str[N + 1];
-};
-
-void bad2_warn_size_m1 ()
-{
-  BadString2<3> str ("123");
-  sink (&str);
-}
-
-// { dg-message "inlined from .void bad2_warn_size_m1." "" { target *-*-* } 0 }
-
-template <size_t N>
-class BadString3
-{
-public:
-  BadString3 (const char *s, size_t slen = N)
-  {
-    if (slen > N)
-      slen = N;
-
-    strncpy (str, s, slen);     // { dg-warning "\\\[-Wstringop-truncation]" }
-  }
-
-private:
-  char str[N + 1];
-};
-
-static void bad3_warn_size_m1_var (const char *s)
-{
-  BadString3<3> str (s);
-  sink (&str);
-}
-
-void call_bad3_warn_size_m1_var ()
-{
-  bad3_warn_size_m1_var ("456");
-}
-
-// { dg-message "inlined from .void call_bad3_warn_size_m1_var." "" { target *-*-* } 0 }
diff --git a/gcc/testsuite/g++.dg/warn/pr83054.C b/gcc/testsuite/g++.dg/warn/pr83054.C
index 506c9609b..c8815886f 100644
--- a/gcc/testsuite/g++.dg/warn/pr83054.C
+++ b/gcc/testsuite/g++.dg/warn/pr83054.C
@@ -1,5 +1,5 @@
 // PR ipa/83054
-// { dg-options "-O3 -Wsuggest-final-types" }
+// { dg-options "-O3 -Wsuggest-final-types -Wno-format" }
 // { dg-do compile }
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C b/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
index 680bec737..97610b1bd 100644
--- a/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
+++ b/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Copyright (C) 2000 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 16 Jan 2001 <nathan@codesourcery.com>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.brendan/template8.C b/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
index 66ba0d8ac..03f7c3f9d 100644
--- a/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
+++ b/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates
 #include <stdio.h>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C b/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
index aefe5cc61..50aa6a66e 100644
--- a/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
+++ b/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Bug: catching pointers by reference doesn't work right.
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.jason/access23.C b/gcc/testsuite/g++.old-deja/g++.jason/access23.C
index aec281973..f41801efa 100644
--- a/gcc/testsuite/g++.old-deja/g++.jason/access23.C
+++ b/gcc/testsuite/g++.old-deja/g++.jason/access23.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // PRMS Id: 9127
 // Bug: members of anonymous unions are not access-controlled.
 
diff --git a/gcc/testsuite/g++.old-deja/g++.law/cvt8.C b/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
index cecec9c48..373b0d82d 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed conversions
 // cvt file
 // From: solomon@cs.wisc.edu (Marvin Solomon)
diff --git a/gcc/testsuite/g++.old-deja/g++.law/operators28.C b/gcc/testsuite/g++.old-deja/g++.law/operators28.C
index 7d166474a..005a354b0 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/operators28.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/operators28.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed operators
 #include <sys/types.h>
 #include <stdio.h>
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/net35.C b/gcc/testsuite/g++.old-deja/g++.mike/net35.C
index bded913c0..9140e7b81 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/net35.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/net35.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 
 class A {
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/offset1.C b/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
index b0ddc7b54..5e3ca7729 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 void *vp;
 int fail = 0;
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p12306.C b/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
index 6309016a3..923e5ff1f 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 12306
 
 void *ptr1, *ptr2;
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3579.C b/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
index 90a134446..32988722c 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3579
 
 extern "C" int printf(const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
index 56e4bcbe2..42de2bdbe 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
index dff53b553..858b2b76e 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
index 2cccc4691..7883c47b4 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p646.C b/gcc/testsuite/g++.old-deja/g++.mike/p646.C
index 4f7807d11..d7bc1bc21 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p646.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p646.C
@@ -1,5 +1,5 @@
 // { dg-do assemble  }
-// { dg-options "-Wno-deprecated -Wreturn-type" }
+// { dg-options "-Wno-deprecated -Wreturn-type -Wno-format" }
 // GROUPS passed i960
 /*
   Bug Id: bnr
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p710.C b/gcc/testsuite/g++.old-deja/g++.mike/p710.C
index 7fdd5b022..c16bbfc7d 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p710.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p710.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed delete
 /*
   Bug Id: 
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p789a.C b/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
index bee0228bb..725aa7dc1 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // global and local multidimensional array objects are not getting
 // constructors called on any dimension, other than the first.  Also,
 // the destructors are not being called.  Seems odd, they probably
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C b/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
index 209c5ebea..2839b4f31 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 
 class A_table {
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/temp.C b/gcc/testsuite/g++.old-deja/g++.mike/temp.C
index 0a5ce5812..dc64f13a1 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/temp.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/temp.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 extern "C" const char *getenv(const char *);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.other/temporary1.C b/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
index b1c8cd651..d940ecbff 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char *, ...);
 
 int c, d;
diff --git a/gcc/testsuite/g++.old-deja/g++.other/vbase5.C b/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
index 3d22ff50d..7788cb584 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Copyright (C) 2000 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 19 Jan 2001 <nathan@codesourcery.com>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.other/virtual8.C b/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
index f1ec9ada6..4229c1df0 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char*, ...);
 
 struct A
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
index 3111f41b5..1587cb8c9 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
index 4e81d015d..be214f406 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
index 6c196f5d4..157ed94eb 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
index 3eb5f287d..098d12445 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/t39.C b/gcc/testsuite/g++.old-deja/g++.pt/t39.C
index 8f9bead3a..f8569a002 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/t39.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/t39.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char *, ...);
 
 template <class T>
diff --git a/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C b/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
index 4163399fb..efd291aa1 100644
--- a/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
+++ b/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 #include <stdio.h>
 
 class A {
diff --git a/gcc/testsuite/gcc.c-torture/execute/vfprintf-chk-1.c b/gcc/testsuite/gcc.c-torture/execute/vfprintf-chk-1.c
deleted file mode 100644
index 401eaf430..000000000
--- a/gcc/testsuite/gcc.c-torture/execute/vfprintf-chk-1.c
+++ /dev/null
@@ -1,75 +0,0 @@
-/* { dg-skip-if "requires io" { freestanding } }  */
-
-#ifndef test
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdarg.h>
-
-volatile int should_optimize;
-
-int
-__attribute__((noinline))
-__vfprintf_chk (FILE *f, int flag, const char *fmt, va_list ap)
-{
-#ifdef __OPTIMIZE__
-  if (should_optimize)
-    abort ();
-#endif
-  should_optimize = 1;
-  return vfprintf (f, fmt, ap);
-}
-
-void
-inner (int x, ...)
-{
-  va_list ap, ap2;
-  va_start (ap, x);
-  va_start (ap2, x);
-
-  switch (x)
-    {
-#define test(n, ret, opt, fmt, args) \
-    case n:						\
-      should_optimize = opt;				\
-      __vfprintf_chk (stdout, 1, fmt, ap);		\
-      if (! should_optimize)				\
-	abort ();					\
-      should_optimize = 0;				\
-      if (__vfprintf_chk (stdout, 1, fmt, ap2) != ret)	\
-	abort ();					\
-      if (! should_optimize)				\
-	abort ();					\
-      break;
-#include "vfprintf-chk-1.c"
-#undef test
-    default:
-      abort ();
-    }
-
-  va_end (ap);
-  va_end (ap2);
-}
-
-int
-main (void)
-{
-#define test(n, ret, opt, fmt, args) \
-  inner args;
-#include "vfprintf-chk-1.c"
-#undef test
-  return 0;
-}
-
-#else
-  test (0, 5, 1, "hello", (0));
-  test (1, 6, 1, "hello\n", (1));
-  test (2, 1, 1, "a", (2));
-  test (3, 0, 1, "", (3));
-  test (4, 5, 0, "%s", (4, "hello"));
-  test (5, 6, 0, "%s", (5, "hello\n"));
-  test (6, 1, 0, "%s", (6, "a"));
-  test (7, 0, 0, "%s", (7, ""));
-  test (8, 1, 0, "%c", (8, 'x'));
-  test (9, 7, 0, "%s\n", (9, "hello\n"));
-  test (10, 2, 0, "%d\n", (10, 0));
-#endif
diff --git a/gcc/testsuite/gcc.dg/20050607-1.c b/gcc/testsuite/gcc.dg/20050607-1.c
index 83c096748..b67811486 100644
--- a/gcc/testsuite/gcc.dg/20050607-1.c
+++ b/gcc/testsuite/gcc.dg/20050607-1.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-Wpadded" }
+/* { dg-options "-Wpadded -Wno-trampolines" }
 /* The struct internally constructed for the nested function should
    not result in a warning from -Wpadded. */
 extern int baz(int (*) (int));
diff --git a/gcc/testsuite/gcc.dg/builtins-nonnull.c b/gcc/testsuite/gcc.dg/builtins-nonnull.c
index f8c482e98..91fc7e462 100644
--- a/gcc/testsuite/gcc.dg/builtins-nonnull.c
+++ b/gcc/testsuite/gcc.dg/builtins-nonnull.c
@@ -1,7 +1,7 @@
 /* PR c/17308 - nonnull attribute not as useful as it could be
    PR c/78673 - sprintf missing attribute nonnull on destination argument
    { dg-do "compile" }
-   { dg-additional-options "-O2 -Wnonnull -ftrack-macro-expansion=0 -std=c99" } */
+   { dg-additional-options "-O2 -Wnonnull -ftrack-macro-expansion=0 -std=c99 -Wno-format-security" } */
 
 #define va_list __builtin_va_list
 
diff --git a/gcc/testsuite/gcc.dg/charset/builtin2.c b/gcc/testsuite/gcc.dg/charset/builtin2.c
index bfe9a20e2..8039d3584 100644
--- a/gcc/testsuite/gcc.dg/charset/builtin2.c
+++ b/gcc/testsuite/gcc.dg/charset/builtin2.c
@@ -3,7 +3,7 @@
 
 /* { dg-do compile } */
 /* { dg-require-iconv "IBM1047" } */
-/* { dg-options "-O2 -fexec-charset=IBM1047" } */
+/* { dg-options "-O2 -fexec-charset=IBM1047 -Wno-format" } */
 /* { dg-final { scan-assembler-not "printf" } } */
 /* { dg-final { scan-assembler-not "fprintf" } } */
 /* { dg-final { scan-assembler-not "sprintf" } } */
diff --git a/gcc/testsuite/gcc.dg/debug/debug-3.c b/gcc/testsuite/gcc.dg/debug/debug-3.c
index e2b7a4b18..fe6d0c5bf 100644
--- a/gcc/testsuite/gcc.dg/debug/debug-3.c
+++ b/gcc/testsuite/gcc.dg/debug/debug-3.c
@@ -1,6 +1,7 @@
 /* This testcase failed, because scope containing baz was deleted
    (spanned 0 basic blocks) and DWARF-2 couldn't find baz origin.  */
 /* { dg-do compile } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 struct A { char *a, *b, *c, *d; };
diff --git a/gcc/testsuite/gcc.dg/debug/debug-5.c b/gcc/testsuite/gcc.dg/debug/debug-5.c
index f66b861c8..485aeeab7 100644
--- a/gcc/testsuite/gcc.dg/debug/debug-5.c
+++ b/gcc/testsuite/gcc.dg/debug/debug-5.c
@@ -1,6 +1,7 @@
 /* This testcase failed, because scope containing baz was deleted
    (spanned 0 basic blocks) and DWARF-2 couldn't find baz origin.  */
 /* { dg-do compile } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 extern void abort (void);
diff --git a/gcc/testsuite/gcc.dg/format/opt-1.c b/gcc/testsuite/gcc.dg/format/opt-1.c
deleted file mode 100644
index f8f370448..000000000
--- a/gcc/testsuite/gcc.dg/format/opt-1.c
+++ /dev/null
@@ -1,7 +0,0 @@
-/* Test diagnostics for options used on their own without
-   -Wformat.  -Wformat-extra-args.  */
-/* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do compile } */
-/* { dg-options "-Wformat-extra-args" } */
-
-/* { dg-warning "-Wformat-extra-args ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-2.c b/gcc/testsuite/gcc.dg/format/opt-2.c
deleted file mode 100644
index 1ec9f0141..000000000
--- a/gcc/testsuite/gcc.dg/format/opt-2.c
+++ /dev/null
@@ -1,7 +0,0 @@
-/* Test diagnostics for options used on their own without
-   -Wformat.  -Wformat-nonliteral.  */
-/* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do compile } */
-/* { dg-options "-Wformat-nonliteral" } */
-
-/* { dg-warning "-Wformat-nonliteral ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-3.c b/gcc/testsuite/gcc.dg/format/opt-3.c
deleted file mode 100644
index 03f55e436..000000000
--- a/gcc/testsuite/gcc.dg/format/opt-3.c
+++ /dev/null
@@ -1,7 +0,0 @@
-/* Test diagnostics for options used on their own without
-   -Wformat.  -Wformat-security.  */
-/* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do compile } */
-/* { dg-options "-Wformat-security" } */
-
-/* { dg-warning "-Wformat-security ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-4.c b/gcc/testsuite/gcc.dg/format/opt-4.c
deleted file mode 100644
index f02b6c094..000000000
--- a/gcc/testsuite/gcc.dg/format/opt-4.c
+++ /dev/null
@@ -1,7 +0,0 @@
-/* Test diagnostics for options used on their own without
-   -Wformat.  -Wformat-y2k.  */
-/* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do compile } */
-/* { dg-options "-Wformat-y2k" } */
-
-/* { dg-warning "-Wformat-y2k ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-5.c b/gcc/testsuite/gcc.dg/format/opt-5.c
deleted file mode 100644
index 3315e3358..000000000
--- a/gcc/testsuite/gcc.dg/format/opt-5.c
+++ /dev/null
@@ -1,7 +0,0 @@
-/* Test diagnostics for options used on their own without
-   -Wformat.  -Wformat-zero-length.  */
-/* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do compile } */
-/* { dg-options "-Wformat-zero-length" } */
-
-/* { dg-warning "-Wformat-zero-length ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-6.c b/gcc/testsuite/gcc.dg/format/opt-6.c
deleted file mode 100644
index 29dedfae5..000000000
--- a/gcc/testsuite/gcc.dg/format/opt-6.c
+++ /dev/null
@@ -1,7 +0,0 @@
-/* Test diagnostics for options used on their own without
-   -Wformat.  -Wformat-contains-nul.  */
-/* Origin: Bruce Korb <bkorb@gnu.org> */
-/* { dg-do compile } */
-/* { dg-options "-Wformat-contains-nul" } */
-
-/* { dg-warning "-Wformat-contains-nul ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-1.c b/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
index 3260ac7d5..d8b05bd89 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
@@ -1,6 +1,6 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O1" } */
+/* { dg-options "-fopenmp -O1 -Wno-trampolines" } */
 
 void baz (int (*) ());
 
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-2.c b/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
index bc6c7c54c..b43622659 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
@@ -1,5 +1,5 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O0" } */
+/* { dg-options "-fopenmp -O0 -Wno-trampolines" } */
 
 #include "pr66633-1.c"
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-3.c b/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
index eaa3b0d8b..3facd55d8 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
@@ -1,6 +1,6 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O1" } */
+/* { dg-options "-fopenmp -O1 -Wno-trampolines" } */
 
 void baz (int (*) ());
 
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-4.c b/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
index 93cdcc2b9..9f92935bc 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
@@ -1,5 +1,5 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O0" } */
+/* { dg-options "-fopenmp -O0 -Wno-trampolines" } */
 
 #include "pr66633-3.c"
diff --git a/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c b/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
index 4db904b41..6b70694ca 100644
--- a/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
+++ b/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details"  } */
+/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details -Wno-format"  } */
 
 struct bovid
 {
diff --git a/gcc/testsuite/gcc.dg/ipa/ipa-sra-11.c b/gcc/testsuite/gcc.dg/ipa/ipa-sra-11.c
index e91423a62..a6c103a93 100644
--- a/gcc/testsuite/gcc.dg/ipa/ipa-sra-11.c
+++ b/gcc/testsuite/gcc.dg/ipa/ipa-sra-11.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details"  } */
+/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details -Wno-format"  } */
 
 struct bovid
 {
diff --git a/gcc/testsuite/gcc.dg/nested-func-5.c b/gcc/testsuite/gcc.dg/nested-func-5.c
index 3545f37e5..1f6791534 100644
--- a/gcc/testsuite/gcc.dg/nested-func-5.c
+++ b/gcc/testsuite/gcc.dg/nested-func-5.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-fexceptions" } */
+/* { dg-options "-fexceptions -Wno-trampolines" } */
 /* PR28516: ICE generating ARM unwind directives for nested functions.  */
 /* { dg-require-effective-target trampolines } */
 
diff --git a/gcc/testsuite/gcc.dg/packed-vla.c b/gcc/testsuite/gcc.dg/packed-vla.c
index e673b729b..e4b268eec 100644
--- a/gcc/testsuite/gcc.dg/packed-vla.c
+++ b/gcc/testsuite/gcc.dg/packed-vla.c
@@ -1,6 +1,6 @@
 /* PR middle-end/27945 */
 /* { dg-do run } */
-/* { dg-options "" } */
+/* { dg-options "-Wno-format" } */
 /* { dg-require-effective-target alloca } */
 
 extern int printf (const char *, ...);
diff --git a/gcc/testsuite/gcc.dg/pch/inline-4.c b/gcc/testsuite/gcc.dg/pch/inline-4.c
deleted file mode 100644
index 60e35aa62..000000000
--- a/gcc/testsuite/gcc.dg/pch/inline-4.c
+++ /dev/null
@@ -1,6 +0,0 @@
-#include "inline-4.h"
-extern int printf (const char *, ...);
-int main(void) {
-  printf (getstring());
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/pch/inline-4.hs b/gcc/testsuite/gcc.dg/pch/inline-4.hs
deleted file mode 100644
index 31a5069ff..000000000
--- a/gcc/testsuite/gcc.dg/pch/inline-4.hs
+++ /dev/null
@@ -1,4 +0,0 @@
-static inline char *getstring(void)
-{
-  return "hello";
-}
diff --git a/gcc/testsuite/gcc.dg/pr30473.c b/gcc/testsuite/gcc.dg/pr30473.c
index f01c1cc4a..b0bcbc30b 100644
--- a/gcc/testsuite/gcc.dg/pr30473.c
+++ b/gcc/testsuite/gcc.dg/pr30473.c
@@ -1,7 +1,7 @@
 /* PR middle-end/30473 */
 /* Make sure this doesn't ICE.  */
 /* { dg-do compile } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-format" } */
 
 extern int sprintf (char *, const char *, ...);
 
diff --git a/gcc/testsuite/gcc.dg/pr34457-1.c b/gcc/testsuite/gcc.dg/pr34457-1.c
index 3dca13df0..5e69b2841 100644
--- a/gcc/testsuite/gcc.dg/pr34457-1.c
+++ b/gcc/testsuite/gcc.dg/pr34457-1.c
@@ -2,7 +2,7 @@
 /* { dg-do link } */
 /* { dg-require-effective-target trampolines } */
 /* { dg-require-effective-target lto } */
-/* { dg-options "-flto -O2" } */
+/* { dg-options "-flto -O2 -Wno-trampolines" } */
 /* { dg-additional-sources "pr34457-2.c" } */
    
 
diff --git a/gcc/testsuite/gcc.dg/pr38902.c b/gcc/testsuite/gcc.dg/pr38902.c
index d40652624..f6decfce5 100644
--- a/gcc/testsuite/gcc.dg/pr38902.c
+++ b/gcc/testsuite/gcc.dg/pr38902.c
@@ -1,6 +1,6 @@
 /* PR target/38902 */
 /* { dg-do run } */
-/* { dg-options "-O2 -fstack-protector" } */
+/* { dg-options "-O2 -fstack-protector -Wno-format-security" } */
 /* { dg-require-effective-target fstack_protector } */
 
 #ifdef DEBUG
diff --git a/gcc/testsuite/gcc.dg/pr82167.c b/gcc/testsuite/gcc.dg/pr82167.c
index af3b3a5a1..7ebcf9f8a 100644
--- a/gcc/testsuite/gcc.dg/pr82167.c
+++ b/gcc/testsuite/gcc.dg/pr82167.c
@@ -1,5 +1,6 @@
 /* PR c/82167 */
 /* { dg-do compile } */
+/* { dg-options "-Wno-format" } */
 
 void
 fn1 (int a[])
diff --git a/gcc/testsuite/gcc.dg/torture/matrix-2.c b/gcc/testsuite/gcc.dg/torture/matrix-2.c
index 8aaf7c60f..8a2cba61d 100644
--- a/gcc/testsuite/gcc.dg/torture/matrix-2.c
+++ b/gcc/testsuite/gcc.dg/torture/matrix-2.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-fwhole-program" } */
+/* { dg-options "-fwhole-program -Wno-format" } */
 
 
 #include <stdio.h>
diff --git a/gcc/testsuite/gcc.dg/torture/nested-fn-1.c b/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
index 99e852344..be2bc1bb1 100644
--- a/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
+++ b/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
@@ -1,7 +1,7 @@
 /* PR middle-end/15345, c/16450 */
 /* Test whether unused nested functions aren't emitted into the assembly.  */
 /* { dg-do compile } */
-/* { dg-options "-g0" } */
+/* { dg-options "-g0 -Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 int
diff --git a/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c b/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
index e6bf3645c..0a00aef50 100644
--- a/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
+++ b/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 extern void abort (void);
diff --git a/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c b/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
index 708cd9e89..152eff3d9 100644
--- a/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
+++ b/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 typedef __SIZE_TYPE__ size_t;
diff --git a/gcc/testsuite/gcc.dg/torture/tls/tls-test.c b/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
index 8a23e77c1..43b78dbf8 100644
--- a/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
+++ b/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
@@ -1,7 +1,7 @@
 /* { dg-do run }  */
 /* { dg-require-effective-target tls  }  */
 /* { dg-require-effective-target pthread } */
-/* { dg-options "-pthread" } */
+/* { dg-options "-pthread -Wno-format" } */
 
 #include <pthread.h>
 extern int printf (char *,...);
diff --git a/gcc/testsuite/gcc.dg/trampoline-1.c b/gcc/testsuite/gcc.dg/trampoline-1.c
index e3dcf573a..940404156 100644
--- a/gcc/testsuite/gcc.dg/trampoline-1.c
+++ b/gcc/testsuite/gcc.dg/trampoline-1.c
@@ -3,7 +3,7 @@
 
 /* { dg-do run } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 
 /* This used to fail on various versions of Solaris 2 because the
    trampoline couldn't be made executable.  */
diff --git a/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c b/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c
index fb7a1bd1e..405aeb139 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c
@@ -1,7 +1,7 @@
 /* PR middle-end/78476 - snprintf(0, 0, ...) with known arguments not
    optimized away
    { dg-do compile }
-   { dg-options "-O2 -fdump-tree-optimized" }
+   { dg-options "-O2 -fdump-tree-optimized -Wno-format" }
    { dg-require-effective-target int32plus } */
 
 #define CAT(s, n)   s ## n
diff --git a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c
index b67ebf126..ac6bee898 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c
@@ -1,5 +1,5 @@
 /* { dg-do run { target trampolines } } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 /* { dg-additional-sources "tailcall-7.c" } */
 
 struct s { int x; };
diff --git a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c
index def8d137f..1378bf817 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c
@@ -1,5 +1,5 @@
 /* { dg-do compile { target trampolines } } */
-/* { dg-options "-O2 -fdump-tree-tailc-details" } */
+/* { dg-options "-O2 -fdump-tree-tailc-details -Wno-trampolines" } */
 
 struct s { int x; };
 struct s f (int);
diff --git a/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp b/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp
index 43719d617..519c60d76 100644
--- a/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp
+++ b/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp
@@ -27,7 +27,7 @@ if { ![istarget aarch64*-*-*] } then {
 
 torture-init
 set-torture-options $C_TORTURE_OPTIONS
-set additional_flags "-W -Wall -Wno-abi"
+set additional_flags "-W -Wall -Wno-abi -static"
 
 # Test parameter passing.
 foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c
index a3210a94b..588fca055 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c
@@ -2,6 +2,7 @@
    vreinterpret which have their own testcase.  */
 
 /* { dg-require-effective-target arm_crypto_ok { target { arm*-*-* } } } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_crypto } */
 /* { dg-additional-options "-march=armv8-a+crypto" { target { aarch64*-*-* } } }*/
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c
index a27871bbf..964a42db4 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c
index 2d197b4ea..b29b476c2 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c
index 27502c220..8edb8bc0b 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c
index cfc33c24e..5e57120e9 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c
index c7b3d1746..39fac65e2 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c
index a904e5e47..f662d3ed7 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c
index 7b5b16ff5..fdaeb38f4 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c
index cae69a347..3f4932d11 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c
index 0048b5bf1..f7fab3e67 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c
index 3b1b273b6..dc96c9ee9 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c
index 290c5b13a..00db4694f 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c
index 02290991a..30c404e12 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x2.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x2.c
index 92a139bc5..c0847fa47 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x2.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x2.c
@@ -1,6 +1,5 @@
 /* We haven't implemented these intrinsics for arm yet.  */
-/* { dg-xfail-if "" { arm*-*-* } } */
-/* { dg-do run } */
+/* { dg-do run { target { aarch64*-*-* } } } */
 /* { dg-options "-O3" } */
 
 #include <arm_neon.h>
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x3.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x3.c
index 6ddd507d9..daed98ad1 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x3.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x3.c
@@ -1,6 +1,5 @@
 /* We haven't implemented these intrinsics for arm yet.  */
-/* { dg-xfail-if "" { arm*-*-* } } */
-/* { dg-do run } */
+/* { dg-do run { target { aarch64*-*-* } } } */
 /* { dg-options "-O3" } */
 
 #include <arm_neon.h>
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x4.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x4.c
index 451a0afc6..495f84409 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x4.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x4.c
@@ -1,6 +1,5 @@
 /* We haven't implemented these intrinsics for arm yet.  */
-/* { dg-xfail-if "" { arm*-*-* } } */
-/* { dg-do run } */
+/* { dg-do run { target { aarch64*-*-* } } } */
 /* { dg-options "-O3" } */
 
 #include <arm_neon.h>
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x2.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x2.c
index cb13da0ca..63b49af05 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x2.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x2.c
@@ -1,6 +1,5 @@
 /* We haven't implemented these intrinsics for arm yet.  */
-/* { dg-xfail-if "" { arm*-*-* } } */
-/* { dg-do run } */
+/* { dg-do run { target { aarch64*-*-* } } } */
 /* { dg-options "-O3" } */
 
 #include <arm_neon.h>
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x3.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x3.c
index 3ce272a50..a798f7bf2 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x3.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x3.c
@@ -1,6 +1,5 @@
 /* We haven't implemented these intrinsics for arm yet.  */
-/* { dg-xfail-if "" { arm*-*-* } } */
-/* { dg-do run } */
+/* { dg-do run { target { aarch64*-*-* } } } */
 /* { dg-options "-O3" } */
 
 #include <arm_neon.h>
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x4.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x4.c
index 1f17b5342..eaf6f444d 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x4.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x4.c
@@ -1,6 +1,5 @@
 /* We haven't implemented these intrinsics for arm yet.  */
-/* { dg-xfail-if "" { arm*-*-* } } */
-/* { dg-do run } */
+/* { dg-do run { target { aarch64*-*-* } } } */
 /* { dg-options "-O3" } */
 
 #include <arm_neon.h>
diff --git a/gcc/testsuite/gcc.target/i386/pr24414.c b/gcc/testsuite/gcc.target/i386/pr24414.c
deleted file mode 100644
index 0acaa001a..000000000
--- a/gcc/testsuite/gcc.target/i386/pr24414.c
+++ /dev/null
@@ -1,14 +0,0 @@
-/* { dg-do run } */
-/* { dg-options "-O2" } */
-/* { dg-skip-if "asm insert mismatches ABI for Darwin" { *-*-darwin* } } */
-int test;
-
-int
-main ()
-{
-  int x = test;
-  asm ("movl $1,test");
-  if (x + test != 1)
-    __builtin_trap ();
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/pr67770.c b/gcc/testsuite/gcc.target/i386/pr67770.c
index 9368524c1..a00141878 100644
--- a/gcc/testsuite/gcc.target/i386/pr67770.c
+++ b/gcc/testsuite/gcc.target/i386/pr67770.c
@@ -1,7 +1,7 @@
 /* PR target/67770 */
 /* { dg-do run { target ia32 } } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 
 __attribute__ ((noinline)) void
 foo (int i, void (* __attribute__ ((regparm (3))) bar) (int))
diff --git a/gcc/testsuite/gcc.target/i386/pr85044.c b/gcc/testsuite/gcc.target/i386/pr85044.c
index a25cc7fe3..94db00fab 100644
--- a/gcc/testsuite/gcc.target/i386/pr85044.c
+++ b/gcc/testsuite/gcc.target/i386/pr85044.c
@@ -1,5 +1,5 @@
 /* { dg-do run { target cet } } */
-/* { dg-options "-O2 -fcf-protection=branch" } */
+/* { dg-options "-O2 -fcf-protection=branch -Wno-trampolines" } */
 
 void callme (void (*callback) (void));
 
diff --git a/gcc/testsuite/gcc.target/i386/pr93656.c b/gcc/testsuite/gcc.target/i386/pr93656.c
index f0ac8c8ed..399e0a85d 100644
--- a/gcc/testsuite/gcc.target/i386/pr93656.c
+++ b/gcc/testsuite/gcc.target/i386/pr93656.c
@@ -1,4 +1,4 @@
 /* { dg-do run { target { ia32 && cet } } } */
-/* { dg-options "-O2 -fcf-protection" } */
+/* { dg-options "-O2 -fcf-protection -Wno-trampolines" } */
 
 #include "pr67770.c"
diff --git a/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90 b/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
index 58d90c019..de94fcd95 100644
--- a/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
+++ b/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! { dg-additional-options "-fdump-tree-original" }
 ! { dg-require-visibility "" }
 !
diff --git a/gcc/testsuite/gfortran.dg/gomp/pr66633.f90 b/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
index 60e47b394..7ccd55b65 100644
--- a/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
+++ b/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
@@ -2,7 +2,7 @@
 ! Testcase by Andrew Benson <abensonca@gmail.com>
 
 ! { dg-do compile }
-! { dg-options "-O0 -fopenmp" }
+! { dg-options "-O0 -fopenmp -Wno-trampolines" }
 
 module spls
 contains
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_2.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
index 5137b6cd9..fc40389e9 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-std=f2008 " }
+! { dg-options "-std=f2008 -Wno-trampolines" }
 
 ! PR fortran/34162
 ! Internal procedures as actual arguments (like restricted closures).
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_3.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
index 48302cf30..f6164f797 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-std=f2008 " }
+! { dg-options "-std=f2008 -Wno-trampolines" }
 
 ! PR fortran/34162
 ! Internal procedures as actual arguments (like restricted closures).
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_4.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
index c88925a59..dd162effd 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! PR fortran/34133
 ! PR fortran/34162
 !
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_1.f90 b/gcc/testsuite/gfortran.dg/pointer_check_1.f90
index 6d43bf302..4f4e56c42 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_1.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_1.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 53 .*Allocatable actual argument 'alloc2' is not allocated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_2.f90 b/gcc/testsuite/gfortran.dg/pointer_check_2.f90
index 2359b4ae8..daffb3f2b 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_2.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_2.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 60.*Pointer actual argument 'ptr1' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_3.f90 b/gcc/testsuite/gfortran.dg/pointer_check_3.f90
index 23596e44e..9e7ebf13a 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_3.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_3.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 61.*Pointer actual argument 'ptr2' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_4.f90 b/gcc/testsuite/gfortran.dg/pointer_check_4.f90
index 97eb6fad5..6e0e9e0d5 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_4.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_4.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 66.*Proc-pointer actual argument 'pptr' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_5.f90 b/gcc/testsuite/gfortran.dg/pointer_check_5.f90
index 440d9a879..0d56abe4d 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_5.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_5.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 ! 
 ! { dg-output ".*At line 46 .*Pointer actual argument 'getptr' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_18.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
index 3d065867d..71444337e 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_19.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
index 55036edeb..34c479427 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_20.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
index 5aead5b5d..6027e0d9d 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40450: [F03] procedure pointer as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_21.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
index 83ef50356..cc335e413 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
@@ -1,33 +1,34 @@
-! { dg-do run }
-! Tests the fix for PR40591 in which the interface 'sub2'
-! for 'pptr2' was not resolved.
-!
-! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>
-!
-program main
-  call test
-contains
+! { dg-do run }
+! { dg-options "-Wno-trampolines" }
+! Tests the fix for PR40591 in which the interface 'sub2'
+! for 'pptr2' was not resolved.
+!
+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>
+!
+program main
+  call test
+contains
   subroutine sub1(arg)
     integer arg
-    arg = arg + 1
-  end subroutine sub1
-  subroutine test()
-    procedure(sub1), pointer :: pptr1
+    arg = arg + 1
+  end subroutine sub1
+  subroutine test()
+    procedure(sub1), pointer :: pptr1
     procedure(sub2), pointer :: pptr2
-    integer i
-    i = 0
+    integer i
+    i = 0
     pptr1 => sub1
-    call pptr1 (i)
+    call pptr1 (i)
     pptr1 => sub2
-    call pptr1 (i)
+    call pptr1 (i)
     pptr2 => sub1
-    call pptr2 (i)
+    call pptr2 (i)
     pptr2 => sub2
     call pptr2 (i)
     if (i .ne. 22) STOP 1
-  end subroutine test
+  end subroutine test
   subroutine sub2(arg)
     integer arg
-    arg = arg + 10
-  end subroutine sub2
-end program main
+    arg = arg + 10
+  end subroutine sub2
+end program main
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_23.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
index 20f4f60db..5da6c4a0b 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41106: [F03] Procedure Pointers with CHARACTER results
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_25.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
index f55381069..6b7d70478 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_47.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
index d3fa72c9b..bcd494025 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! Tests the fix for PR68196
 !
 ! Contributed by Damian Rouson  <damian@sourceryinstitute.org>
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_48.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
index 4984eb7f8..4cebf12f0 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! Checks the fix for PR68196, comment #8
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_5.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
index bf47d1ed3..559ac5dac 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! NULL() initialization for PROCEDURE POINTERS
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_7.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
index 9ac6cbe21..ca5863ec9 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! { dg-additional-sources proc_ptr_7.c }
 !
 ! PR fortran/32580
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
index 5e53ee4e4..41f8644d7 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
index 330d930f8..d6402b0b0 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40427: Procedure Pointer Components with OPTIONAL arguments
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
index c0a8b959d..bb98b5a92 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40882: [F03] infinite recursion in gfc_get_derived_type with PPC returning derived type.
 ! At the same time, check that a formal argument does not cause infinite recursion (PR 40870).
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
index 141e96e0d..df5b104de 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41022: [F03] procedure pointer components as actual arguments
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
index a7e89d5a6..08339009b 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
index b9b7da25e..1a68a34f5 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
index 84e98a693..62f87dba3 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
index 4a8785167..8f6f04871 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 47240: [F03] segfault with procedure pointer component
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
index 031f74418..77efb6ae1 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 51082: [F03] Wrong result for a pointer to a proc-pointer component
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
index 7c97ddcd5..2c46727ea 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
index f2160e4e3..16e8e03b3 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40164: Fortran 2003: "Arrays of procedure pointers" (using PPCs)
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
index 2f7fe9892..bc8970cdd 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
index 291c6d8a0..1ab24ab69 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 39630: [F03] Procedure Pointer Components with PASS
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
index 5433cdeb5..423324bc3 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 54285: [F03] Calling a PPC with proc-ptr result
 !
diff --git a/gcc/testsuite/gfortran.dg/structure_constructor_11.f90 b/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
index 28caebd76..b328931cc 100644
--- a/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
+++ b/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fdump-tree-original" }
+! { dg-options "-fdump-tree-original -Wno-trampolines" }
 !
 ! PR fortran/54603
 !
diff --git a/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90 b/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
index a665a3829..8ec6e446e 100644
--- a/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
+++ b/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 64209: [OOP] runtime segfault with CLASS(*), INTENT(OUT) dummy argument
 !
diff --git a/gcc/testsuite/objc.dg/torture/strings/const-str-3.m b/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
index 0eb2d6a01..785352592 100644
--- a/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
+++ b/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
@@ -2,7 +2,7 @@
 /* Developed by Markus Hitter <mah@jump-ing.de>.  */
 /* { dg-do run } */
 /* { dg-xfail-run-if "Needs OBJC2 ABI" { *-*-darwin* && { lp64 && { ! objc2 } } } { "-fnext-runtime" } { "" } } */
-/* { dg-options "-fconstant-string-class=Foo" } */
+/* { dg-options "-fconstant-string-class=Foo -Wno-format-security" } */
 /* { dg-options "-mno-constant-cfstrings -fconstant-string-class=Foo" { target *-*-darwin* } } */
 
 #include "../../../objc-obj-c++-shared/objc-test-suite-types.h"
diff --git a/libgomp/testsuite/libgomp.c/pr52547.c b/libgomp/testsuite/libgomp.c/pr52547.c
index f746e2ec4..0416cc2ae 100644
--- a/libgomp/testsuite/libgomp.c/pr52547.c
+++ b/libgomp/testsuite/libgomp.c/pr52547.c
@@ -1,5 +1,6 @@
 /* PR middle-end/52547 */
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 extern void abort (void);
 
