diff --git a/gcc/Makefile.in b/gcc/Makefile.in
index f6c9b18d2..e3cb7efe7 100644
--- a/gcc/Makefile.in
+++ b/gcc/Makefile.in
@@ -219,6 +219,15 @@ libgcov-merge-tool.o-warn = -Wno-error
 gimple-match.o-warn = -Wno-unused
 generic-match.o-warn = -Wno-unused
 dfp.o-warn = -Wno-strict-aliasing
+build/genhooks.o-warn = -Wno-error=unused-result
+options-save.o-warn = -Wno-error=format=
+gcc.o-warn = -Wno-error=unused-result
+ipa-inline.o-warn = -Wno-error=strict-overflow
+loongarch.o-warn = -Wno-error
+lto-wrapper.o-warn = -Wno-error=unused-result
+lto/lto.o-warn = -Wno-error=unused-result
+m68k-common.o-warn = -Wno-error=unused-result
+rs6000.o-warn = -Wno-error=format=
 
 # All warnings have to be shut off in stage1 if the compiler used then
 # isn't gcc; configure determines that.  WARN_CFLAGS will be either
diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index 836ece3f5..37e3c8bdc 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -9099,7 +9099,6 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,
   struct z_candidate *candidates = 0, *cand;
   tree explicit_targs = NULL_TREE;
   tree basetype = NULL_TREE;
-  tree access_binfo, binfo;
   tree optype;
   tree first_mem_arg = NULL_TREE;
   tree name;
@@ -9137,8 +9136,9 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,
   /* Dismantle the baselink to collect all the information we need.  */
   if (!conversion_path)
     conversion_path = BASELINK_BINFO (fns);
-  access_binfo = BASELINK_ACCESS_BINFO (fns);
-  binfo = BASELINK_BINFO (fns);
+  tree access_binfo = BASELINK_ACCESS_BINFO (fns);
+  tree binfo = BASELINK_BINFO (fns);
+  (void)binfo;
   optype = BASELINK_OPTYPE (fns);
   fns = BASELINK_FUNCTIONS (fns);
   if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)
diff --git a/gcc/fortran/module.c b/gcc/fortran/module.c
index 4c5d9e92f..8047ebe53 100644
--- a/gcc/fortran/module.c
+++ b/gcc/fortran/module.c
@@ -5157,8 +5157,8 @@ read_module (void)
 	  for (c = sym->components; c; c = c->next)
 	    {
 	      pointer_info *p;
-	      const char *comp_name;
-	      int n;
+	      const char *comp_name = NULL;
+	      int n = 0;
 
 	      mio_lparen (); /* component opening.  */
 	      mio_integer (&n);
diff --git a/libdecnumber/decNumber.c b/libdecnumber/decNumber.c
index e4194211f..4ebd9b2a2 100644
--- a/libdecnumber/decNumber.c
+++ b/libdecnumber/decNumber.c
@@ -927,9 +927,9 @@ decNumber * decNumberCompareTotalMag(decNumber *res, const decNumber *lhs,
 				     const decNumber *rhs, decContext *set) {
   uInt status=0;		   /* accumulator */
   uInt needbytes;		   /* for space calculations */
-  decNumber bufa[D2N(DECBUFFER+1)];/* +1 in case DECBUFFER=0 */
+  decNumber bufa[D2N(DECBUFFER+1)] = {0};/* +1 in case DECBUFFER=0 */
   decNumber *allocbufa=NULL;	   /* -> allocated bufa, iff allocated */
-  decNumber bufb[D2N(DECBUFFER+1)];
+  decNumber bufb[D2N(DECBUFFER+1)] = {0};
   decNumber *allocbufb=NULL;	   /* -> allocated bufb, iff allocated */
   decNumber *a, *b;		   /* temporary pointers */
 
@@ -947,6 +947,7 @@ decNumber * decNumberCompareTotalMag(decNumber *res, const decNumber *lhs,
 	if (allocbufa==NULL) {		/* hopeless -- abandon */
 	  status|=DEC_Insufficient_storage;
 	  break;}
+	memset(allocbufa, 0x00, needbytes);
 	a=allocbufa;			/* use the allocated space */
 	}
       decNumberCopy(a, lhs);		/* copy content */
@@ -961,6 +962,7 @@ decNumber * decNumberCompareTotalMag(decNumber *res, const decNumber *lhs,
 	if (allocbufb==NULL) {		/* hopeless -- abandon */
 	  status|=DEC_Insufficient_storage;
 	  break;}
+	memset(allocbufb, 0x00, needbytes);
 	b=allocbufb;			/* use the allocated space */
 	}
       decNumberCopy(b, rhs);		/* copy content */
@@ -3343,6 +3345,8 @@ const char *decNumberClassToString(enum decClass eclass) {
 /* All fields are updated as required.	This is a utility operation,  */
 /* so special values are unchanged and no error is possible.	      */
 /* ------------------------------------------------------------------ */
+#pragma GCC push_options
+#pragma GCC optimize ("-O2")
 decNumber * decNumberCopy(decNumber *dest, const decNumber *src) {
 
   #if DECCHECK
@@ -3370,6 +3374,7 @@ decNumber * decNumberCopy(decNumber *dest, const decNumber *src) {
     }
   return dest;
   } /* decNumberCopy */
+#pragma GCC pop_options
 
 /* ------------------------------------------------------------------ */
 /* decNumberCopyAbs -- quiet absolute value operator		      */
