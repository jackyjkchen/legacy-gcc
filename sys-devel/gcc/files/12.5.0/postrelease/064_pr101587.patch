diff --git a/libstdc++-v3/include/bits/ranges_uninitialized.h b/libstdc++-v3/include/bits/ranges_uninitialized.h
index 65c032410..c2aae6664 100644
--- a/libstdc++-v3/include/bits/ranges_uninitialized.h
+++ b/libstdc++-v3/include/bits/ranges_uninitialized.h
@@ -272,10 +272,10 @@ namespace ranges
 		      && is_nothrow_assignable_v<_OutType&,
 						 iter_reference_t<_Iter>>)
 	  {
-	    auto __d1 = __ilast - __ifirst;
-	    auto __d2 = __olast - __ofirst;
-	    return ranges::copy_n(std::move(__ifirst), std::min(__d1, __d2),
-				  __ofirst);
+	    auto __d = __ilast - __ifirst;
+	    if (auto __d2 = __olast - __ofirst; __d2 < __d)
+	      __d = static_cast<iter_difference_t<_Iter>>(__d2);
+	    return ranges::copy_n(std::move(__ifirst), __d, __ofirst);
 	  }
 	else
 	  {
@@ -320,9 +320,9 @@ namespace ranges
 		      && is_nothrow_assignable_v<_OutType&,
 						 iter_reference_t<_Iter>>)
 	  {
-	    auto __d = __olast - __ofirst;
-	    return ranges::copy_n(std::move(__ifirst), std::min(__n, __d),
-				  __ofirst);
+	    if (auto __d = __olast - __ofirst; __d < __n)
+	      __n = static_cast<iter_difference_t<_Iter>>(__d);
+	    return ranges::copy_n(std::move(__ifirst), __n, __ofirst);
 	  }
 	else
 	  {
@@ -359,11 +359,12 @@ namespace ranges
 		      && is_nothrow_assignable_v<_OutType&,
 						 iter_rvalue_reference_t<_Iter>>)
 	  {
-	    auto __d1 = __ilast - __ifirst;
-	    auto __d2 = __olast - __ofirst;
+	    auto __d = __ilast - __ifirst;
+	    if (auto __d2 = __olast - __ofirst; __d2 < __d)
+	      __d = static_cast<iter_difference_t<_Iter>>(__d2);
 	    auto [__in, __out]
 	      = ranges::copy_n(std::make_move_iterator(std::move(__ifirst)),
-			       std::min(__d1, __d2), __ofirst);
+			       __d, __ofirst);
 	    return {std::move(__in).base(), __out};
 	  }
 	else
@@ -411,10 +412,11 @@ namespace ranges
 		      && is_nothrow_assignable_v<_OutType&,
 						 iter_rvalue_reference_t<_Iter>>)
 	  {
-	    auto __d = __olast - __ofirst;
+	    if (auto __d = __olast - __ofirst; __d < __n)
+	      __n = static_cast<iter_difference_t<_Iter>>(__d);
 	    auto [__in, __out]
 	      = ranges::copy_n(std::make_move_iterator(std::move(__ifirst)),
-			       std::min(__n, __d), __ofirst);
+			       __n, __ofirst);
 	    return {std::move(__in).base(), __out};
 	  }
 	else
diff --git a/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc b/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc
index 25b6fb206..c29fd60c3 100644
--- a/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc
+++ b/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc
@@ -176,6 +176,45 @@ test03()
     }
 }
 
+void
+test_pr101587()
+{
+  short in[1]{};
+  __gnu_test::test_contiguous_range r(in); // difference_type is integer-like
+  long out[1];
+  std::span<long> o(out); // difference_type is ptrdiff_t
+  ranges::uninitialized_copy(r, o);
+  ranges::uninitialized_copy_n(ranges::begin(r), 0, o.begin(), o.end());
+
+  // iterator that has an integer-like class type for difference_type
+  struct Iter
+  {
+    using value_type = long;
+    using difference_type = std::ranges::__detail::__max_diff_type;
+
+    long& operator*() const { return *p; }
+
+    Iter& operator++() { ++p; return *this; }
+    Iter operator++(int) { return Iter{p++}; }
+
+    difference_type operator-(Iter i) const { return p - i.p; }
+    bool operator==(const Iter&) const = default;
+
+    long* p = nullptr;
+  };
+  static_assert(std::sized_sentinel_for<Iter, Iter>);
+
+  std::ranges::subrange<Iter> rmax(Iter{out+0}, Iter{out+1});
+  // Check with integer-like class type for output range:
+  std::ranges::uninitialized_copy(in, rmax);
+  std::ranges::uninitialized_copy_n(in+0, 1, rmax.begin(), rmax.end());
+
+  int to[1];
+  // And for input range:
+  std::ranges::uninitialized_copy(rmax, to);
+  std::ranges::uninitialized_copy_n(rmax.begin(), 1, to+0, to+1);
+}
+
 int
 main()
 {
@@ -189,4 +228,6 @@ main()
 
   test02<false>();
   test02<true>();
+
+  test_pr101587();
 }
diff --git a/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc b/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc
index 8281447d2..aea001463 100644
--- a/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc
+++ b/libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc
@@ -186,6 +186,44 @@ test03()
     }
 }
 
+void
+test_pr101587()
+{
+  short in[1]{};
+  __gnu_test::test_contiguous_range r(in); // difference_type is integer-like
+  long out[1];
+  std::span<long> o(out); // difference_type is ptrdiff_t
+  ranges::uninitialized_move(r, o);
+  ranges::uninitialized_move_n(ranges::begin(r), 0, o.begin(), o.end());
+
+  struct Iter
+  {
+    using value_type = long;
+    using difference_type = std::ranges::__detail::__max_diff_type;
+
+    long& operator*() const { return *p; }
+
+    Iter& operator++() { ++p; return *this; }
+    Iter operator++(int) { return Iter{p++}; }
+
+    difference_type operator-(Iter i) const { return p - i.p; }
+    bool operator==(const Iter&) const = default;
+
+    long* p = nullptr;
+  };
+  static_assert(std::sized_sentinel_for<Iter, Iter>);
+
+  std::ranges::subrange<Iter> rmax(Iter{out+0}, Iter{out+1});
+  // Check with integer-like class type for output range:
+  std::ranges::uninitialized_move(in, rmax);
+  std::ranges::uninitialized_move_n(in+0, 1, rmax.begin(), rmax.end());
+
+  int to[1];
+  // And for input range:
+  std::ranges::uninitialized_copy(rmax, to);
+  std::ranges::uninitialized_copy_n(rmax.begin(), 1, to+0, to+1);
+}
+
 int
 main()
 {
@@ -199,4 +237,6 @@ main()
 
   test02<false>();
   test02<true>();
+
+  test_pr101587();
 }
