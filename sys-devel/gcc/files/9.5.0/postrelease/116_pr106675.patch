diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index b0b4ca8c4..c0c36eda2 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -10734,6 +10734,8 @@ joust_maybe_elide_copy (z_candidate *&cand)
   if (!DECL_COPY_CONSTRUCTOR_P (fn) && !DECL_MOVE_CONSTRUCTOR_P (fn))
     return false;
   conversion *conv = cand->convs[0];
+  if (conv->kind == ck_ambig)
+    return false;
   gcc_checking_assert (conv->kind == ck_ref_bind);
   conv = next_conversion (conv);
   if (conv->kind == ck_user && !TYPE_REF_P (conv->type))
diff --git a/gcc/testsuite/g++.dg/cpp0x/overload-conv-5.C b/gcc/testsuite/g++.dg/cpp0x/overload-conv-5.C
new file mode 100644
index 000000000..b1e7766e4
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/overload-conv-5.C
@@ -0,0 +1,21 @@
+// PR c++/106675
+// { dg-do compile { target c++11 } }
+
+struct foo {
+    int n_;
+    foo(int n) : n_(n) {}
+};
+
+struct bar {
+    int n_;
+
+    operator foo() const {
+        return foo(n_);
+    }
+    operator foo &() { return *reinterpret_cast<foo *>(n_); }
+    operator foo const &() = delete;
+
+    void crashgcc() {
+        foo tmp(*this); // { dg-error "ambiguous" }
+    }
+};
