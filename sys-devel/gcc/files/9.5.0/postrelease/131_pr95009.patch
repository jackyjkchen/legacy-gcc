diff --git a/gcc/cp/typeck.c b/gcc/cp/typeck.c
index 20b40e536..be5f5e259 100644
--- a/gcc/cp/typeck.c
+++ b/gcc/cp/typeck.c
@@ -1923,9 +1923,9 @@ invalid_nonstatic_memfn_p (location_t loc, tree expr, tsubst_flags_t complain)
   return false;
 }
 
-/* If EXP is a reference to a bitfield, and the type of EXP does not
-   match the declared type of the bitfield, return the declared type
-   of the bitfield.  Otherwise, return NULL_TREE.  */
+/* If EXP is a reference to a bit-field, and the type of EXP does not
+   match the declared type of the bit-field, return the declared type
+   of the bit-field.  Otherwise, return NULL_TREE.  */
 
 tree
 is_bitfield_expr_with_lowered_type (const_tree exp)
@@ -1944,6 +1944,14 @@ is_bitfield_expr_with_lowered_type (const_tree exp)
 
     case MODIFY_EXPR:
     case SAVE_EXPR:
+    case UNARY_PLUS_EXPR:
+    case PREDECREMENT_EXPR:
+    case PREINCREMENT_EXPR:
+    case POSTDECREMENT_EXPR:
+    case POSTINCREMENT_EXPR:
+    case NEGATE_EXPR:
+    case NON_LVALUE_EXPR:
+    case BIT_NOT_EXPR:
       return is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 0));
 
     case COMPONENT_REF:
diff --git a/gcc/testsuite/g++.dg/cpp0x/decltype-bitfield1.C b/gcc/testsuite/g++.dg/cpp0x/decltype-bitfield1.C
new file mode 100644
index 000000000..373c4a429
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/decltype-bitfield1.C
@@ -0,0 +1,65 @@
+// PR c++/95009
+// { dg-do compile { target { c++11 && lp64 } } }
+
+struct false_type { static constexpr bool value = false; };
+struct true_type { static constexpr bool value = true; };
+template<class T, class U>
+struct is_same : false_type {}; 
+template<class T>
+struct is_same<T, T> : true_type {};
+
+struct A {
+  int i : 31;
+  unsigned long l : 37;
+} a;
+
+void
+g ()
+{
+  // Careful: pre{in,de}crements are lvalues -> deduce T&.  */
+  static_assert (is_same<decltype(a.i), int>::value, "");
+  static_assert (is_same<decltype((a.i)), int&>::value, "");
+  static_assert (is_same<decltype(++a.i), int&>::value, "");
+  static_assert (is_same<decltype((++a.i)), int&>::value, "");
+  static_assert (is_same<decltype(a.i++), int>::value, "");
+  static_assert (is_same<decltype((a.i++)), int>::value, "");
+  static_assert (is_same<decltype(--a.i), int&>::value, "");
+  static_assert (is_same<decltype((--a.i)), int&>::value, "");
+  static_assert (is_same<decltype(a.i--), int>::value, "");
+  static_assert (is_same<decltype((a.i--)), int>::value, "");
+  static_assert (is_same<decltype(a.i += 1), int&>::value, "");
+  static_assert (is_same<decltype((a.i += 1)), int&>::value, "");
+  static_assert (is_same<decltype(a.i -= 1), int&>::value, "");
+  static_assert (is_same<decltype((a.i -= 1)), int&>::value, "");
+  static_assert (is_same<decltype(a.i *= 1), int&>::value, "");
+  static_assert (is_same<decltype((a.i *= 1)), int&>::value, "");
+  static_assert (is_same<decltype(+a.i), int>::value, "");
+  static_assert (is_same<decltype((+a.i)), int>::value, "");
+  static_assert (is_same<decltype(-a.i), int>::value, "");
+  static_assert (is_same<decltype((-a.i)), int>::value, "");
+  static_assert (is_same<decltype(~a.i), int>::value, "");
+  static_assert (is_same<decltype((~a.i)), int>::value, "");
+
+  static_assert (is_same<decltype(a.l), unsigned long>::value, "");
+  static_assert (is_same<decltype((a.l)), unsigned long&>::value, "");
+  static_assert (is_same<decltype(++a.l), unsigned long&>::value, "");
+  static_assert (is_same<decltype((++a.l)), unsigned long&>::value, "");
+  static_assert (is_same<decltype(a.l++), unsigned long>::value, "");
+  static_assert (is_same<decltype((a.l++)), unsigned long>::value, "");
+  static_assert (is_same<decltype(--a.l), unsigned long&>::value, "");
+  static_assert (is_same<decltype((--a.l)), unsigned long&>::value, "");
+  static_assert (is_same<decltype(a.l--), unsigned long>::value, "");
+  static_assert (is_same<decltype((a.l--)), unsigned long>::value, "");
+  static_assert (is_same<decltype(a.l += 1), unsigned long&>::value, "");
+  static_assert (is_same<decltype((a.l += 1)), unsigned long&>::value, "");
+  static_assert (is_same<decltype(a.l -= 1), unsigned long&>::value, "");
+  static_assert (is_same<decltype((a.l -= 1)), unsigned long&>::value, "");
+  static_assert (is_same<decltype(a.l *= 1), unsigned long&>::value, "");
+  static_assert (is_same<decltype((a.l *= 1)), unsigned long&>::value, "");
+  static_assert (is_same<decltype(+a.l), unsigned long>::value, "");
+  static_assert (is_same<decltype((+a.l)), unsigned long>::value, "");
+  static_assert (is_same<decltype(-a.l), unsigned long>::value, "");
+  static_assert (is_same<decltype((-a.l)), unsigned long>::value, "");
+  static_assert (is_same<decltype(~a.l), unsigned long>::value, "");
+  static_assert (is_same<decltype((~a.l)), unsigned long>::value, "");
+}
diff --git a/gcc/testsuite/g++.dg/cpp0x/decltype-bitfield2.C b/gcc/testsuite/g++.dg/cpp0x/decltype-bitfield2.C
new file mode 100644
index 000000000..4bf9c7682
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/decltype-bitfield2.C
@@ -0,0 +1,18 @@
+// PR c++/95009
+// { dg-do compile { target c++11 } }
+
+struct A {
+  int i:31;
+};
+
+template<typename>
+void f ()
+{ 
+}
+
+int main ()
+{
+  A a;
+  f<decltype(a.i += 1)>();
+  f<decltype(++a.i)>();
+}
