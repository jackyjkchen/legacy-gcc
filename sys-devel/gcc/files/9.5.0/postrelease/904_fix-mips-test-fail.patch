diff --git a/gcc/testsuite/g++.dg/opt/devirt2.C b/gcc/testsuite/g++.dg/opt/devirt2.C
index cf4842b..ffbe5bb 100644
--- a/gcc/testsuite/g++.dg/opt/devirt2.C
+++ b/gcc/testsuite/g++.dg/opt/devirt2.C
@@ -4,7 +4,7 @@
    registers and thus getting the counts wrong.  */
 // { dg-additional-options "-mshort-calls" {target epiphany-*-*} }
 // Using -mno-abicalls avoids a R_MIPS_JALR .reloc.
-// { dg-additional-options "-mno-abicalls" { target mips*-*-* } }
+// { dg-additional-options "-mno-abicalls -fno-PIC" { target mips*-*-* } }
 // { dg-final { scan-assembler-times "xyzzy" 2 { target { ! { alpha*-*-* hppa*-*-* ia64*-*-hpux* sparc*-*-* *-*-mingw* } } } } }
 // For *-*-mingw* there is additionally one .def match
 // { dg-final { scan-assembler-times "xyzzy" 3 { target *-*-mingw* } } }
diff --git a/gcc/testsuite/gcc.target/mips/abi-eabi32-long32.c b/gcc/testsuite/gcc.target/mips/abi-eabi32-long32.c
index 75bd1b6..25e665e 100644
--- a/gcc/testsuite/gcc.target/mips/abi-eabi32-long32.c
+++ b/gcc/testsuite/gcc.target/mips/abi-eabi32-long32.c
@@ -1,2 +1,2 @@
-/* { dg-options "-mabi=eabi -mgp32 -mlong32" } */
+/* { dg-options "-mabi=eabi -fno-PIC -mgp32 -mlong32" } */
 #include "abi-main.h"
diff --git a/gcc/testsuite/gcc.target/mips/abi-eabi32-long64.c b/gcc/testsuite/gcc.target/mips/abi-eabi32-long64.c
index 1649433..d313326 100644
--- a/gcc/testsuite/gcc.target/mips/abi-eabi32-long64.c
+++ b/gcc/testsuite/gcc.target/mips/abi-eabi32-long64.c
@@ -1,2 +1,2 @@
-/* { dg-options "-mabi=eabi -mgp32 -mlong64" } */
+/* { dg-options "-mabi=eabi -fno-PIC -mgp32 -mlong64" } */
 #include "abi-main.h"
diff --git a/gcc/testsuite/gcc.target/mips/abi-eabi64-long32.c b/gcc/testsuite/gcc.target/mips/abi-eabi64-long32.c
index 03d7c27..d2b9020 100644
--- a/gcc/testsuite/gcc.target/mips/abi-eabi64-long32.c
+++ b/gcc/testsuite/gcc.target/mips/abi-eabi64-long32.c
@@ -1,2 +1,2 @@
-/* { dg-options "-mabi=eabi -mgp64 -mlong32" } */
+/* { dg-options "-mabi=eabi -fno-PIC -mgp64 -mlong32" } */
 #include "abi-main.h"
diff --git a/gcc/testsuite/gcc.target/mips/abi-eabi64-long64.c b/gcc/testsuite/gcc.target/mips/abi-eabi64-long64.c
index bb6fa17..190112e 100644
--- a/gcc/testsuite/gcc.target/mips/abi-eabi64-long64.c
+++ b/gcc/testsuite/gcc.target/mips/abi-eabi64-long64.c
@@ -1,2 +1,2 @@
-/* { dg-options "-mabi=eabi -mgp64 -mlong64" } */
+/* { dg-options "-mabi=eabi -fno-PIC -mgp64 -mlong64" } */
 #include "abi-main.h"
diff --git a/gcc/testsuite/gcc.target/mips/abi-o64-long64.c b/gcc/testsuite/gcc.target/mips/abi-o64-long64.c
index 0263356..d40bee4 100644
--- a/gcc/testsuite/gcc.target/mips/abi-o64-long64.c
+++ b/gcc/testsuite/gcc.target/mips/abi-o64-long64.c
@@ -1,2 +1,2 @@
-/* { dg-options "-mabi=o64 -mlong64 -mno-abicalls" } */
+/* { dg-options "-mabi=o64 -mlong64 -mno-abicalls -fno-PIC" } */
 #include "abi-main.h"
diff --git a/gcc/testsuite/gcc.target/mips/call-saved-4.c b/gcc/testsuite/gcc.target/mips/call-saved-4.c
index 92881c4..4b9f8b9 100644
--- a/gcc/testsuite/gcc.target/mips/call-saved-4.c
+++ b/gcc/testsuite/gcc.target/mips/call-saved-4.c
@@ -1,5 +1,5 @@
 /* Check that we save the correct call-saved GPRs and FPRs.  */
-/* { dg-options "(HAS_LDC) -mabi=32 -mfp32" } */
+/* { dg-options "(HAS_LDC) -mabi=32 -mips2 -mfp32" } */
 
 void bar (void);
 
diff --git a/gcc/testsuite/gcc.target/mips/call-saved-5.c b/gcc/testsuite/gcc.target/mips/call-saved-5.c
index 152b28f..9e2ad38 100644
--- a/gcc/testsuite/gcc.target/mips/call-saved-5.c
+++ b/gcc/testsuite/gcc.target/mips/call-saved-5.c
@@ -1,5 +1,5 @@
 /* Check that we save the correct call-saved GPRs and FPRs.  */
-/* { dg-options "-mabi=32 -mfpxx" } */
+/* { dg-options "-mabi=32 -mips2 -mfpxx" } */
 
 void bar (void);
 
diff --git a/gcc/testsuite/gcc.target/mips/code-readable-4.c b/gcc/testsuite/gcc.target/mips/code-readable-4.c
index 1a6fdf4..8f1d508 100644
--- a/gcc/testsuite/gcc.target/mips/code-readable-4.c
+++ b/gcc/testsuite/gcc.target/mips/code-readable-4.c
@@ -1,4 +1,4 @@
-/* { dg-options "(-mips16) -mcode-readable=yes -mabi=eabi -mgp64" } */
+/* { dg-options "(-mips16) -mcode-readable=yes -mabi=eabi -fno-PIC -mgp64" } */
 /* { dg-skip-if ".half requires -O" { *-*-* } { "-O0" } { "" } } */
 
 volatile int x1;
diff --git a/gcc/testsuite/gcc.target/mips/compact-branches-5.c b/gcc/testsuite/gcc.target/mips/compact-branches-5.c
index 90d312c614d..0189635bf61 100644
--- a/gcc/testsuite/gcc.target/mips/compact-branches-5.c
+++ b/gcc/testsuite/gcc.target/mips/compact-branches-5.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mno-abicalls -mcompact-branches=never isa_rev>=6" } */
+/* { dg-options "-mno-abicalls -fno-PIC -mcompact-branches=never isa_rev>=6" } */
 void bar (int);
 
 void
diff --git a/gcc/testsuite/gcc.target/mips/compact-branches-6.c b/gcc/testsuite/gcc.target/mips/compact-branches-6.c
index dd35a5581bd..36180b0c76c 100644
--- a/gcc/testsuite/gcc.target/mips/compact-branches-6.c
+++ b/gcc/testsuite/gcc.target/mips/compact-branches-6.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mno-abicalls -mcompact-branches=optimal isa_rev>=6" } */
+/* { dg-options "-mno-abicalls -fno-PIC -mcompact-branches=optimal isa_rev>=6" } */
 void bar (int);
 
 void
diff --git a/gcc/testsuite/gcc.target/mips/ds-schedule-1.c b/gcc/testsuite/gcc.target/mips/ds-schedule-1.c
index 9cc5daa..9ae676c 100644
--- a/gcc/testsuite/gcc.target/mips/ds-schedule-1.c
+++ b/gcc/testsuite/gcc.target/mips/ds-schedule-1.c
@@ -1,4 +1,4 @@
-/* { dg-options "isa_rev>=6 -mcompact-branches=optimal -mno-abicalls -G4" } */
+/* { dg-options "isa_rev>=6 -mcompact-branches=optimal -mno-abicalls -fno-PIC -G4" } */
 /* { dg-final { scan-assembler-not "bne\t" } } */
 /* { dg-final { scan-assembler-not "beq\t" } } */
 /* { dg-final { scan-assembler-times "\\(foo\\)" 1 } } */
diff --git a/gcc/testsuite/gcc.target/mips/ds-schedule-2.c b/gcc/testsuite/gcc.target/mips/ds-schedule-2.c
index 6c5de5d..3409a2b 100644
--- a/gcc/testsuite/gcc.target/mips/ds-schedule-2.c
+++ b/gcc/testsuite/gcc.target/mips/ds-schedule-2.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mcompact-branches=never -mno-abicalls -G4" } */
+/* { dg-options "-mcompact-branches=never -mno-abicalls -fno-PIC -G4" } */
 /* { dg-skip-if "code quality test" { *-*-* } { "-O0" "-O1" "-Os" } { "" } } */
 /* { dg-final { scan-assembler "beq.*\n\tlw" } } */
 /* { dg-final { scan-assembler-times "\\(foo\\)" 2 } } */
diff --git a/gcc/testsuite/gcc.target/mips/dspr2-MULT.c b/gcc/testsuite/gcc.target/mips/dspr2-MULT.c
index b668e0c..93f1640 100644
--- a/gcc/testsuite/gcc.target/mips/dspr2-MULT.c
+++ b/gcc/testsuite/gcc.target/mips/dspr2-MULT.c
@@ -7,7 +7,7 @@
 
 /* See PR target/51729 for the reason behind the XFAILs.  */
 /* { dg-final { scan-assembler "\tmult\t" } } */
-/* { dg-final { scan-assembler "\\\$ac1" { xfail *-*-* } } } */
+/* { dg-final { scan-assembler "\\\$ac1" } } */
 /* { dg-final { scan-assembler "\\\$ac2" { xfail *-*-* } } } */
 
 typedef long long a64;
diff --git a/gcc/testsuite/gcc.target/mips/dspr2-MULTU.c b/gcc/testsuite/gcc.target/mips/dspr2-MULTU.c
index 886e4ca..cf60478 100644
--- a/gcc/testsuite/gcc.target/mips/dspr2-MULTU.c
+++ b/gcc/testsuite/gcc.target/mips/dspr2-MULTU.c
@@ -6,7 +6,7 @@
 
 /* See PR target/51729 for the reason behind the XFAILs.  */
 /* { dg-final { scan-assembler "\tmultu\t" } } */
-/* { dg-final { scan-assembler "\\\$ac1" { xfail *-*-* } } } */
+/* { dg-final { scan-assembler "\\\$ac1" } } */
 /* { dg-final { scan-assembler "\\\$ac2" { xfail *-*-* } } } */
 
 typedef unsigned long long a64;
diff --git a/gcc/testsuite/gcc.target/mips/dwarfregtable-2.c b/gcc/testsuite/gcc.target/mips/dwarfregtable-2.c
index c6dea94..53702a0 100644
--- a/gcc/testsuite/gcc.target/mips/dwarfregtable-2.c
+++ b/gcc/testsuite/gcc.target/mips/dwarfregtable-2.c
@@ -1,5 +1,5 @@
 /* Check if content of dwarf reg size table matches the expected.  */
 /* { dg-do run } */
-/* { dg-options "-mabi=32 -mfpxx" } */
+/* { dg-options "-mabi=32 -mips2 -mfpxx" } */
 
 #include "dwarfregtable.h"
diff --git a/gcc/testsuite/gcc.target/mips/fpr-moves-6.c b/gcc/testsuite/gcc.target/mips/fpr-moves-6.c
index 30a83ec..e218836 100644
--- a/gcc/testsuite/gcc.target/mips/fpr-moves-6.c
+++ b/gcc/testsuite/gcc.target/mips/fpr-moves-6.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mabi=64 -mhard-float -EB" } */
+/* { dg-options "-mabi=64 -march=mips64r2 -mhard-float -EB" } */
 /* { dg-skip-if "code quality test" { *-*-* } { "-O0" } { "" } } */
 /* { dg-require-effective-target mips_newabi_large_long_double } */
 
diff --git a/gcc/testsuite/gcc.target/mips/frame-header-1.c b/gcc/testsuite/gcc.target/mips/frame-header-1.c
index 971656d..c270600 100644
--- a/gcc/testsuite/gcc.target/mips/frame-header-1.c
+++ b/gcc/testsuite/gcc.target/mips/frame-header-1.c
@@ -4,7 +4,7 @@
    by 24 bytes, with the optimization it would only be 8 bytes.  */
 
 /* { dg-do compile } */
-/* { dg-options "-mno-frame-header-opt -mabi=32 -mno-abicalls" } */
+/* { dg-options "-mno-frame-header-opt -mabi=32 -mno-abicalls -fno-PIC" } */
 /* { dg-skip-if "code quality test" { *-*-* } { "-O0" } { "" } } */
 /* { dg-final { scan-assembler "\taddiu\t\\\$sp,\\\$sp,-24" } } */
 
diff --git a/gcc/testsuite/gcc.target/mips/frame-header-2.c b/gcc/testsuite/gcc.target/mips/frame-header-2.c
index 0e86bc9..a8cf6cd 100644
--- a/gcc/testsuite/gcc.target/mips/frame-header-2.c
+++ b/gcc/testsuite/gcc.target/mips/frame-header-2.c
@@ -4,7 +4,7 @@
    stack by 24 bytes, with the optimization it would only be 8 bytes.  */
 
 /* { dg-do compile } */
-/* { dg-options "-mframe-header-opt -mabi=32 -mno-abicalls" } */
+/* { dg-options "-mframe-header-opt -mabi=32 -mno-abicalls -fno-PIC" } */
 /* { dg-skip-if "code quality test" { *-*-* } { "-O0" } { "" } } */
 /* { dg-final { scan-assembler "\taddiu\t\\\$sp,\\\$sp,-8" } } */
 
diff --git a/gcc/testsuite/gcc.target/mips/frame-header-3.c b/gcc/testsuite/gcc.target/mips/frame-header-3.c
index 2a8c515..59d309b 100644
--- a/gcc/testsuite/gcc.target/mips/frame-header-3.c
+++ b/gcc/testsuite/gcc.target/mips/frame-header-3.c
@@ -5,7 +5,7 @@
    optimization it would only be 8 bytes.  */
 
 /* { dg-do compile } */
-/* { dg-options "-mframe-header-opt -mabi=32 -mno-abicalls" } */
+/* { dg-options "-mframe-header-opt -mabi=32 -mno-abicalls -fno-PIC" } */
 /* { dg-skip-if "code quality test" { *-*-* } { "-O0" } { "" } } */
 /* { dg-final { scan-assembler "\taddiu\t\\\$sp,\\\$sp,-24" } } */
 
diff --git a/gcc/testsuite/gcc.target/mips/long-calls-pg.c b/gcc/testsuite/gcc.target/mips/long-calls-pg.c
index 5ccfe51..50ac355 100644
--- a/gcc/testsuite/gcc.target/mips/long-calls-pg.c
+++ b/gcc/testsuite/gcc.target/mips/long-calls-pg.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-mabi=32 -pg -mno-abicalls -mlong-calls" } */
+/* { dg-options "-mabi=32 -pg -mno-abicalls -fno-PIC -mlong-calls" } */
 /* { dg-final { scan-assembler-not "\tjal\t_mcount" } } */
 NOMIPS16 void
 foo (void)
diff --git a/gcc/testsuite/gcc.target/mips/mips.exp b/gcc/testsuite/gcc.target/mips/mips.exp
index 81e19f3..af343ae 100644
--- a/gcc/testsuite/gcc.target/mips/mips.exp
+++ b/gcc/testsuite/gcc.target/mips/mips.exp
@@ -1336,6 +1336,7 @@ proc mips-dg-options { args } {
 	    if { $force_abi || [mips_64bit_abi_p $abi] } {
 		if { [mips_have_test_option_p options "-mlong64"] } {
 		    mips_make_test_option options "-mabi=eabi"
+	    	mips_make_test_option options "-fno-PIC"
 		    mips_make_test_option options "-mgp32"
 		} else {
 		    mips_make_test_option options "-mabi=32"
@@ -1345,6 +1346,7 @@ proc mips-dg-options { args } {
 	    if { $force_abi || [mips_32bit_abi_p $abi] } {
 		if { [mips_have_test_option_p options "-mlong64"] } {
 		    mips_make_test_option options "-mabi=eabi"
+	    	mips_make_test_option options "-fno-PIC"
 		    mips_make_test_option options "-mgp64"
 		} else {
 		    # All configurations should have an assembler that
@@ -1352,6 +1354,7 @@ proc mips-dg-options { args } {
 		    # vector as o32.  In contrast, many assembler
 		    # configurations do not have n32 or n64 support.
 		    mips_make_test_option options "-mabi=o64"
+	    	mips_make_test_option options "-fno-PIC"
 		}
 	    }
 	}
@@ -1365,6 +1368,7 @@ proc mips-dg-options { args } {
     if { $abi_test_option_p } {
 	if { $eabi_p } {
 	    mips_make_test_option options "-mno-abicalls"
+	    mips_make_test_option options "-fno-PIC"
 	    if { $isa_rev < 6 && $gp_size == 32 } {
 		    mips_make_test_option options "-mfp32"
 	    }
@@ -1450,6 +1454,7 @@ proc mips-dg-options { args } {
 	-G0 {}
 	default {
 	    mips_make_test_option options "-mno-abicalls"
+	    mips_make_test_option options "-fno-PIC"
 	}
     }
     if { [mips_have_option_p options "-mabicalls"] } {
diff --git a/gcc/testsuite/gcc.target/mips/mmcount-ra-address-2.c b/gcc/testsuite/gcc.target/mips/mmcount-ra-address-2.c
index 34b30d9..6daf266 100644
--- a/gcc/testsuite/gcc.target/mips/mmcount-ra-address-2.c
+++ b/gcc/testsuite/gcc.target/mips/mmcount-ra-address-2.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-pg -mmcount-ra-address -mabi=64 -mno-abicalls" } */
+/* { dg-options "-pg -mmcount-ra-address -mabi=64 -mno-abicalls -fno-PIC" } */
 /* { dg-skip-if "requiring a specific frame layout makes this a code quality test" { *-*-* } { "-O0" } { "" } } */
 /* { dg-final { scan-assembler "\tdla\t\\\$12,8\\(\\\$sp\\)" } } */
 int foo (int);
diff --git a/gcc/testsuite/gcc.target/mips/mmcount-ra-address-3.c b/gcc/testsuite/gcc.target/mips/mmcount-ra-address-3.c
index 17bcb76..d708835 100644
--- a/gcc/testsuite/gcc.target/mips/mmcount-ra-address-3.c
+++ b/gcc/testsuite/gcc.target/mips/mmcount-ra-address-3.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-pg -mmcount-ra-address -mabi=64 -mno-abicalls" } */
+/* { dg-options "-pg -mmcount-ra-address -mabi=64 -mno-abicalls -fno-PIC" } */
 /* { dg-skip-if "requiring a specific frame layout makes this a code quality test" { *-*-* } { "-O0" } { "" } } */
 /* { dg-final { scan-assembler "\tdla\t\\\$12,200008\\(\\\$sp\\)" } } */
 int foo (int *);
diff --git a/gcc/testsuite/gcc.target/mips/oddspreg-6.c b/gcc/testsuite/gcc.target/mips/oddspreg-6.c
index 53ac076..dcdabf1 100644
--- a/gcc/testsuite/gcc.target/mips/oddspreg-6.c
+++ b/gcc/testsuite/gcc.target/mips/oddspreg-6.c
@@ -1,5 +1,5 @@
 /* Check that we disable odd-numbered single precision registers for FPXX.  */
-/* { dg-options "-mabi=32 -mfpxx -mhard-float -ffat-lto-objects" } */
+/* { dg-options "-mabi=32 -mips2 -mfpxx -mhard-float -ffat-lto-objects" } */
 /* This is testing for errors which can only happen in assembly generation.
    dg-error does not guarantee assembly generation, so we need to do it
    manually by using -ffat-lto-objects.  */
diff --git a/gcc/testsuite/gcc.target/mips/pr33256.c b/gcc/testsuite/gcc.target/mips/pr33256.c
index 109da48..9772155 100644
--- a/gcc/testsuite/gcc.target/mips/pr33256.c
+++ b/gcc/testsuite/gcc.target/mips/pr33256.c
@@ -1,6 +1,6 @@
 /* GCC used to report an ICE for this test because we generated a LO_SUM
    for an illegitimate constant.  */
-/* { dg-options "-mabi=64 -msym32 -EB -mno-abicalls" } */
+/* { dg-options "-mabi=64 -msym32 -EB -mno-abicalls -fno-PIC" } */
 extern unsigned long a[];
 int b (int);
 
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-10.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-10.c
index ad0d2b0..ccfd2f1 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-10.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-10.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=store -mips4 -mbranch-likely -mno-abicalls" } */
+/* { dg-options "-mr10k-cache-barrier=store -mips4 -mbranch-likely -mno-abicalls -fno-PIC" } */
 /* { dg-skip-if "code quality test" { *-*-* } { "-O0" } { "" } } */
 
 unsigned char *bar (int);
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-11.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-11.c
index 936c258..b816641 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-11.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-11.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls" } */
+/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls -fno-PIC" } */
 
 /* Test that loads are not unnecessarily protected.  */
 
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-12.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-12.c
index 34a1248..3191003 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-12.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-12.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=load-store -mno-abicalls" } */
+/* { dg-options "-mr10k-cache-barrier=load-store -mno-abicalls -fno-PIC" } */
 
 /* Test that loads are correctly protected.  */
 
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-3.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-3.c
index 9e56789..700436a 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-3.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-3.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls" } */
+/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls -fno-PIC" } */
 
 /* Test that in-range stores to the frame are not protected by
    cache barriers.  */
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-4.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-4.c
index 7780460..b13ba76 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-4.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-4.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls" } */
+/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls -fno-PIC" } */
 
 void bar (int *x);
 
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-5.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-5.c
index 757beef..d06b641 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-5.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-5.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls -mabi=64" } */
+/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls -fno-PIC -mabi=64" } */
 
 /* Test that in-range stores to static objects do not get an unnecessary
    cache barrier.  */
diff --git a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-7.c b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-7.c
index 3a7a253..d088ce2 100644
--- a/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-7.c
+++ b/gcc/testsuite/gcc.target/mips/r10k-cache-barrier-7.c
@@ -1,4 +1,4 @@
-/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls" } */
+/* { dg-options "-mr10k-cache-barrier=store -mno-abicalls -fno-PIC" } */
 
 void bar1 (void);
 void bar2 (void);
