diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index b07ef96ea..a9339200e 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -10399,7 +10399,21 @@ cp_parser_lambda_expression (cp_parser* parser)
   LAMBDA_EXPR_LOCATION (lambda_expr) = token->location;
 
   if (cxx_dialect >= cxx2a)
-    /* C++20 allows lambdas in unevaluated context.  */;
+    {
+      /* C++20 allows lambdas in unevaluated context, but one in the type of a
+	 non-type parameter is nonsensical.
+
+	 Distinguish a lambda in the parameter type from a lambda in the
+	 default argument by looking at local_variables_forbidden_p, which is
+	 only set in default arguments.  */
+      if (processing_template_parmlist && !parser->local_variables_forbidden_p)
+	{
+	  error_at (token->location,
+		    "lambda-expression in template parameter type");
+	  token->error_reported = true;
+	  ok = false;
+	}
+    }
   else if (cp_unevaluated_operand)
     {
       if (!token->error_reported)
diff --git a/gcc/testsuite/g++.dg/cpp2a/lambda-uneval14.C b/gcc/testsuite/g++.dg/cpp2a/lambda-uneval14.C
new file mode 100644
index 000000000..4bc32450a
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp2a/lambda-uneval14.C
@@ -0,0 +1,6 @@
+// PR c++/99478
+// { dg-do compile { target c++2a } }
+
+template <decltype ([] {})> auto f() {} // { dg-error "lambda" }
+
+int main() { f<{}>(); }		// { dg-prune-output "no match" }
