diff --git a/libgcc2.c b/libgcc2.c
index dcf4cb9..07e2329 100644
--- a/libgcc2.c
+++ b/libgcc2.c
@@ -3138,6 +3138,56 @@ exit (int status)
 
 #else
 int _exit_dummy_decl = 0;	/* prevent compiler & linker warnings */
+
+/* workaround for gentoo new glibc*/
+#include <stdio.h>
+#include <errno.h>
+
+static func_ptr *atexit_chain = 0;
+static long atexit_chain_length = 0;
+static volatile long last_atexit_chain_slot = -1;
+
+int atexit (func_ptr func)
+{
+  if (++last_atexit_chain_slot == atexit_chain_length)
+    {
+      atexit_chain_length += 32;
+      if (atexit_chain)
+	atexit_chain = (func_ptr *) realloc (atexit_chain, atexit_chain_length
+					     * sizeof (func_ptr));
+      else
+	atexit_chain = (func_ptr *) malloc (atexit_chain_length
+					    * sizeof (func_ptr));
+      if (! atexit_chain)
+	{
+	  atexit_chain_length = 0;
+	  last_atexit_chain_slot = -1;
+	  errno = ENOMEM;
+	  return (-1);
+	}
+    }
+  atexit_chain[last_atexit_chain_slot] = func;
+  return (0);
+}
+void
+exit (int status)
+{
+  if (atexit_chain)
+    {
+      for ( ; last_atexit_chain_slot-- >= 0; )
+	{
+	  (*atexit_chain[last_atexit_chain_slot + 1]) ();
+	  atexit_chain[last_atexit_chain_slot + 1] = 0;
+	}
+      free (atexit_chain);
+      atexit_chain = 0;
+    }
+  fflush(stdout);
+  fflush(stderr);
+  _exit(status);
+}
+/* end workaround for gentoo new glibc*/
+
 #endif
 
 #endif /* L_exit */
