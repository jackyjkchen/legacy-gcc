diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index f721fb614..5bbf11d7a 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -1482,7 +1482,12 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,
 	}
       else if (DECL_TEMPLATE_SPECIALIZATION (fn))
 	{
-	  if (!duplicate_decls (spec, fn, is_friend) && DECL_INITIAL (spec))
+	  tree dd = duplicate_decls (spec, fn, is_friend);
+	  if (dd == error_mark_node)
+	    /* We've already complained in duplicate_decls.  */
+	    return error_mark_node;
+
+	  if (dd == NULL_TREE && DECL_INITIAL (spec))
 	    /* Dup decl failed, but this is a new definition. Set the
 	       line number so any errors match this new
 	       definition.  */
diff --git a/gcc/testsuite/g++.dg/cpp0x/pr79361-1.C b/gcc/testsuite/g++.dg/cpp0x/pr79361-1.C
new file mode 100644
index 000000000..2960067be
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/pr79361-1.C
@@ -0,0 +1,7 @@
+// PR c++/79361
+// { dg-do compile { target c++11 } }
+
+template<typename T> void foo(T);
+
+template<> void foo<int>(int) {}   // { dg-message "declared" }
+template<> void foo<int>(int) = delete;  // { dg-error "redefinition" }
diff --git a/gcc/testsuite/g++.dg/cpp0x/pr79361-2.C b/gcc/testsuite/g++.dg/cpp0x/pr79361-2.C
new file mode 100644
index 000000000..25562118f
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/pr79361-2.C
@@ -0,0 +1,7 @@
+// PR c++/79361
+// { dg-do compile { target c++11 } }
+
+template<typename T> void foo(T);
+
+template<> void foo<int>(int) {}   // { dg-message "declared" }
+template<> void foo<int>(int) = default;  // { dg-error "redefinition" }
