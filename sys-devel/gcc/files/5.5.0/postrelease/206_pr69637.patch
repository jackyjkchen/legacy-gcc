diff --git a/gcc/cp/decl2.c b/gcc/cp/decl2.c
index 142d493b1..7f49e16c6 100644
--- a/gcc/cp/decl2.c
+++ b/gcc/cp/decl2.c
@@ -1142,8 +1142,11 @@ grokbitfield (const cp_declarator *declarator,
 	  && !INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (width)))
 	error ("width of bit-field %qD has non-integral type %qT", value,
 	       TREE_TYPE (width));
-      DECL_INITIAL (value) = width;
-      SET_DECL_C_BIT_FIELD (value);
+      else
+	{
+	  DECL_INITIAL (value) = width;
+	  SET_DECL_C_BIT_FIELD (value);
+	}
     }
 
   DECL_IN_AGGR_P (value) = 1;
diff --git a/gcc/testsuite/g++.dg/cpp0x/pr69637-1.C b/gcc/testsuite/g++.dg/cpp0x/pr69637-1.C
new file mode 100644
index 000000000..b8c22ebc8
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/pr69637-1.C
@@ -0,0 +1,8 @@
+// { dg-do compile { target c++11 } }
+
+template <class T>
+int foo () { return 1; }
+
+struct B {
+    unsigned c: foo;  // { dg-error "non-integral type" }
+};
diff --git a/gcc/testsuite/g++.dg/cpp0x/pr69637-2.C b/gcc/testsuite/g++.dg/cpp0x/pr69637-2.C
new file mode 100644
index 000000000..c65239329
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/pr69637-2.C
@@ -0,0 +1,6 @@
+// { dg-do compile { target c++11 } }
+
+template <class T, int N>
+constexpr int foo () { return N; }
+
+struct B { unsigned c: foo<int>, 3(); };  // { dg-error "non-integral type|expected" }
