diff --git a/gcc/cp/constexpr.c b/gcc/cp/constexpr.c
index e9b97db52..2c7e2f5a7 100644
--- a/gcc/cp/constexpr.c
+++ b/gcc/cp/constexpr.c
@@ -435,7 +435,8 @@ check_constexpr_ctor_body_1 (tree last, tree list)
   switch (TREE_CODE (list))
     {
     case DECL_EXPR:
-      if (TREE_CODE (DECL_EXPR_DECL (list)) == USING_DECL)
+      if (TREE_CODE (DECL_EXPR_DECL (list)) == USING_DECL
+	  || TREE_CODE (DECL_EXPR_DECL (list)) == TYPE_DECL)
 	return true;
       return false;
 
diff --git a/gcc/testsuite/g++.dg/cpp0x/constexpr-ctor19.C b/gcc/testsuite/g++.dg/cpp0x/constexpr-ctor19.C
new file mode 100644
index 000000000..f5ef053e0
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/constexpr-ctor19.C
@@ -0,0 +1,42 @@
+// PR c++/70229
+// { dg-do compile { target c++11 } }
+
+template <class>
+class S {
+  constexpr S (void) {
+    typedef int T;
+  }
+};
+
+template <class>
+class S2 {
+  constexpr S2 (void) {
+    ;
+  }
+};
+
+template <class>
+class S3 {
+  constexpr S3 (void) {
+    typedef enum { X } E;
+  } // { dg-error "does not have empty body" "" { target c++11_only } }
+};
+
+template <class>
+class S4 {
+  constexpr S4 (void) {
+    typedef struct { int j; } U;
+  } // { dg-error "does not have empty body" "" { target c++11_only } }
+};
+
+struct V
+{
+  int i;
+};
+
+template <class>
+class S5 {
+  constexpr S5 (void) {
+    typedef V W;
+  }
+};
