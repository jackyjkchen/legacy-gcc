diff --git a/gcc/cgraph.c b/gcc/cgraph.c
index 4a44b4a48..9f48a14bb 100644
--- a/gcc/cgraph.c
+++ b/gcc/cgraph.c
@@ -2174,6 +2174,8 @@ cgraph_node::dump (FILE *f)
     fprintf (f, " optimize_size");
   if (parallelized_function)
     fprintf (f, " parallelized_function");
+  if (DECL_IS_MALLOC (decl))
+    fprintf (f, " decl_is_malloc");
   if (DECL_IS_OPERATOR_NEW_P (decl))
     fprintf (f, " %soperator_new",
 	     DECL_IS_REPLACEABLE_OPERATOR (decl) ? "replaceable_" : "");
diff --git a/gcc/ipa-pure-const.c b/gcc/ipa-pure-const.c
index 890826aea..4e1a1fa77 100644
--- a/gcc/ipa-pure-const.c
+++ b/gcc/ipa-pure-const.c
@@ -1969,7 +1969,8 @@ propagate_malloc (void)
 	funct_state l = funct_state_summaries->get (node);
 	if (!node->alias
 	    && l->malloc_state == STATE_MALLOC
-	    && !node->inlined_to)
+	    && !node->inlined_to
+	    && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (node->decl))))
 	  {
 	    if (dump_file && (dump_flags & TDF_DETAILS))
 	      fprintf (dump_file, "Function %s found to be malloc\n",
diff --git a/gcc/testsuite/g++.dg/ipa/pr98075.C b/gcc/testsuite/g++.dg/ipa/pr98075.C
new file mode 100644
index 000000000..0c4219d1f
--- /dev/null
+++ b/gcc/testsuite/g++.dg/ipa/pr98075.C
@@ -0,0 +1,30 @@
+/* PR ipa/98075 */
+/* { dg-do compile } */                                                                        
+/* { dg-options "-O2 -fno-inline" } */
+
+template <typename BS>
+class xg {
+public:
+  BS *
+  fw ()
+  {
+    return static_cast<BS *> (operator new (sizeof (BS)));
+  }
+};
+
+class zp : xg<int> {
+public:
+  __attribute__ ((always_inline)) zp ()
+  {
+    hy = xg<int>::fw ();
+  }
+
+private:
+  int *hy;
+};
+
+void
+e5 ()
+{
+  zp ix;
+}
