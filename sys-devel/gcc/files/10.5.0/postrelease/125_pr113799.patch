diff --git a/gcc/fortran/arith.c b/gcc/fortran/arith.c
index 422ef40c4..9caae0a5a 100644
--- a/gcc/fortran/arith.c
+++ b/gcc/fortran/arith.c
@@ -1261,6 +1261,7 @@ reduce_unary (arith (*eval) (gfc_expr *, gfc_expr **), gfc_expr *op,
   gfc_constructor *c;
   gfc_expr *r;
   arith rc;
+  bool ov = false;
 
   if (op->expr_type == EXPR_CONSTANT)
     return eval (op, result);
@@ -1271,13 +1272,17 @@ reduce_unary (arith (*eval) (gfc_expr *, gfc_expr **), gfc_expr *op,
     {
       rc = reduce_unary (eval, c->expr, &r);
 
-      if (rc != ARITH_OK)
+      /* Remember any overflow encountered during reduction and continue,
+	 but terminate on serious errors.  */
+      if (rc == ARITH_OVERFLOW)
+	ov = true;
+      else if (rc != ARITH_OK)
 	break;
 
       gfc_replace_expr (c->expr, r);
     }
 
-  if (rc != ARITH_OK)
+  if (rc != ARITH_OK && rc != ARITH_OVERFLOW)
     gfc_constructor_free (head);
   else
     {
@@ -1290,7 +1295,7 @@ reduce_unary (arith (*eval) (gfc_expr *, gfc_expr **), gfc_expr *op,
       *result = r;
     }
 
-  return rc;
+  return ov ? ARITH_OVERFLOW : rc;
 }
 
 
diff --git a/gcc/testsuite/gfortran.dg/arithmetic_overflow_2.f90 b/gcc/testsuite/gfortran.dg/arithmetic_overflow_2.f90
new file mode 100644
index 000000000..6ca27f742
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/arithmetic_overflow_2.f90
@@ -0,0 +1,12 @@
+! { dg-do compile }
+! { dg-additional-options "-frange-check" }
+!
+! PR fortran/113799 - handle arithmetic overflow on unary minus
+
+program p
+  implicit none
+  real, parameter :: inf = real(z'7F800000')
+  real, parameter :: someInf(*) = [inf, 0.]
+  print *, -someInf         ! { dg-error "Arithmetic overflow" }
+  print *, minval(-someInf) ! { dg-error "Arithmetic overflow" }
+end
