diff --git a/gcc/cp/constexpr.c b/gcc/cp/constexpr.c
index 1bc363782..856116b8a 100644
--- a/gcc/cp/constexpr.c
+++ b/gcc/cp/constexpr.c
@@ -6888,6 +6888,29 @@ find_immediate_fndecl (tree *tp, int */*walk_subtrees*/, void */*data*/)
   return NULL_TREE;
 }
 
+/* T has TREE_CONSTANT set but has been deemed not a valid C++ constant
+   expression.  Return a version of T that has TREE_CONSTANT cleared.  */
+
+static tree
+mark_non_constant (tree t)
+{
+  gcc_checking_assert (TREE_CONSTANT (t));
+
+  /* This isn't actually constant, so unset TREE_CONSTANT.
+     Don't clear TREE_CONSTANT on ADDR_EXPR, as the middle-end requires
+     it to be set if it is invariant address, even when it is not
+     a valid C++ constant expression.  Wrap it with a NOP_EXPR
+     instead.  */
+  if (EXPR_P (t) && TREE_CODE (t) != ADDR_EXPR)
+    t = copy_node (t);
+  else if (TREE_CODE (t) == CONSTRUCTOR)
+    t = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (t), t);
+  else
+    t = build_nop (TREE_TYPE (t), t);
+  TREE_CONSTANT (t) = false;
+  return t;
+}
+
 /* ALLOW_NON_CONSTANT is false if T is required to be a constant expression.
    STRICT has the same sense as for constant_value_1: true if we only allow
    conforming C++ constant expressions, or false if we want a constant value
@@ -7132,18 +7155,7 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,
       if (manifestly_const_eval)
 	return cxx_eval_outermost_constant_expr (t, true, strict,
 						 false, false, object);
-      /* This isn't actually constant, so unset TREE_CONSTANT.
-	 Don't clear TREE_CONSTANT on ADDR_EXPR, as the middle-end requires
-	 it to be set if it is invariant address, even when it is not
-	 a valid C++ constant expression.  Wrap it with a NOP_EXPR
-	 instead.  */
-      if (EXPR_P (r) && TREE_CODE (r) != ADDR_EXPR)
-	r = copy_node (r);
-      else if (TREE_CODE (r) == CONSTRUCTOR)
-	r = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (r), r);
-      else
-	r = build_nop (TREE_TYPE (r), r);
-      TREE_CONSTANT (r) = false;
+    r = mark_non_constant (r);
     }
   else if (non_constant_p)
     return t;
@@ -7281,11 +7293,9 @@ maybe_constant_value (tree t, tree decl, bool manifestly_const_eval,
 
   if (!is_nondependent_constant_expression (t))
     {
-      if (TREE_OVERFLOW_P (t))
-	{
-	  t = build_nop (TREE_TYPE (t), t);
-	  TREE_CONSTANT (t) = false;
-	}
+      if (TREE_OVERFLOW_P (t)
+	  || (!processing_template_decl && TREE_CONSTANT (t)))
+	t = mark_non_constant (t);
       return t;
     }
   else if (CONSTANT_CLASS_P (t))
diff --git a/gcc/testsuite/g++.dg/cpp2a/concepts-pr98644.C b/gcc/testsuite/g++.dg/cpp2a/concepts-pr98644.C
new file mode 100644
index 000000000..6772f72a3
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp2a/concepts-pr98644.C
@@ -0,0 +1,7 @@
+// PR c++/98644
+// { dg-do compile { target c++20 } }
+
+template<class T> concept Signed = bool(T(1)); // { dg-error "reinterpret_cast" }
+static_assert(Signed<int*>); // { dg-error "non-constant" }
+
+constexpr bool B = requires { requires bool((char *)1); }; // { dg-error "reinterpret_cast" }
diff --git a/gcc/testsuite/g++.dg/parse/array-size2.C b/gcc/testsuite/g++.dg/parse/array-size2.C
index c4a69df3b..e58fe266e 100644
--- a/gcc/testsuite/g++.dg/parse/array-size2.C
+++ b/gcc/testsuite/g++.dg/parse/array-size2.C
@@ -15,8 +15,6 @@ void
 foo (void)
 {
   char g[(char *) &((struct S *) 0)->b - (char *) 0]; // { dg-error "40:size of array .g. is not an integral constant-expression" }
-						      // { dg-error "narrowing conversion" "" { target c++11 } .-1 }
-						      // { dg-message "expression has a constant value but is not a C.. constant-expression" "" { target c++11 } .-2 }
   char h[(__SIZE_TYPE__) &((struct S *) 8)->b];	      // { dg-error "10:size of array .h. is not an integral constant-expression" }
   bar (g, h);
 }
