diff --git a/gcc/testsuite/gnat.dg/sso18.adb b/gcc/testsuite/gnat.dg/sso18.adb
new file mode 100644
index 000000000..7496e965f
--- /dev/null
+++ b/gcc/testsuite/gnat.dg/sso18.adb
@@ -0,0 +1,21 @@
+--  { dg-do run }
+--  { dg-options "-O2" }
+
+with System;
+
+procedure SSO18 is
+
+  type Arr is array (1..32) of Short_Integer;
+  type Rev_Arr is array (1..32) of Short_Integer
+    with Scalar_Storage_Order => System.High_Order_First;
+  C : constant Arr := (others => 16);
+  RA : Rev_Arr;
+  A  : Arr;
+
+begin
+  RA := Rev_Arr(C);
+  A := Arr (RA);
+  if A /= C or else RA(1) /= 16 then
+     raise Program_Error;
+  end if;
+end;
diff --git a/gcc/tree-loop-distribution.c b/gcc/tree-loop-distribution.c
index 4ef37780f..5ee08bd49 100644
--- a/gcc/tree-loop-distribution.c
+++ b/gcc/tree-loop-distribution.c
@@ -1757,10 +1757,15 @@ loop_distribution::classify_builtin_ldst (loop_p loop, struct graph *rdg,
   if (res != 2)
     return;
 
-  /* They much have the same access size.  */
+  /* They must have the same access size.  */
   if (!operand_equal_p (size, src_size, 0))
     return;
 
+  /* They must have the same storage order.  */
+  if (reverse_storage_order_for_component_p (DR_REF (dst_dr))
+      != reverse_storage_order_for_component_p (DR_REF (src_dr)))
+    return;
+
   /* Load and store in loop nest must access memory in the same way, i.e,
      their must have the same steps in each loop of the nest.  */
   if (dst_steps.length () != src_steps.length ())
