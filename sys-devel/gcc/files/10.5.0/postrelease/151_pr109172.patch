diff --git a/gcc/cp/except.c b/gcc/cp/except.c
index 31cfc8101..4f643643f 100644
--- a/gcc/cp/except.c
+++ b/gcc/cp/except.c
@@ -663,6 +663,8 @@ build_throw (location_t loc, tree exp)
       tree tmp;
       tree allocate_expr;
 
+      tsubst_flags_t complain = tf_warning_or_error;
+
       /* The CLEANUP_TYPE is the internal type of a destructor.  */
       if (!cleanup_type)
 	{
@@ -820,10 +822,14 @@ build_throw (location_t loc, tree exp)
       cleanup = NULL_TREE;
       if (type_build_dtor_call (TREE_TYPE (object)))
 	{
-	  tree dtor_fn = lookup_fnfields (TYPE_BINFO (TREE_TYPE (object)),
+	  tree binfo = TYPE_BINFO (TREE_TYPE (object));
+	  tree dtor_fn = lookup_fnfields (binfo,
 					  complete_dtor_identifier, 0);
 	  dtor_fn = BASELINK_FUNCTIONS (dtor_fn);
-	  mark_used (dtor_fn);
+	  if (!mark_used (dtor_fn)
+	      || !perform_or_defer_access_check (binfo, dtor_fn,
+						 dtor_fn, complain))
+	    return error_mark_node;
 	  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (object)))
 	    {
 	      cxx_mark_addressable (dtor_fn);
diff --git a/gcc/testsuite/g++.dg/eh/dtor4.C b/gcc/testsuite/g++.dg/eh/dtor4.C
new file mode 100644
index 000000000..6c0e804fe
--- /dev/null
+++ b/gcc/testsuite/g++.dg/eh/dtor4.C
@@ -0,0 +1,15 @@
+// PR c++/109172
+
+class Demo
+{
+  ~Demo();
+};
+
+int main()
+{
+  try
+    {
+      throw *new Demo;		// { dg-error private }
+    }
+  catch(const Demo& e) { }
+}
