diff --git a/gcc/testsuite/gcc.dg/vect/vect-outer-pr69720.c b/gcc/testsuite/gcc.dg/vect/vect-outer-pr69720.c
new file mode 100644
index 0000000..8f50e78
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/vect/vect-outer-pr69720.c
@@ -0,0 +1,27 @@
+/* { dg-options "-std=c99" } */
+extern void abort (void);
+
+int a[128];
+double b[128] = { 1., 2., 3., 4. };
+
+void __attribute__((noinline)) foo()
+{
+  int i;
+  for (i = 0; i < 128; ++i)
+    {
+      double tem1 = b[i];
+      for (int j = 0; j < 32; ++j)
+	tem1 += 1;
+      b[i] = tem1;
+      a[i] = i;
+    }
+}
+
+int main()
+{
+  foo ();
+  if (b[0] != 33. || b[1] != 34.
+      || b[2] != 35. || b[3] != 36.)
+    abort ();
+  return 0;
+}
diff --git a/gcc/tree-vect-loop.c b/gcc/tree-vect-loop.c
index 1d51a4e..e1a3176 100644
--- a/gcc/tree-vect-loop.c
+++ b/gcc/tree-vect-loop.c
@@ -3530,6 +3530,15 @@ get_initial_def_for_reduction (gimple stmt, tree init_val,
   else
     init_value = init_val;
 
+  /* In case of a nested reduction do not use an adjustment def as
+     that case is not supported by the epilogue generation correctly
+     if ncopies is not one.  */
+  if (adjustment_def && nested_in_vect_loop)
+    {
+      *adjustment_def = NULL;
+      return vect_get_vec_def_for_operand (init_val, stmt, NULL);
+    }
+
   switch (code)
     {
       case WIDEN_SUM_EXPR:
@@ -3543,13 +3552,7 @@ get_initial_def_for_reduction (gimple stmt, tree init_val,
         /* ADJUSMENT_DEF is NULL when called from
            vect_create_epilog_for_reduction to vectorize double reduction.  */
         if (adjustment_def)
-          {
-            if (nested_in_vect_loop)
-              *adjustment_def = vect_get_vec_def_for_operand (init_val, stmt,
-                                                              NULL);
-            else
-              *adjustment_def = init_val;
-          }
+	  *adjustment_def = init_val;
 
         if (code == MULT_EXPR)
           {
@@ -3775,17 +3778,25 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,
      (in case of SLP, do it for all the phis). */
 
   /* Get the loop-entry arguments.  */
+  enum vect_def_type initial_def_dt = vect_unknown_def_type;
   if (slp_node)
     vect_get_vec_defs (reduction_op, NULL_TREE, stmt, &vec_initial_defs,
                        NULL, slp_node, reduc_index);
   else
     {
-      vec_initial_defs.create (1);
+      /* Get at the scalar def before the loop, that defines the initial value
+	 of the reduction variable.  */
+      gimple def_stmt = SSA_NAME_DEF_STMT (reduction_op);
+      tree initial_def = PHI_ARG_DEF_FROM_EDGE (def_stmt,
+						loop_preheader_edge (loop));
+      vect_is_simple_use (initial_def, NULL, loop_vinfo, NULL,
+			  &def_stmt, &initial_def, &initial_def_dt);
      /* For the case of reduction, vect_get_vec_def_for_operand returns
         the scalar def before the loop, that defines the initial value
         of the reduction variable.  */
       vec_initial_def = vect_get_vec_def_for_operand (reduction_op, stmt,
                                                       &adjustment_def);
+      vec_initial_defs.create (1);
       vec_initial_defs.quick_push (vec_initial_def);
     }
 
@@ -3800,6 +3811,15 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,
       def = vect_defs[i];
       for (j = 0; j < ncopies; j++)
         {
+	  if (j != 0)
+	    {
+	      phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));
+	      if (nested_in_vect_loop)
+		vec_init_def
+		  = vect_get_vec_def_for_stmt_copy (initial_def_dt,
+						    vec_init_def);
+	    }
+
           /* Set the loop-entry arg of the reduction-phi.  */
           add_phi_arg (phi, vec_init_def, loop_preheader_edge (loop),
                        UNKNOWN_LOCATION);
@@ -3818,8 +3838,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,
               dump_printf (MSG_NOTE, "\n");
               dump_gimple_stmt (MSG_NOTE, TDF_SLIM, SSA_NAME_DEF_STMT (def), 0);
             }
-
-          phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));
         }
     }
 
