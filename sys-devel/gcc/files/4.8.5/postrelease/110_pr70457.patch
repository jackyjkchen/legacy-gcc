diff --git a/gcc/testsuite/gcc.dg/torture/pr70457.c b/gcc/testsuite/gcc.dg/torture/pr70457.c
new file mode 100644
index 000000000..74daed4d3
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr70457.c
@@ -0,0 +1,29 @@
+/* { dg-do compile } */
+
+/* This formerly ICEd when trying to expand pow as a built-in with
+   the wrong number of arguments.  */
+
+extern double pow (double, double) __attribute__ ((__nothrow__ , __leaf__));
+
+typedef struct {
+  long long data;
+  int tag;
+} Object;
+
+extern Object Make_Flonum (double);
+extern Object P_Pow (Object, Object);
+
+Object General_Function (Object x, Object y, double (*fun)()) {
+  double d, ret;
+
+  d = 1.0;
+
+  if (y.tag >> 1)
+    ret = (*fun) (d);
+  else
+    ret = (*fun) (d, 0.0);
+
+  return Make_Flonum (ret);
+}
+
+Object P_Pow (Object x, Object y) { return General_Function (x, y, pow); }
diff --git a/gcc/tree-inline.c b/gcc/tree-inline.c
index d2dfc438a..f7eaf3e6c 100644
--- a/gcc/tree-inline.c
+++ b/gcc/tree-inline.c
@@ -3560,7 +3560,7 @@ estimate_num_insns (gimple stmt, eni_weights *weights)
 	  return 0;
 	else if (is_inexpensive_builtin (decl))
 	  return weights->target_builtin_call_cost;
-	else if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)
+    else if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))
 	  {
 	    /* We canonicalize x * x to pow (x, 2.0) with -ffast-math, so
 	       specialize the cheap expansion we do here.
diff --git a/gcc/tree-ssa-math-opts.c b/gcc/tree-ssa-math-opts.c
index 36f93b989..f1a11e5f4 100644
--- a/gcc/tree-ssa-math-opts.c
+++ b/gcc/tree-ssa-math-opts.c
@@ -711,7 +711,7 @@ execute_cse_sincos_1 (tree name)
       if (gimple_code (use_stmt) != GIMPLE_CALL
 	  || !gimple_call_lhs (use_stmt)
 	  || !(fndecl = gimple_call_fndecl (use_stmt))
-	  || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)
+	  || !gimple_call_builtin_p (use_stmt, BUILT_IN_NORMAL))
 	continue;
 
       switch (DECL_FUNCTION_CODE (fndecl))
@@ -1402,7 +1402,7 @@ execute_cse_sincos (void)
 	  if (is_gimple_call (stmt)
 	      && gimple_call_lhs (stmt)
 	      && (fndecl = gimple_call_fndecl (stmt))
-	      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)
+	      && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))
 	    {
 	      tree arg, arg0, arg1, result;
 	      HOST_WIDE_INT n;
@@ -2742,7 +2742,7 @@ execute_optimize_widening_mul (void)
 	    {
 	      tree fndecl = gimple_call_fndecl (stmt);
 	      if (fndecl
-		  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)
+		  && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))
 		{
 		  switch (DECL_FUNCTION_CODE (fndecl))
 		    {
