diff --git a/gcc/cp/method.c b/gcc/cp/method.c
index 2d1ace407..8be4b61e9 100644
--- a/gcc/cp/method.c
+++ b/gcc/cp/method.c
@@ -1479,7 +1479,8 @@ explain_implicit_non_constexpr (tree decl)
   synthesized_method_walk (DECL_CLASS_CONTEXT (decl),
 			   special_function_p (decl), const_p,
 			   NULL, NULL, NULL, &dummy, true,
-			   NULL_TREE, NULL_TREE);
+			   DECL_INHERITED_CTOR_BASE (decl),
+			   FUNCTION_FIRST_USER_PARMTYPE (decl));
 }
 
 /* DECL is an instantiation of an inheriting constructor template.  Deduce
diff --git a/gcc/cp/semantics.c b/gcc/cp/semantics.c
index 964c8eba0..da811e089 100644
--- a/gcc/cp/semantics.c
+++ b/gcc/cp/semantics.c
@@ -3803,14 +3803,15 @@ emit_associated_thunks (tree fn)
 }
 
 /* Returns true iff FUN is an instantiation of a constexpr function
-   template.  */
+   template or a defaulted constexpr function.  */
 
 static inline bool
 is_instantiation_of_constexpr (tree fun)
 {
-  return (DECL_TEMPLOID_INSTANTIATION (fun)
-	  && DECL_DECLARED_CONSTEXPR_P (DECL_TEMPLATE_RESULT
-					(DECL_TI_TEMPLATE (fun))));
+  return ((DECL_TEMPLOID_INSTANTIATION (fun)
+	   && DECL_DECLARED_CONSTEXPR_P (DECL_TI_TEMPLATE (fun)))
+	  || (DECL_DEFAULTED_FN (fun)
+	      && DECL_DECLARED_CONSTEXPR_P (fun)));
 }
 
 /* Generate RTL for FN.  */
@@ -6429,7 +6430,7 @@ explain_invalid_constexpr_fn (tree fun)
   if (is_valid_constexpr_fn (fun, true))
     {
       /* Then if it's OK, the body.  */
-      if (DECL_DEFAULTED_FN (fun))
+      if (!DECL_DECLARED_CONSTEXPR_P (fun))
 	explain_implicit_non_constexpr (fun);
       else
 	{
diff --git a/gcc/testsuite/g++.dg/cpp0x/constexpr-inhctor1.C b/gcc/testsuite/g++.dg/cpp0x/constexpr-inhctor1.C
new file mode 100644
index 000000000..ee8757f4d
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/constexpr-inhctor1.C
@@ -0,0 +1,15 @@
+// PR c++/58511
+// { dg-do compile { target c++11 } }
+
+struct A
+{
+  constexpr A(int, int = i) {}
+  static const int i;
+};
+
+struct B : A
+{
+  using A::A;			// { dg-error "A::i" }
+};
+
+constexpr B b(0);		// { dg-error "B::B" }
diff --git a/gcc/testsuite/g++.dg/cpp0x/nsdmi3.C b/gcc/testsuite/g++.dg/cpp0x/nsdmi3.C
index 73b2bc2e1..603780266 100644
--- a/gcc/testsuite/g++.dg/cpp0x/nsdmi3.C
+++ b/gcc/testsuite/g++.dg/cpp0x/nsdmi3.C
@@ -10,9 +10,9 @@ struct B
 {
   A a1 = 1;			// { dg-error "" }
   A a2 { 2 };
-  A a3 = { 3 };			// { dg-error "" }
+  A a3 = { 3 };			// { dg-error "explicit" }
 };
 
 constexpr B b;			// { dg-error "B::B" }
 
-// { dg-message "a1. is invalid" "" { target *-*-* } 11 }
+// { dg-prune-output "uninitialized member" }
