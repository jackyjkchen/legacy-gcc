diff --git a/gcc/fold-const.c b/gcc/fold-const.c
index d9f391904..80cbeb8a5 100644
--- a/gcc/fold-const.c
+++ b/gcc/fold-const.c
@@ -16809,11 +16809,10 @@ fold_ignored_result (tree t)
    This can only be applied to objects of a sizetype.  */
 
 tree
-round_up_loc (location_t loc, tree value, int divisor)
+round_up_loc (location_t loc, tree value, unsigned int divisor)
 {
   tree div = NULL_TREE;
 
-  gcc_assert (divisor > 0);
   if (divisor == 1)
     return value;
 
diff --git a/gcc/stor-layout.c b/gcc/stor-layout.c
index 9113535f2..aada61219 100644
--- a/gcc/stor-layout.c
+++ b/gcc/stor-layout.c
@@ -1552,6 +1552,11 @@ finalize_record_size (record_layout_info rli)
     unpadded_size_unit
       = size_binop (PLUS_EXPR, unpadded_size_unit, size_one_node);
 
+  if (TREE_CODE (unpadded_size_unit) == INTEGER_CST
+      && !TREE_OVERFLOW (unpadded_size_unit)
+      && !valid_constant_size_p (unpadded_size_unit))
+    error ("type %qT is too large", rli->t);
+
   /* Round the size up to be a multiple of the required alignment.  */
   TYPE_SIZE (rli->t) = round_up (unpadded_size, TYPE_ALIGN (rli->t));
   TYPE_SIZE_UNIT (rli->t)
diff --git a/gcc/testsuite/c-c++-common/pr60226.c b/gcc/testsuite/c-c++-common/pr60226.c
new file mode 100644
index 000000000..3a1c261fa
--- /dev/null
+++ b/gcc/testsuite/c-c++-common/pr60226.c
@@ -0,0 +1,14 @@
+/* PR c/60226 */
+/* { dg-do compile } */
+/* { dg-options "-Wno-c++-compat" { target c } } */
+
+typedef int __attribute__ ((aligned (1 << 28))) int28;
+int28 foo[4] = {}; /* { dg-error "alignment of array elements is greater than element size" } */
+typedef int __attribute__ ((aligned (1 << 29))) int29; /* { dg-error "requested alignment is too large" } */
+
+void
+f (void)
+{
+  struct { __attribute__((aligned (1 << 28))) double a; } x1;
+  struct { __attribute__((aligned (1 << 29))) double a; } x2; /* { dg-error "requested alignment is too large" } */
+}
diff --git a/gcc/testsuite/gcc.dg/pr42611.c b/gcc/testsuite/gcc.dg/pr42611.c
index c33e248ca..19e0b2bc0 100644
--- a/gcc/testsuite/gcc.dg/pr42611.c
+++ b/gcc/testsuite/gcc.dg/pr42611.c
@@ -9,11 +9,11 @@
   : sizeof (__SIZE_TYPE__) == sizeof (long) ? __LONG_MAX__		\
   : sizeof (__SIZE_TYPE__) == sizeof (long long) ? __LONG_LONG_MAX__	\
   : __INTMAX_MAX__)
-struct S { int a; char b[L]; };
+struct S { int a; char b[L]; };	/* { dg-error "type .struct S. is too large" } */
 
 void
 foo (void)
 {
-  struct S s;				/* { dg-error "is too large" } */
+  struct S s;
   asm volatile ("" : : "r" (&s));
 }
diff --git a/gcc/tree.h b/gcc/tree.h
index 8e7096ec1..efb9a4650 100644
--- a/gcc/tree.h
+++ b/gcc/tree.h
@@ -5236,7 +5236,7 @@ extern tree size_diffop_loc (location_t, tree, tree);
 #define sbitsize_int(L) size_int_kind (L, stk_sbitsizetype)
 
 #define round_up(T,N) round_up_loc (UNKNOWN_LOCATION, T, N)
-extern tree round_up_loc (location_t, tree, int);
+extern tree round_up_loc (location_t, tree, unsigned int);
 #define round_down(T,N) round_down_loc (UNKNOWN_LOCATION, T, N)
 extern tree round_down_loc (location_t, tree, int);
 extern void finalize_size_functions (void);
