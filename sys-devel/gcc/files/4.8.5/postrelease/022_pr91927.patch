diff --git a/gcc/config/aarch64/aarch64-simd.md b/gcc/config/aarch64/aarch64-simd.md
index 481222cf5..3f186416e 100644
--- a/gcc/config/aarch64/aarch64-simd.md
+++ b/gcc/config/aarch64/aarch64-simd.md
@@ -323,7 +323,7 @@
 (define_expand "movmisalign<mode>"
   [(set (match_operand:VALL 0 "aarch64_simd_nonimmediate_operand" "")
         (match_operand:VALL 1 "aarch64_simd_general_operand" ""))]
-  "TARGET_SIMD"
+  "TARGET_SIMD && !STRICT_ALIGNMENT"
 {
   /* This pattern is not permitted to fail during expansion: if both arguments
      are non-registers (e.g. memory := constant, which can be created by the
diff --git a/gcc/testsuite/gcc.target/aarch64/pr91927.c b/gcc/testsuite/gcc.target/aarch64/pr91927.c
new file mode 100644
index 000000000..f5cde1a53
--- /dev/null
+++ b/gcc/testsuite/gcc.target/aarch64/pr91927.c
@@ -0,0 +1,38 @@
+/* { dg-do compile } */
+/* { dg-options "-mstrict-align -O3" } */
+
+#define NULL 0
+
+typedef unsigned uint32_t;
+typedef struct __attribute__((__packed__))
+{
+	uint32_t nTagID;
+	uint32_t nValueBufferSize;
+	uint32_t nValueLength;
+	
+}	PropertyTags_t;
+
+typedef struct
+{
+	char *szName;
+	uint32_t nBufferSize;
+	uint32_t nLength;
+	
+}	Something_t;
+
+void SetTag(PropertyTags_t *pTag, uint32_t nBufferSize, uint32_t nLength);
+
+void TestCase(Something_t *pSome, uint32_t nBufferSize, uint32_t nLength)
+{
+	if (pSome != NULL)
+	{
+		PropertyTags_t sTag = { 0 };
+		
+		SetTag(&sTag, nBufferSize, nLength);
+		
+		pSome->nBufferSize = sTag.nValueBufferSize;
+		pSome->nLength = sTag.nValueLength;
+	}
+}
+
+/* { dg-final { scan-assembler-not "ldr\td" } } */
