diff --git a/gcc/rtlanal.c b/gcc/rtlanal.c
index 940fce410..f2074efe5 100644
--- a/gcc/rtlanal.c
+++ b/gcc/rtlanal.c
@@ -3323,8 +3323,7 @@ simplify_subreg_regno (unsigned int xregno, enum machine_mode xmode,
 
   /* We shouldn't simplify stack-related registers.  */
   if ((!reload_completed || frame_pointer_needed)
-      && (xregno == FRAME_POINTER_REGNUM
-	  || xregno == HARD_FRAME_POINTER_REGNUM))
+      && xregno == FRAME_POINTER_REGNUM)
     return -1;
 
   if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM
diff --git a/gcc/testsuite/gcc.c-torture/compile/20110131-1.c b/gcc/testsuite/gcc.c-torture/compile/20110131-1.c
new file mode 100644
index 000000000..8ce68de4b
--- /dev/null
+++ b/gcc/testsuite/gcc.c-torture/compile/20110131-1.c
@@ -0,0 +1,38 @@
+/* PR rtl-optimization/44031 */
+/* Testcase by John Regehr <regehr@cs.utah.edu> */
+
+typedef unsigned char uint8_t;
+typedef unsigned int uint32_t;
+typedef unsigned long int uint64_t;
+
+static uint32_t
+safe_add_func_uint32_t_u_u (uint32_t ui1, uint32_t ui2)
+{
+  return ui1 + ui2;
+}
+
+static uint64_t
+safe_div_func_uint64_t_u_u (uint64_t ui1, uint32_t ui2)
+{
+  return ui2 ? : (ui1 / ui2);
+}
+
+uint8_t g_55;
+uint8_t *g_73 = &g_55;
+uint8_t **g_332 = &g_73;
+
+int func_38(uint8_t *,int);
+int func_8(int);
+
+int int321 (void)
+{
+  uint8_t l_26[4];
+  uint8_t *l_238 = &l_26[2];
+  uint8_t l_400;
+  l_400 &=
+    func_38 (&l_26[3],
+         safe_add_func_uint32_t_u_u (safe_div_func_uint64_t_u_u
+                     (1, **g_332),
+                     *l_238) >= *l_238 < func_8 (0)), 1;
+  return 0;
+}
