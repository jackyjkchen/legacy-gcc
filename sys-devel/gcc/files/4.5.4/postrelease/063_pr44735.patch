diff --git a/gcc/fortran/dependency.c b/gcc/fortran/dependency.c
index 3614a2601..3c5102b81 100644
--- a/gcc/fortran/dependency.c
+++ b/gcc/fortran/dependency.c
@@ -780,6 +780,7 @@ gfc_check_dependency (gfc_expr *expr1, gfc_expr *expr2, bool identical)
       /* The interesting cases are when the symbols don't match.  */
       if (expr1->symtree->n.sym != expr2->symtree->n.sym)
 	{
+	  symbol_attribute attr1, attr2;
 	  gfc_typespec *ts1 = &expr1->symtree->n.sym->ts;
 	  gfc_typespec *ts2 = &expr2->symtree->n.sym->ts;
 
@@ -795,9 +796,13 @@ gfc_check_dependency (gfc_expr *expr1, gfc_expr *expr2, bool identical)
 		return 0;
 	    }
 
-	  /* If either variable is a pointer, assume the worst.  */
-	  /* TODO: -fassume-no-pointer-aliasing */
-	  if (gfc_is_data_pointer (expr1) || gfc_is_data_pointer (expr2))
+	  /* We have to also include target-target as ptr%comp is not a
+	     pointer but it still alias with "dt%comp" for "ptr => dt".  As
+	     subcomponents and array access to pointers retains the target
+	     attribute, that's sufficient.  */
+	  attr1 = gfc_expr_attr (expr1);
+	  attr2 = gfc_expr_attr (expr2);
+	  if ((attr1.pointer || attr1.target) && (attr2.pointer || attr2.target))
 	    {
 	      if (check_data_pointer_types (expr1, expr2)
 		    && check_data_pointer_types (expr2, expr1))
diff --git a/gcc/testsuite/gfortran.dg/pr44735.f90 b/gcc/testsuite/gfortran.dg/pr44735.f90
new file mode 100644
index 000000000..0c9b8dec1
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/pr44735.f90
@@ -0,0 +1,16 @@
+! { dg-do run }
+
+program main
+  if (bug() /= "abcdefghij") call abort
+contains
+  function bug()
+    character(len=10) :: bug
+    character(len=1), dimension(:), pointer :: p_chars
+    allocate(p_chars(10))
+    p_chars = ['a','b','c','d','e','f','g','h','i','j']
+    forall (i=1:len(bug))
+      bug(i:i) = p_chars(i)
+    end forall
+    deallocate(p_chars)
+  end function bug
+end program main
