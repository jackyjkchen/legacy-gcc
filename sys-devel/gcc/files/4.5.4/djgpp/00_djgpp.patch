diff --git a/config/gxx-include-dir.m4 b/config/gxx-include-dir.m4
index 4f54d427f..74bb09ffe 100644
--- a/config/gxx-include-dir.m4
+++ b/config/gxx-include-dir.m4
@@ -8,15 +8,26 @@ dnl If you change the default here, you'll need to change the gcc and
 dnl libstdc++-v3 subdirectories too.
 AC_DEFUN([TL_AC_GXX_INCLUDE_DIR],
 [
+case "$host" in
+  *-msdosdjgpp*)
+    libstdcxx_incdir_base=cxx
+    gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+    ;;
+  *)
+    libstdcxx_incdir_base=c++
+    gcc_version_dir='$(gcc_version)'
+    ;;
+esac
+
 case "${with_gxx_include_dir}" in
   yes)
     AC_MSG_ERROR([--with-gxx-include-dir=[[dir]] requires a directory])
     ;;
   no | "")
     case "${enable_version_specific_runtime_libs}" in
-      yes) gxx_include_dir='$(libsubdir)/include/c++' ;;
+      yes) gxx_include_dir='$(libsubdir)/include/'${libstdcxx_incdir_base} ;;
       *)
-	libstdcxx_incdir='c++/$(gcc_version)'
+	libstdcxx_incdir=${libstdcxx_incdir_base}/${gcc_version_dir}
 	gxx_include_dir='include/$(libstdcxx_incdir)'
 	if test -n "$with_cross_host" && 
            test x"$with_cross_host" != x"no"; then	
diff --git a/fixincludes/Makefile.in b/fixincludes/Makefile.in
index f91a70d2e..c87e2bfc6 100644
--- a/fixincludes/Makefile.in
+++ b/fixincludes/Makefile.in
@@ -41,6 +41,8 @@ VPATH = $(srcdir)
 libdir = @libdir@
 # Directory in which GCC puts its executables.
 libexecdir = @libexecdir@
+# GCC version for subdirectory names (editted if host requires it)
+gcc_version_dir = @gcc_version_dir@
 
 # End of variables for you to override.
 
@@ -52,9 +54,9 @@ target_noncanonical:=@target_noncanonical@
 gcc_version := $(shell cat $(srcdir)/../gcc/BASE-VER)
 
 # Directory in which the compiler finds libraries etc.
-libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version)
+libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version_dir)
 # Directory in which the compiler finds executables
-libexecsubdir = $(libexecdir)/gcc/$(target_noncanonical)/$(gcc_version)
+libexecsubdir = $(libexecdir)/gcc/$(target_noncanonical)/$(gcc_version_dir)
 # Where our executable files go
 itoolsdir = $(libexecsubdir)/install-tools
 # Where our data files go
diff --git a/fixincludes/configure b/fixincludes/configure
index 52821e471..b1cfbc124 100755
--- a/fixincludes/configure
+++ b/fixincludes/configure
@@ -590,6 +590,7 @@ ac_includes_default="\
 
 ac_subst_vars='LTLIBOBJS
 LIBOBJS
+gcc_version_dir
 MAINT
 EGREP
 GREP
@@ -5165,6 +5166,19 @@ cat >>confdefs.h <<_ACEOF
 _ACEOF
 
 
+# For DJGPP there should not be more than 1 dot. Therefore edit
+# version in case of DJGPP
+case $host in
+	i?86-*-msdosdjgpp*)
+		gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+		;;
+
+	* )
+		gcc_version_dir='$(gcc_version)'
+		;;
+esac
+
+
 ac_config_headers="$ac_config_headers config.h"
 
 ac_config_files="$ac_config_files Makefile mkheaders.almost:mkheaders.in"
diff --git a/fixincludes/configure.ac b/fixincludes/configure.ac
index f30a64276..f47ca57dd 100644
--- a/fixincludes/configure.ac
+++ b/fixincludes/configure.ac
@@ -111,6 +111,19 @@ AC_SUBST(MAINT)
 AC_DEFINE_UNQUOTED([SED_PROGRAM], "${SED}",
    [Defined to the best working sed program on the host system])
 
+# For DJGPP there should not be more than 1 dot. Therefore edit
+# version in case of DJGPP
+[case $host in
+	i?86-*-msdosdjgpp*)
+		gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+		;;
+
+	* )
+		gcc_version_dir='$(gcc_version)'
+		;;
+esac]
+AC_SUBST(gcc_version_dir)
+
 AC_CONFIG_HEADERS(config.h, [echo timestamp > stamp-h])
 AC_CONFIG_FILES(Makefile mkheaders.almost:mkheaders.in)
 AC_OUTPUT
diff --git a/gcc/Makefile.in b/gcc/Makefile.in
index d10c574cd..3dab0ce4b 100644
--- a/gcc/Makefile.in
+++ b/gcc/Makefile.in
@@ -601,6 +601,7 @@ man7ext = .7
 objext = .o
 exeext = @host_exeext@
 build_exeext = @build_exeext@
+libstdcxx_incdir_base=@libstdcxx_incdir_base@
 
 # Directory in which to put man pages.
 mandir = @mandir@
@@ -3926,7 +3927,7 @@ s-fixinc_list : $(GCC_PASSES)
 # Abort if no system headers available, unless building a crosscompiler.
 # FIXME: abort unless building --without-headers would be more accurate and less ugly
 stmp-fixinc: gsyslimits.h macro_list fixinc_list \
-  $(build_objdir)/fixincludes/fixincl \
+  $(build_objdir)/fixincludes/fixincl$(EXEEXT) \
   $(build_objdir)/fixincludes/fixinc.sh
 	rm -rf include-fixed; mkdir include-fixed
 	-chmod a+rx include-fixed
diff --git a/gcc/ada/adaint.c b/gcc/ada/adaint.c
index 54b32232b..cf4d38e53 100644
--- a/gcc/ada/adaint.c
+++ b/gcc/ada/adaint.c
@@ -133,6 +133,16 @@ UINT CurrentCodePage;
 #endif
 
 #if defined (__EMX__) || defined (MSDOS) || defined (_WIN32)
+
+/* For isalpha-like tests in the compiler, we're expected to resort to
+   safe-ctype.h/ISALPHA.  This isn't available for the runtime library
+   build, so we fallback on ctype.h/isalpha there.  */
+
+#ifdef IN_RTS
+#include <ctype.h>
+#define ISALPHA isalpha
+#endif
+
 #elif defined (VMS)
 
 /* Header files and definitions for __gnat_set_file_time_name.  */
@@ -478,7 +488,10 @@ __gnat_readlink (char *path ATTRIBUTE_UNUSED,
 		 char *buf ATTRIBUTE_UNUSED,
 		 size_t bufsiz ATTRIBUTE_UNUSED)
 {
-#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \
+#if defined (__DJGPP__) && (__DJGPP__>2 || (__DJGPP__==2 && __DJGPP_MINOR__>=4))
+  /* Symbolic links are supported for DJGPP beginning with version 2.04pre */
+  return readlink (path, buf, bufsiz);
+#elif defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \
   || defined (VMS) || defined(__vxworks) || defined (__nucleus__)
   return -1;
 #else
@@ -494,7 +507,9 @@ int
 __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,
 		char *newpath ATTRIBUTE_UNUSED)
 {
-#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \
+#if defined (__DJGPP__) && (__DJGPP__>2 || (__DJGPP__==2 && __DJGPP_MINOR__>=4))
+  return symlink (oldpath, newpath);
+#elif defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \
   || defined (VMS) || defined(__vxworks) || defined (__nucleus__)
   return -1;
 #else
@@ -578,7 +593,11 @@ int
 __gnat_get_maximum_file_name_length (void)
 {
 #if defined (MSDOS)
+#ifdef __DJGPP__
+  return (_use_lfn(".")) ? -1 : 8;
+#else
   return 8;
+#endif
 #elif defined (VMS)
   if (getenv ("GNAT$EXTENDED_FILE_SPECIFICATIONS"))
     return -1;
@@ -1413,6 +1432,7 @@ __gnat_file_time_fd_attr (int fd, struct file_attributes* attr)
      unsigned file_hour  = fs.ft_hour;
      unsigned file_min   = fs.ft_min;
      unsigned file_tsec  = fs.ft_tsec;
+     return ret;
 #endif
 
      /* Calculate the seconds since epoch from the time components. First count
@@ -1476,7 +1496,7 @@ __gnat_file_time_fd (int fd)
 void
 __gnat_set_file_time_name (char *name, time_t time_stamp)
 {
-#if defined (__EMX__) || defined (MSDOS) || defined (__vxworks)
+#if defined (__EMX__) || defined (__vxworks)
 
 /* Code to implement __gnat_set_file_time_name for these systems.  */
 
@@ -2320,6 +2340,9 @@ __gnat_is_symbolic_link_attr (char* name, struct file_attributes* attr)
 #if defined (__vxworks) || defined (__nucleus__)
       attr->symbolic_link = 0;
 
+#elif defined (__DJGPP__) && (__DJGPP__ < 2 || (__DJGPP__==2) && (__DJGPP_MINOR__<4))
+  return 0;
+
 #elif defined (_AIX) || defined (__APPLE__) || defined (__unix__)
       int ret;
       GNAT_STRUCT_STAT statbuf;
diff --git a/gcc/ada/ctrl_c.c b/gcc/ada/ctrl_c.c
index a860b767c..acf933ef2 100644
--- a/gcc/ada/ctrl_c.c
+++ b/gcc/ada/ctrl_c.c
@@ -38,6 +38,10 @@
 #include "system.h"
 #endif
 
+#ifndef SA_RESTART
+#define SA_RESTART 0
+#endif
+
 /* Services to intercept Ctrl-C */
 
 /* __gnat_install_int_handler will install the specified handler.
diff --git a/gcc/ada/env.c b/gcc/ada/env.c
index c8b49ebe1..41a8bb007 100644
--- a/gcc/ada/env.c
+++ b/gcc/ada/env.c
@@ -108,6 +108,7 @@ void
 __gnat_setenv (char *name, char *value)
 {
 #ifdef MSDOS
+  setenv (name, value, 1);
 
 #elif defined (VMS)
   struct descriptor_s name_desc;
@@ -277,13 +278,25 @@ void __gnat_unsetenv (char *name) {
   sprintf (expression, "%s=", name);
   putenv (expression);
   free (expression);
+#elif defined (__DJGPP__)
+#if __DJGPP__ > 2 || (__DJGPP__ == 2 && __DJGPP_MINOR >= 4)
+  unsetenv (name);
+#else
+  size_t size = strlen (name) + 2;
+  char *expression;
+  expression = (char *) xmalloc (size * sizeof (char));
+
+  sprintf (expression, "%s=", name);
+  putenv (expression);
+  free (expression);
+#endif
 #else
   unsetenv (name);
 #endif
 }
 
 void __gnat_clearenv (void) {
-#if defined (VMS)
+#if defined (VMS) || defined(MSDOS)
   /* not implemented */
   return;
 #elif defined (sun) || (defined (__mips) && defined (__sgi)) \
diff --git a/gcc/ada/gcc-interface/Makefile.in b/gcc/ada/gcc-interface/Makefile.in
index 2dad96bae..3a32bd87d 100644
--- a/gcc/ada/gcc-interface/Makefile.in
+++ b/gcc/ada/gcc-interface/Makefile.in
@@ -1594,6 +1594,12 @@ ifeq ($(strip $(filter-out avr none powerpc% eabispe leon% erc32% unknown elf,$(
   indepsw.adb<indepsw-gnu.adb
 endif
 
+ifeq ($(strip $(filter-out %djgpp,$(osys))),)
+  GNATRTL_SOCKETS_OBJS =
+  LIBGNAT_TARGET_PAIRS += $(DUMMY_SOCKETS_TARGET_PAIRS)
+
+endif
+
 ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)
   LIBGNAT_TARGET_PAIRS = \
   a-dirval.adb<a-dirval-mingw.adb \
diff --git a/gcc/ada/gsocket.h b/gcc/ada/gsocket.h
index 24928a1f9..b56eb47de 100644
--- a/gcc/ada/gsocket.h
+++ b/gcc/ada/gsocket.h
@@ -185,7 +185,7 @@
  * to run on RTEMS (not IN_RTS), we must distinguish between IN_RTS
  * and using this file to compile gen-soccon.
  */
-#if !(defined (VMS) || defined (__MINGW32__) || \
+#if !(defined (VMS) || defined (__MINGW32__) || defined(__DJGPP__) || \
       (defined(__rtems__) && defined(IN_RTS)))
 #include <sys/socket.h>
 #include <netinet/in.h>
diff --git a/gcc/ada/init.c b/gcc/ada/init.c
index b1edfb05f..c05249eab 100644
--- a/gcc/ada/init.c
+++ b/gcc/ada/init.c
@@ -2290,6 +2290,37 @@ __gnat_install_handler (void)
   __gnat_handler_installed = 1;
 }
 
+#elif defined (__DJGPP__)
+
+/***************************************/
+/* FIXME: this is only a draft version */
+/***************************************/
+
+struct timestruc_t
+{
+   time_t  tv_sec;
+   long    tv_nsec;
+};
+
+
+int
+nanosleep (struct timestruc_t *Rqtp, struct timestruc_t *Rmtp);
+
+int
+nanosleep (struct timestruc_t *Rqtp, struct timestruc_t *Rmtp)
+{
+    usleep (1000000*Rqtp->tv_sec+Rqtp->tv_nsec/1000);
+    if (Rmtp) { Rmtp->tv_sec = Rmtp->tv_nsec=0; }
+    return 0;
+}
+
+
+void
+__gnat_install_handler ()
+{
+  __gnat_handler_installed = 1;
+}
+
 #else
 
 /* For all other versions of GNAT, the handler does nothing.  */
diff --git a/gcc/ada/s-oscons-tmplt.c b/gcc/ada/s-oscons-tmplt.c
index 1e8bd520c..17594b192 100644
--- a/gcc/ada/s-oscons-tmplt.c
+++ b/gcc/ada/s-oscons-tmplt.c
@@ -1203,6 +1203,8 @@ CND(SIZEOF_tv_usec, "tv_usec")
    --  Sizes of various data types
 */
 
+/* FIXME: Should have been HAVE_SOCKETS. Temporarily put here #ifndef __DJGPP__ */
+#if !defined(__DJGPP__)
 #define SIZEOF_sockaddr_in (sizeof (struct sockaddr_in))
 CND(SIZEOF_sockaddr_in, "struct sockaddr_in")
 #ifdef HAVE_AF_INET6
@@ -1211,12 +1213,15 @@ CND(SIZEOF_sockaddr_in, "struct sockaddr_in")
 # define SIZEOF_sockaddr_in6 0
 #endif
 CND(SIZEOF_sockaddr_in6, "struct sockaddr_in6")
+#endif
 
 #define SIZEOF_fd_set (sizeof (fd_set))
 CND(SIZEOF_fd_set, "fd_set");
 
+#if !defined(__DJGPP__)
 #define SIZEOF_struct_servent (sizeof (struct servent))
 CND(SIZEOF_struct_servent, "struct servent");
+#endif
 /*
 
    --  Fields of struct hostent
diff --git a/gcc/ada/socket.c b/gcc/ada/socket.c
index 767556431..9452f7bc4 100644
--- a/gcc/ada/socket.c
+++ b/gcc/ada/socket.c
@@ -87,6 +87,7 @@ extern void __gnat_remove_socket_from_set (fd_set *, int);
 extern void __gnat_reset_socket_set (fd_set *);
 extern int  __gnat_get_h_errno (void);
 extern int  __gnat_socket_ioctl (int, int, int *);
+#if !defined(__DJGPP__)
 extern char * __gnat_servent_s_name (struct servent *);
 extern char ** __gnat_servent_s_aliases (struct servent *);
 extern int __gnat_servent_s_port (struct servent *);
@@ -95,6 +96,7 @@ extern void __gnat_servent_set_s_name (struct servent *, char *);
 extern void __gnat_servent_set_s_aliases (struct servent *, char **);
 extern void __gnat_servent_set_s_port (struct servent *, int);
 extern void __gnat_servent_set_s_proto (struct servent *, char *);
+#endif
 #if defined (__vxworks) || defined (_WIN32)
 extern int  __gnat_inet_pton (int, const char *, void *);
 #endif
@@ -418,6 +420,9 @@ __gnat_get_h_errno (void) {
   extern int *decc$h_errno_get_addr ();
   return *decc$h_errno_get_addr ();
 
+#elif defined (__DJGPP__)
+
+  return errno;
 #elif defined (__rtems__)
   /* At this stage in the tool build, no networking .h files are available.
    * Newlib does not provide networking .h files and RTEMS is not built yet.
@@ -541,6 +546,7 @@ __gnat_inet_pton (int af, const char *src, void *dst) {
 
 /* Getters */
 
+#if !defined(__DJGPP__)
 char *
 __gnat_servent_s_name (struct servent * s)
 {
@@ -590,6 +596,7 @@ __gnat_servent_set_s_proto (struct servent * s, char * s_proto)
 {
   s->s_proto = s_proto;
 }
+#endif
 
 #else
 # warning Sockets are not supported on this platform
diff --git a/gcc/ada/sysdep.c b/gcc/ada/sysdep.c
index 5af4299e8..5c7ccc95b 100644
--- a/gcc/ada/sysdep.c
+++ b/gcc/ada/sysdep.c
@@ -173,6 +173,11 @@ static const char *mode_write_binary_plus = "w+b";
 static const char *mode_append_binary_plus = "a+b";
 const char __gnat_text_translation_required = 1;
 
+#ifdef __DJGPP__
+#include <io.h>
+#define _setmode setmode
+#endif
+
 void
 __gnat_set_binary_mode (int handle)
 {
@@ -780,8 +785,7 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)
      *off = *off + tzi.DaylightBias;
   *off = *off * -60;
 
-#else
-
+#elif 
   /* First convert unix time_t structure to windows FILETIME format.  */
   utc_time.ull_time = ((unsigned long long) *timer + w32_epoch_offset)
                       * 10000000ULL;
@@ -844,6 +848,26 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)
 
 /* Other targets except Lynx, VMS and Windows provide a standard locatime_r */
 
+#else
+#if defined (__DJGPP__)
+
+/* FIXME: this is draft version only. Fix me if that is not correct  */
+/*        or not complete (AP)                                       */
+
+extern struct tm *__gnat_localtime_tzoff PARAMS ((const time_t *, struct tm *));
+
+struct tm *
+__gnat_localtime_tzoff (timer, tp)
+     const time_t *timer;
+     struct tm *tp;
+{
+  struct tm *tmp;
+
+  tmp = localtime (timer);
+  memcpy (tp, tmp, sizeof (struct tm));
+  return tp;
+}
+
 #else
 
 #define Lock_Task system__soft_links__lock_task
@@ -942,6 +966,7 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)
 #endif
 #endif
 #endif
+#endif
 
 #ifdef __vxworks
 
diff --git a/gcc/c-common.c b/gcc/c-common.c
index 0eac72727..b7bf2e76b 100644
--- a/gcc/c-common.c
+++ b/gcc/c-common.c
@@ -7379,8 +7379,9 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),
 
       if (!get_nonnull_operand (TREE_VALUE (args), &arg_num))
 	{
-	  error ("nonnull argument has invalid operand number (argument %lu)",
-		 (unsigned long) attr_arg_num);
+	  if (!(flags & (int) ATTR_FLAG_BUILT_IN))
+	     error ("nonnull argument has invalid operand number (argument %lu)",
+		    (unsigned long) attr_arg_num);
 	  *no_add_attrs = true;
 	  return NULL_TREE;
 	}
@@ -7398,16 +7399,18 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),
 	  if (!argument
 	      || TREE_CODE (TREE_VALUE (argument)) == VOID_TYPE)
 	    {
-	      error ("nonnull argument with out-of-range operand number (argument %lu, operand %lu)",
-		     (unsigned long) attr_arg_num, (unsigned long) arg_num);
+	      if (!(flags & (int) ATTR_FLAG_BUILT_IN))
+		 error ("nonnull argument with out-of-range operand number (argument %lu, operand %lu)",
+		       (unsigned long) attr_arg_num, (unsigned long) arg_num);
 	      *no_add_attrs = true;
 	      return NULL_TREE;
 	    }
 
 	  if (TREE_CODE (TREE_VALUE (argument)) != POINTER_TYPE)
 	    {
-	      error ("nonnull argument references non-pointer operand (argument %lu, operand %lu)",
-		   (unsigned long) attr_arg_num, (unsigned long) arg_num);
+	      if (!(flags & (int) ATTR_FLAG_BUILT_IN))
+		 error ("nonnull argument references non-pointer operand (argument %lu, operand %lu)",
+		        (unsigned long) attr_arg_num, (unsigned long) arg_num);
 	      *no_add_attrs = true;
 	      return NULL_TREE;
 	    }
diff --git a/gcc/c-decl.c b/gcc/c-decl.c
index 3fb2f173e..ede2d5e85 100644
--- a/gcc/c-decl.c
+++ b/gcc/c-decl.c
@@ -1702,8 +1702,10 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,
 	      /* If types don't match for a built-in, throw away the
 		 built-in.  No point in calling locate_old_decl here, it
 		 won't print anything.  */
+#ifndef __DJGPP__
 	      warning (0, "conflicting types for built-in function %q+D",
 		       newdecl);
+#endif
 	      return false;
 	    }
 	}
diff --git a/gcc/config.host b/gcc/config.host
index c07d9e5f1..989528f18 100644
--- a/gcc/config.host
+++ b/gcc/config.host
@@ -198,12 +198,17 @@ case ${host} in
   i[34567]86-pc-msdosdjgpp*)
     host_xm_file=i386/xm-djgpp.h
     host_exeext=.exe
+    host_xmake_file="${host_xmake_file} i386/x-djgpp"
     # Shorten $target_noncanonical for 8.3 filename conventions.
+    # Also update C++ include directory name
+    # due to the same restrictions
     case ${target} in
       *pc-msdosdjgpp*)
         target_noncanonical=djgpp
+	libstdcxx_incdir_base=cxx
         ;;
     esac
+	
     ;;
   i[34567]86-*-pe | i[34567]86-*-cygwin*)
     host_xm_file=i386/xm-cygwin.h
diff --git a/gcc/config/i386/djgpp.h b/gcc/config/i386/djgpp.h
index 26a35af1e..dd3f4121e 100644
--- a/gcc/config/i386/djgpp.h
+++ b/gcc/config/i386/djgpp.h
@@ -21,6 +21,11 @@ along with GCC; see the file COPYING3.  If not see
 /* Support generation of DWARF2 debugging info.  */
 #define DWARF2_DEBUGGING_INFO 1
 
+/* Use DWARF2 debugging info by default: comment out following  */
+/* 2 lines to default to COFF debugging info  */
+#undef PREFERRED_DEBUGGING_TYPE
+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG
+
 /* Don't assume anything about the header files.  */
 #define NO_IMPLICIT_EXTERN_C
 
@@ -64,6 +69,8 @@ along with GCC; see the file COPYING3.  If not see
 #undef STANDARD_INCLUDE_DIR
 #define STANDARD_INCLUDE_DIR "/dev/env/DJDIR/include/"
 
+#undef PREFIX_INCLUDE_DIR
+
 /* Search for as.exe and ld.exe in DJGPP's binary directory.  */ 
 #undef MD_EXEC_PREFIX
 #define MD_EXEC_PREFIX "/dev/env/DJDIR/bin/"
@@ -72,43 +79,26 @@ along with GCC; see the file COPYING3.  If not see
 #undef MD_STARTFILE_PREFIX
 #define MD_STARTFILE_PREFIX "/dev/env/DJDIR/lib/"
 
-/* Correctly handle absolute filename detection in cp/xref.c */
-#define FILE_NAME_ABSOLUTE_P(NAME) \
-        (((NAME)[0] == '/') || ((NAME)[0] == '\\') || \
-        (((NAME)[0] >= 'A') && ((NAME)[0] <= 'z') && ((NAME)[1] == ':')))
-
 #define TARGET_OS_CPP_BUILTINS()		\
   do						\
     {						\
+        if (!flag_iso)                          \
+	   builtin_define_with_int_value ("DJGPP",2);  \
+	builtin_define_with_int_value ("__DJGPP",2);   \
+	builtin_define_with_int_value ("__DJGPP__",2); \
 	builtin_define_std ("MSDOS");		\
 	builtin_define_std ("GO32");		\
+	builtin_define_std ("unix");		\
 	builtin_assert ("system=msdos");	\
     }						\
   while (0)
 
 /* Include <sys/version.h> so __DJGPP__ and __DJGPP_MINOR__ are defined.  */
 #undef CPP_SPEC
-#define CPP_SPEC "-remap %{posix:-D_POSIX_SOURCE} \
-  -imacros %s../include/sys/version.h"
-
-/* We need to override link_command_spec in gcc.c so support -Tdjgpp.djl.
-   This cannot be done in LINK_SPECS as that LINK_SPECS is processed
-   before library search directories are known by the linker.
-   This avoids problems when specs file is not available. An alternate way,
-   suggested by Robert Hoehne, is to use SUBTARGET_EXTRA_SPECS instead.
-*/ 
-
-#undef LINK_COMMAND_SPEC
-#define LINK_COMMAND_SPEC \
-"%{!fsyntax-only: \
-%{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \
-\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\
-\t%{!A:%{!nostdlib:%{!nostartfiles:%S}}}\
-\t%{static:} %{L*} %D %o\
-\t%{!nostdlib:%{!nodefaultlibs:%G %L %G}}\
-\t%{!A:%{!nostdlib:%{!nostartfiles:%E}}}\
-\t-Tdjgpp.djl %{T*}}}}}}}\n\
-%{!c:%{!M:%{!MM:%{!E:%{!S:stubify %{v} %{o*:%*} %{!o*:a.out} }}}}}"
+#define CPP_SPEC "-remap %{posix:-D_POSIX_SOURCE}"
+
+#undef POST_LINK_SPEC
+#define POST_LINK_SPEC "stubify %{v} %{o*:%*} %{!o*:a.out}"
 
 /* Always just link in 'libc.a'.  */
 #undef LIB_SPEC
@@ -165,23 +155,20 @@ along with GCC; see the file COPYING3.  If not see
 #undef PTRDIFF_TYPE
 #define PTRDIFF_TYPE "int"
 
-/* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */
-#define LIBSTDCXX "-lstdcxx"
-
 #define TARGET_VERSION fprintf (stderr, " (80386, MS-DOS DJGPP)"); 
 
-/* Warn that -mbnu210 is now obsolete.  */
-#undef  SUBTARGET_OVERRIDE_OPTIONS
-#define SUBTARGET_OVERRIDE_OPTIONS \
-do \
-  { \
-    if (TARGET_BNU210) \
-      {	\
-        warning (0, "-mbnu210 is ignored (option is obsolete)"); \
-      }	\
-  } \
-while (0)
-
 /* Support for C++ templates.  */
 #undef MAKE_DECL_ONE_ONLY
 #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)
+
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(n) svr4_dbx_register_map[n]
+
+/* Default to pcc-struct-return.  */
+#define DEFAULT_PCC_STRUCT_RETURN 1
+
+/* Copied from gcc/varasm.c. (i386.c uses it) */
+#undef ASM_DECLARE_FUNCTION_NAME
+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)		\
+  ASM_OUTPUT_LABEL (FILE, NAME);
+
diff --git a/gcc/config/i386/nmalloc/cokusmt.c b/gcc/config/i386/nmalloc/cokusmt.c
new file mode 100644
index 000000000..d9685b756
--- /dev/null
+++ b/gcc/config/i386/nmalloc/cokusmt.c
@@ -0,0 +1,185 @@
+/* FILE cokusmt.c */
+/* This is a miniscule cleanup of the source downloaded from:  */
+/*       http://www.math.keio.ac.jp/~matumoto/ver980409.html   */
+
+/* This is the "Mersenne Twister" random number generator MT19937,
+// which generates pseudorandom integers uniformly distributed in
+// 0..(2^32 - 1) starting from any odd seed in 0..(2^32 - 1).  This
+// version is a recode by Shawn Cokus (Cokus@math.washington.edu) on
+// March 8, 1998 of a version by Takuji Nishimura (who had suggestions
+// from Topher Cooper and Marc Rieffel in July-August 1997).
+//
+// Effectiveness of the recoding (on Goedel2.math.washington.edu, a
+// DEC Alpha running OSF/1) using GCC -O3 as a compiler: before
+// recoding: 51.6 sec. to generate 300 million random numbers; after
+// recoding: 24.0 sec. for the same (i.e., 46.5% of original time),
+// so speed is now about 12.5 million random number generations per
+// second on this machine.
+//
+// According to URL <http://www.math.keio.ac.jp/~matumoto/emt.html>
+// (and paraphrasing a bit in places), the Mersenne Twister is
+// "designed with consideration of the flaws of various existing
+// generators," has a period of 2^19937 - 1, gives a sequence that
+// is 623-dimensionally equidistributed, and "has passed many
+// stringent tests, including the die-hard test of G. Marsaglia and
+// the load test of P. Hellekalek and S. Wegenkittl."  It is efficient
+// in memory usage (typically using 2506 to 5012 bytes of static data,
+// depending on data type sizes, and the code is quite short as well).
+// It generates random numbers in batches of 624 at a time, so the
+// caching and pipelining of modern systems is exploited. It is also
+// divide- and mod-free.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Library General Public License
+// as published by the Free Software Foundation (either version 2 of
+// the License or, at your option, any later version).  This library
+// is distributed in the hope that it will be useful, but WITHOUT ANY
+// WARRANTY, without even the implied warranty of MERCHANTABILITY or
+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General
+// Public License for more details.  You should have received a copy
+// of the GNU Library General Public License along with this library;
+// if not, write to the Free Software Foundation, Inc., 59 Temple
+// Place, Suite 330, Boston, MA 02111-1307, USA.
+//
+// The code as Shawn received it included the following notice:
+//
+//  Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.  When
+//  you use this, send an e-mail to <matumoto@math.keio.ac.jp> with
+//  an appropriate reference to your work.
+//
+// It would be nice to CC: <Cokus@math.washington.edu> when you write.
+*/
+
+/* uint32 must be an unsigned integer type capable of holding at least
+// 32 bits; exactly 32 should be fastest, but 64 is better on an Alpha
+// with GCC at -O3 optimization so try your options and see what's
+// best for you.
+*/
+
+#include "cokusmt.h"
+
+typedef unsigned long uint32;
+
+
+#define N             (624)               /* length of state vector */
+#define M             (397)                 /*   a period parameter */
+#define K             (0x9908B0DFU)         /*     a magic constant */
+#define hiBit(u)      ((u) & 0x80000000U)   /* mask all but highest */
+                                            /*            bit of u  */
+#define loBit(u)      ((u) & 0x00000001U)   /* mask all but lowest  */
+                                            /*            bit of u  */
+#define loBits(u)     ((u) & 0x7FFFFFFFU)   /* mask off the highest */
+                                            /*            bit of u  */
+#define mixBits(u, v) (hiBit(u) | loBits(v))  /* move hi bit of u   */
+                                              /*   to hi bit of v */
+
+static uint32 state[N+1]; /* state vector+1 to not violate ANSI C */
+static uint32 *next;      /* next random value computed from here */
+static int     left = -1; /* can *next++ this many times before */
+                          /* reloading */
+
+
+/* We initialize state[0..(N-1)] via the generator
+//
+//   x_new = (69069 * x_old) mod 2^32
+//
+// from Line 15 of Table 1, p. 106, Sec. 3.3.4 of Knuth's
+// _The Art of Computer Programming_, Volume 2, 3rd ed.
+//
+// Notes (SJC): I do not know what the initial state requirements
+// of the Mersenne Twister are, but it seems this seeding generator
+// could be better.  It achieves the maximum period for its modulus
+// (2^30) iff x_initial is odd (p. 20-21, Sec. 3.2.1.2, Knuth); if
+// x_initial can be even, you have sequences like 0, 0, 0, ...;
+// 2^31, 2^31, 2^31, ...; 2^30, 2^30, 2^30, ...; 2^29, 2^29 + 2^31,
+// 2^29, 2^29 + 2^31, ..., etc. so I force seed to be odd below.
+//
+// Even if x_initial is odd, if x_initial is 1 mod 4 then
+//
+//            low bit of x is always 1,
+//    next-to-low bit of x is always 0,
+//   2nd-from-low bit of x alternates   ... 0 1 0 1 0 1 0 1 ... ,
+//   3rd-from-low bit of x 4-cycles     ... 0 1 1 0 0 1 1 0 ... ,
+//   4th-from-low bit of x has 8-cycle  ... 0 0 0 1 1 1 1 0 ... ,
+//    ...
+//
+// and if x_initial is 3 mod 4 then
+//
+//            low bit of x is always 1,
+//    next-to-low bit of x is always 1,
+//   2nd-from-low bit of x alternates   ... 0 1 0 1 0 1 0 1 ... ,
+//   3rd-from-low bit of x 4-cycles     ... 0 0 1 1 0 0 1 1 ... ,
+//   4th-from-low bit of x has 8-cycle  ... 0 0 1 1 1 1 0 0 ... ,
+//    ...
+//
+// The generator's potency (min. s>=0 with (69069-1)^s = 0
+// mod 2^32) is 16, which seems to be alright by p. 25, Sec.
+// 3.2.1.3 of Knuth.  It also does well in the dimension 2..5
+// spectral tests, but it could be better in dimension 6
+// (Line 15, Table 1, p. 106, Sec. 3.3.4, Knuth).
+//
+// Note that the random number user does not see the values
+// generated here directly since reloadMT() will always munge
+// them first, so maybe none of all of this matters.  In fact,
+// the seed values made here could even be extra-special
+// desirable if the Mersenne Twister theory says so-- that's
+// why the only change I made is to restrict to odd seeds.
+*/
+void seedMT(uint32 seed)
+{
+   register uint32  x = (seed | 1U) & 0xFFFFFFFFU,
+                   *s = state;
+   register int     j;
+
+   for (left = 0, *s++ = x, j = N;
+        --j;
+        *s++ = (x *= 69069U) & 0xFFFFFFFFU);
+} /* seedMT */
+
+
+static uint32 reloadMT(void)
+{
+   register  uint32
+            *p0    = state,
+            *p2    = state + 2,
+            *pM    = state + M,
+            s0,
+            s1;
+   register int    j;
+
+   if (left < -1)  seedMT(4357U);        /* Autoseed on first use */
+
+   left = N - 1; next = state + 1;
+   for (s0 = state[0], s1 = state[1], j = N - M + 1;
+             --j;
+             s0 = s1, s1 = *p2++)
+      *p0++ = *pM++ ^ (mixBits(s0, s1) >> 1) ^ (loBit(s1) ? K : 0U);
+
+   for (pM = state, j = M;
+             --j;
+             s0 = s1, s1 = *p2++)
+      *p0++ = *pM++ ^ (mixBits(s0, s1) >> 1) ^ (loBit(s1) ? K : 0U);
+
+   s1 = state[0];
+   *p0 = *pM ^ (mixBits(s0, s1) >> 1) ^ (loBit(s1) ? K : 0U);
+   s1 ^= (s1 >> 11);
+   s1 ^= (s1 <<  7) & 0x9D2C5680U;
+   s1 ^= (s1 << 15) & 0xEFC60000U;
+   return (s1 ^ (s1 >> 18));
+} /* reloadMT */
+
+
+uint32 randomMT(void)
+{
+   uint32 y;
+
+   if (--left < 0)
+      return(reloadMT());
+
+   y  = *next++;
+   y ^= (y >> 11);
+   y ^= (y <<  7) & 0x9D2C5680U;
+   y ^= (y << 15) & 0xEFC60000U;
+   return (y ^ (y >> 18));
+} /* randomMT */
+
diff --git a/gcc/config/i386/nmalloc/cokusmt.h b/gcc/config/i386/nmalloc/cokusmt.h
new file mode 100644
index 000000000..c6df7d70c
--- /dev/null
+++ b/gcc/config/i386/nmalloc/cokusmt.h
@@ -0,0 +1,17 @@
+/* file cokusMT.h */
+
+#ifndef cokus_h
+#define cokus_h
+
+#include <limits.h>
+
+#if ULONG_MAX != 4294967295UL
+   #error System long word size not suitable for cokusMT
+#endif
+
+#define ranMTMAX ULONG_MAX
+
+void seedMT(unsigned long seed);
+unsigned long randomMT(void);
+
+#endif /* cokus_h */
diff --git a/gcc/config/i386/nmalloc/evilalg2.c b/gcc/config/i386/nmalloc/evilalg2.c
new file mode 100644
index 000000000..18b740a8e
--- /dev/null
+++ b/gcc/config/i386/nmalloc/evilalg2.c
@@ -0,0 +1,23 @@
+#include <stdio.h>
+#include <stdlib.h>
+
+int main(void)
+{
+   char    *p;
+   unsigned int i;
+
+   puts("Testing calloc(i, i).  Be patient");
+   for (i = 65535; i > 0; i--) {
+      if ((p = calloc(i,i))) {
+         printf("\n%d appears to be the largest succesful integer\n",
+                   i);
+         break;
+      }
+      if (0 == (i % 500)) {
+         if (0 == (i % 5000)) printf(" %8d\n", i);
+         else printf("\r%8d", i);
+         fflush(stdout);
+      }
+   }
+   return 0;
+}
diff --git a/gcc/config/i386/nmalloc/evilalgo.c b/gcc/config/i386/nmalloc/evilalgo.c
new file mode 100644
index 000000000..107c8c9ce
--- /dev/null
+++ b/gcc/config/i386/nmalloc/evilalgo.c
@@ -0,0 +1,35 @@
+/* From djgpp mail list - an evil algorithm */
+/* This shows up the difference between DJGPP2.03 malloc and
+   nmalloc, both in speed and in efficiency of memory use.
+   Snaffled/cleaned up for testing use by C.B. Falconer.
+
+   To use the new malloc, simply link it with the object module.
+*/
+#include <stdio.h>
+#include <stdlib.h>
+
+typedef struct {
+   char af[10];
+   char name[10];
+} record;
+
+record **dt, *d;
+
+int main(int argc, char ** argv)
+{
+   unsigned long n = 1000;  /* was 200000L */
+   unsigned int  count;
+   void         *v;
+
+   if (argc > 1) n = strtoul(argv[1], NULL, 10);
+
+   dt = NULL;
+   for (count = 0; count < n; count++){
+      if ((v = realloc(dt, (count + 1) * sizeof *dt))) dt = v;
+      else break;
+      if (!(d = dt[count] = calloc(10, sizeof *d))) break;
+      if (!(count & 0xfff)) putc('*', stderr);
+   }
+   printf("\ncount=%d\n", count);
+   return(0);
+} /* evilalgo */
diff --git a/gcc/config/i386/nmalloc/fakesbrk.h b/gcc/config/i386/nmalloc/fakesbrk.h
new file mode 100644
index 000000000..50bae6aa7
--- /dev/null
+++ b/gcc/config/i386/nmalloc/fakesbrk.h
@@ -0,0 +1 @@
+void *fakesbrk(int delta);
diff --git a/gcc/config/i386/nmalloc/makefile b/gcc/config/i386/nmalloc/makefile
new file mode 100644
index 000000000..e476dae2b
--- /dev/null
+++ b/gcc/config/i386/nmalloc/makefile
@@ -0,0 +1,88 @@
+# nmalloc makefile
+# This makefile was tested under W98 and DJGPP 2.03/gcc 2.953
+# and is a mess.  Feel free to create a better one.
+
+objects = nmalloc.o cokusmt.o
+sources = tnmalloc.c nmalloc.c nmalloc.h nmalloc.lst \
+          cokusmt.c cokusmt.h fakesbrk.h sysquery.h \
+          malldbg.c malldbg.h tmalldbg.c \
+	  makefile evilalgo.c nmalloc.txh
+utils   = xref.exe
+
+CFLAGS  = -W -Wall -gstabs+ -Dinline= 
+
+tnmalloc.exe : $(objects) tnmalloc.o
+	gcc -o tnmalloc.exe tnmalloc.o $(objects)
+	
+# this shows up all use of magic numbers	
+nmalloc.xrf : nmalloc.lst nmalloc.c nmalloc.h sysquery.h \
+              malldbg.h malldbg.c tmalldbg.c tnmalloc.c
+	xref -cfn8 nmalloc.lst nmalloc.xrf
+
+# profileable version. 50% slowdown
+mallocp.o   : nmalloc.c sysquery.h
+	gcc -W -Wall -pg -gstabs+ -O2 -o mallocp.o \
+	    -c nmalloc.c
+
+# production version	
+malloc.o    : nmalloc.c sysquery.h
+	gcc -W -Wall -gstabs+ -O2 -o malloc.o \
+	    -c nmalloc.c
+	    
+# production debug system
+malldbg.o   : malldbg.c sysquery.h malldbg.h
+	gcc -W -Wall -O1 -gstabs+ -c malldbg.c
+	
+# testing production debug version
+tmalldbg.o  : tmalldbg.c sysquery.h malldbg.h
+	gcc -W -Wall -gstabs+ -O1 -c tmalldbg.c
+	
+# testing production debug version
+tmalldbg.exe : tmalldbg.o malldbg.o malloc.o
+	gcc -o tmalldbg.exe tmalldbg.o malldbg.o malloc.o
+
+# profilable	
+tmallocp.o : tnmalloc.c nmalloc.h fakesbrk.h sysquery.h
+	gcc -W -Wall -pg -gstabs+ -O2 -o tmallocp.o \
+	    -c tnmalloc.c
+	
+# Use this to profile malloc under various tests. 50% slowdown
+tmallocp.exe : tmallocp.o cokusmt.o mallocp.o
+	gcc -pg -o tmallocp.exe tmallocp.o cokusmt.o mallocp.o
+
+tnmalloc.o  : tnmalloc.c cokusmt.h nmalloc.h fakesbrk.h sysquery.h
+cokusmt.o   : cokusmt.c cokusmt.h
+evilalgo.o  : evilalgo.c malloc.o
+
+# Development debug version
+nmalloc.o   : nmalloc.c nmalloc.h fakesbrk.h sysquery.h
+	gcc -W -Wall -DNEWMALLDBG -gstabs+ -O1 -c nmalloc.c
+
+# pack it all up for shipping
+nmalloc.zip   : $(sources) $(utils) readme.txt
+	zip -o -u nmalloc.zip $(sources) $(utils) readme.txt
+	
+#create a profile
+profile	: tmallocp.exe
+	tmallocp 5 100000 quiet > profile
+	gprof -b tmallocp.exe >> profile
+
+.PHONY : clean zip tnmalloc tmallocp tmalldbg all xrf
+
+clean :
+	rm -f tnmalloc.exe $(objects) tnmalloc.o malloc.o \
+	      mallocp.o nmalloc.xrf tmallocp.exe tmallocp.o \
+	      gmon.out evilalgo.o
+
+zip : nmalloc.zip
+
+tnmalloc : tnmalloc.exe
+
+tmallocp : tmallocp.exe
+
+tmalldbg : tmalldbg.exe
+
+# elide "zip" from this, to avoid destroying a backup
+all : tnmalloc malloc.o mallocp.o tmallocp tmalldbg
+
+xrf : nmalloc.xrf
diff --git a/gcc/config/i386/nmalloc/malldbg.c b/gcc/config/i386/nmalloc/malldbg.c
new file mode 100644
index 000000000..edf6cbf1a
--- /dev/null
+++ b/gcc/config/i386/nmalloc/malldbg.c
@@ -0,0 +1,429 @@
+/* -------- malldbg.c --------- */
+
+/* Copyright (c) 2003 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@worldnet.att.net>
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <limits.h>
+#include <signal.h>   /* raise, SIGABRT */
+#include "malldbg.h"  /* and sysquery.h */
+
+/* This is to be used in conjunction with a version of
+   nmalloc.c compiled with:
+
+     gcc -DNDEBUG -o malloc.o -c nmalloc.c
+*/
+
+static int   dbglevel;
+static FILE *dumpfile;
+static int   initialized;
+
+/* array of hook function pointers, for cleaner interface */
+/* This is purely a record of values set by sethook()     */
+static M_HOOKFN hookptr[HKCOUNT];
+
+/* Number of free lists in system */
+#define NFLISTS ((int)(CHAR_BIT * sizeof(size_t)))
+
+/* Loaded by initsysinfo() to access nmalloc guts */
+static struct _sysquery sysinfo;
+
+/* freehdrsp is pointer to array[NFLISTS] of void* */
+/* These are the headers of the actual free lists  */
+/* also loaded by initsysinfo() call               */
+static void          *(*freehdrsp)[NFLISTS];
+
+#define NONE          sysinfo.nilp
+#define lastsbrk      freehdrs[0]
+#define memblockp     void*
+typedef unsigned int  ulong;
+typedef unsigned char byte;
+
+/* conversion and access macros */
+#define DATAOFFSET sysinfo.data
+
+#define MEMBLKp(p) (memblockp)((byte*)(p) - DATAOFFSET)
+#define PTR(m)     (void*)((byte*)(m) + DATAOFFSET)
+
+/* This accesses the list of discrete memory chains     */
+/* which are created when sbrk returns unexpected value */
+#define SBRKBGN    ((void **)(sysinfo.anchors))
+
+/* field access macros (AFTER sysinfo loaded)    */
+/* Examples - replace "m->prv" by "fld(m, prv)"  */
+/*            replace "m->sz"  by "szof(m)"      */
+/* where field is prvf, nxtf, prv, nxt           */
+#define fld(m, field)   *((void**)((char*)m + sysinfo.field))
+#define szof(m)         *(ulong*)((char*)m + sysinfo.sz)
+#define freehdrs        (*freehdrsp)
+
+/* ----------------- */
+
+/* Set up the access to the nmalloc module */
+static void initsysinfo(void)
+{
+   sysinfo   = _sysmalloc();
+   freehdrsp = (void*)((byte*)(sysinfo.nilp)-sizeof(void*));
+   if (!dumpfile) dumpfile = stderr;
+   initialized = 1;
+} /* initsysinfo */
+
+/* 1------------------1 */
+
+/* m is the allocated ptr treated by MEMBLKp    */
+/* Fouls if sysinfo has not been initialized    */
+/* Display info about a particular memory block */
+static void xshowblock(FILE *f, void *m, const char *id)
+{
+   if (NULL == f) return;
+   if (m) {
+      fprintf(f, " %s %p", id, m);
+      fprintf(f, " sz=%u nxt=%p prv=%p nxtf=",
+             szof(m), fld(m, nxt), fld(m, prv));
+      if (fld(m, nxtf)) {
+         if (NONE == fld(m, nxtf))
+            fprintf(f, "NONE prvf=");
+         else
+            fprintf(f, "%p prvf=", fld(m, nxtf));
+         if (NONE == fld(m, prvf))
+            fprintf(f, "NONE");
+         else
+            fprintf(f, "%p", fld(m, prvf));
+      }
+      else fprintf(f, "0");
+   }
+   else
+      fprintf(f, " %s NULL", id);
+   fflush(f);  /* to coexist with internal debuggery */
+} /* xshowblock */
+
+/* 1------------------1 */
+
+/* dump the entire free chain group             */
+/* Fouls if sysinfo has not been initialized    */
+/* See main for sysinfo initialization sequence */
+static void xdumpfree(FILE *f)
+{
+   int       i;
+   memblockp m;
+   ulong     totfree;
+
+   if (NULL == f) return;
+   totfree = 0;
+   for (i = 0; i < NFLISTS; i++) {
+      if ((m = freehdrs[i])) {
+         fprintf(f, "\n%2d: ", i);
+         do {
+            fprintf(f, "%p(%u)->", m, szof(m));
+            totfree += szof(m);
+            m = fld(m, nxtf);
+         } while (m && (NONE != m));
+         fprintf(f, "0");
+         m = freehdrs[i];
+         while (m && (NONE !=m )) {
+            xshowblock(f, m, "\n     ");
+            m = fld(m, nxtf);
+         }
+      }
+   }
+   fprintf(f, "\nTotal Free = %u\n", totfree);
+   fflush(f);  /* to coexist with internal debuggery */
+} /* xdumpfree */
+
+/* ----------------- */
+
+/* show the content of a block, flag it as BAD */
+static void showbad(FILE *f, void * m)
+{
+   void *n;
+
+   if ((dbglevel >= 3) && (NULL == f)) f = dumpfile;
+   if (f) {
+      n = fld(m, nxt);
+      xshowblock(f, m, "\n BAD?:");
+      xshowblock(f, n, "\n BAD?:");
+      putc('\n', f);
+      fflush(f);
+   }
+} /* showbad */
+
+/* ----------------- */
+
+/* scans the complete malloc structures to collect
+   info.  If f is non-NULL outputs a detailed listing
+   returns NULL unless a bad block is found.
+   Any bad blocks are displayed on dumpfile */
+static void * mallocscan(FILE *f, struct mallinfo *mi)
+{
+   unsigned long totalmem, totalfree, blks, freeblks;
+   void *m, *n, *badblk;
+   int   i, valid;
+
+   valid = 1; badblk = NULL;
+   if (!initialized) initsysinfo();
+   mi->smblks = mi->hblks = mi->hblkhd = mi->usmblks = 0;
+   mi->fsmblks = mi->keepcost = 0;
+
+   /* this initialization accounts for the fact that
+      the lastsbrk field will be counted as used */
+   blks = 0; totalmem = 0;
+   mi->hblkhd = totalfree = szof(freehdrs[0]);
+   freeblks = 1;
+
+   for (i = 0; (m = SBRKBGN[i]); i++) {
+      if (f) fprintf(f, "\n\nGroup %d:", i);
+      do {
+         n = fld(m, nxt);
+         if (f) xshowblock(f, m, "\n ");
+         totalmem += szof(m);
+         blks++;
+         if (dbglevel && n)
+            if (m != fld(n, prv)) {
+               valid = 0; badblk = m;
+               showbad(dumpfile, m);
+               if (dbglevel >= 3) {
+                  fflush(dumpfile);
+                  raise(SIGABRT);
+               }
+            }
+         if (fld(m, nxtf)) { /* a free block */
+            freeblks++;
+            totalfree += szof(m);
+         }
+      } while ((m = n));
+   }
+   if (f) fprintf(f, "\n");
+
+   /* return the collected info in struct mi */
+   mi->arena    = totalmem;
+   mi->ordblks  = blks;
+   mi->hblks    = freeblks;
+   mi->uordblks = totalmem - totalfree
+                       - DATAOFFSET * (blks - freeblks);
+   mi->fordblks = totalfree;
+   mi->keepcost = DATAOFFSET * blks;
+   return badblk;
+} /* mallocscan */
+
+/* ----------------- */
+
+/* Return summary details about the arena */
+struct mallinfo mallinfo(void)
+{
+   struct mallinfo mi;
+   int    valid;
+
+   if (!initialized) initsysinfo();
+   valid = (NULL == mallocscan(NULL, &mi));
+   return mi;
+} /* mallinfo */
+
+/* ----------------- */
+
+/* Verify the integrity of the arena */
+int malloc_verify(void)
+{
+   struct mallinfo mi;
+   void  *badblk;
+
+   if (!initialized) initsysinfo();
+   badblk = mallocscan(NULL, &mi);
+   if (badblk) showbad(dumpfile, badblk);
+   return (NULL == badblk);
+} /* malloc_verify */
+
+/* ----------------- */
+
+/* dump a complete map of the arena */
+void mallocmap(void)
+{
+   struct mallinfo mi;
+   void  *badblk;
+
+   if (!initialized) initsysinfo();
+   fprintf(dumpfile, "\nmallocmap at level %d\n", dbglevel);
+   xdumpfree(dumpfile);
+   badblk = mallocscan(dumpfile, &mi);
+} /* mallocmap */
+
+/* ----------------- */
+
+/* Set the file on which to display results */
+FILE *malldbgdumpfile(FILE *fp)
+{
+   FILE *tmp;
+
+   if (!initialized) initsysinfo();
+   tmp = dumpfile;
+   if (fp) dumpfile = fp;
+   else dumpfile = stderr;
+   return tmp;
+} /* malldbgdumpfile */
+
+/* ----------------- */
+
+/* The following three functions are called by hooks */
+
+/* Do malloc_verify function via hook ptr */
+/* No output unless a bad block found     */
+/* This is suitable for setting hooks.    */
+static void checkarena(size_t sz, void *bk)
+{
+   struct mallinfo mi;
+   void  *badblk;
+
+   if (bk) sz = sz; /* anti warn */
+   if (dbglevel > 1) {  /* else ignore, safety */
+      if ((badblk = mallocscan(NULL, &mi)))
+         showbad(dumpfile, badblk);
+   }
+} /* checkarena */
+
+/* ----------------- */
+
+static void freenullalert(size_t sz, void *bk)
+{
+   if (bk) sz = sz; /* anti warn */
+   fputs("\n***Freeing NULL\n", dumpfile);
+} /* freenullalert */
+
+/* ----------------- */
+
+static void mallocfailalert(size_t sz, void *bk)
+{
+   if (bk)
+      fprintf(dumpfile,
+              "\n***realloc failed expanding %p to %lu bytes\n",
+              bk, (unsigned long)sz);
+   else
+      fprintf(dumpfile,
+              "\n***malloc failed allocating %lu bytes\n",
+              (unsigned long)sz);
+} /* mallocfailalert */
+
+/* ----------------- */
+
+/* Check that no hooks are presently in use */
+/* uses the locally stored copy of hooks so */
+/* mistakes are possible.  Maybe sysinfo    */
+/* should contain a pointer to the real tbl */
+/* Our own hooks are allowable              */
+static int somehookinuse(void)
+{
+   enum m_hook_kind hk;
+
+   for (hk = malloc_HK; hk < HKCOUNT; hk++) {
+      /* structured for ease of modification */
+      if (NULL            == hookptr[hk]) continue;
+      if (checkarena      == hookptr[hk]) continue;
+      if (freenullalert   == hookptr[hk]) continue;
+      if (mallocfailalert == hookptr[hk]) continue;
+      return 1;
+   }
+   return 0;
+} /* somehookinuse */
+
+/* ----------------- */
+
+/* sethook, bypassing validity checks */
+static M_HOOKFN sethook(enum m_hook_kind which,
+                        M_HOOKFN newhook)
+{
+   M_HOOKFN tmp;
+
+   hookptr[which] = newhook; /* keep local record */
+   tmp = (*sysinfo.hookset)(which, newhook);
+   return tmp;
+} /* sethook */
+
+/* ----------------- */
+
+M_HOOKFN mallsethook(enum m_hook_kind which,
+                     M_HOOKFN newhook)
+{
+   if (!initialized) initsysinfo();
+   if (which >= HKCOUNT) return NULL; /* validity check */
+   if (dbglevel != 1) return NULL;    /* in use, refuse */
+
+   return sethook(which, newhook);
+} /* mallsethook */
+
+/* ----------------- */
+
+static void releaseallhooks(void)
+{
+   enum m_hook_kind hk;
+
+   for (hk = malloc_HK; hk < HKCOUNT; hk++)
+      sethook(hk, NULL);
+} /* freeallhooks */
+
+/* ----------------- */
+
+static inline void setfreenullhook(void)
+{
+   sethook(free_null_HK, freenullalert);
+} /* setfreenullhook */
+
+/* ----------------- */
+
+static inline void setmallocfailhook(void)
+{
+   sethook(malloc_fail_HK, mallocfailalert);
+} /* setmallocfailhook */
+
+/* ----------------- */
+
+static inline void setverifyhooks(void)
+{
+   sethook(malloc_HK,  checkarena);
+   sethook(free_HK,    checkarena);
+   sethook(realloc_HK, checkarena);
+} /* setverifyhooks */
+
+/* ----------------- */
+
+/* level  action
+      0   Only passive checks
+      1   Passive checks, hook setting enabled
+      2   Checks on each alloc/realloc, no hooks allowed
+      3   Same, but aborts if fault found, signals malloc_fail
+      4   Same, but signals on free(NULL)
+
+   A level value outside 0..4 is rejected.
+   Returns current debug_level (before any change).
+*/
+int malloc_debug(int level)
+{
+   int oldlevel;
+
+   if (!initialized) initsysinfo();
+   oldlevel = dbglevel;
+   if ((level >= 0) && (level <= 4) && (level != oldlevel)) {
+      if ((oldlevel < 2) && (level >= 2)) {
+         if (somehookinuse()) { /* refuse */
+            fprintf(dumpfile, "\n***malldbglvl refused\n");
+            return oldlevel;
+         }
+      }
+      /* Either all hooks free or our own, or level < 2 */
+      /* The change is feasible, level is changed and valid */
+      dbglevel = level;
+      releaseallhooks();
+      switch (level) { /* falling through */
+case 4:  setfreenullhook();
+case 3:  setmallocfailhook();
+case 2:  setverifyhooks();
+default: break;
+      } /* switch (level) */
+   } /* valid level change */
+   return oldlevel;
+} /* malloc_debug */
+
+/* -------- malldbg.c ----------- */
diff --git a/gcc/config/i386/nmalloc/malldbg.h b/gcc/config/i386/nmalloc/malldbg.h
new file mode 100644
index 000000000..4bad8f425
--- /dev/null
+++ b/gcc/config/i386/nmalloc/malldbg.h
@@ -0,0 +1,50 @@
+/* -------- malldbg.h ----------- */
+
+/* Copyright (c) 2003 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@worldnet.att.net>
+*/
+
+#ifndef malldbg_h
+#define malldbg_h
+
+/* This is to be used in conjunction with a version of
+   nmalloc.c compiled with:
+
+     gcc -DNDEBUG -o malloc.o -c nmalloc.c
+
+   after which linking malldbg.o and malloc.o will
+   provide the usual malloc, free, realloc calls.
+   Both malloc.o and malldbg.o can be components
+   of the normal run time library.
+*/
+
+#include <stddef.h>
+#include "sysquery.h"
+
+struct mallinfo {
+   int arena;           /* Total space being managed */
+   int ordblks;         /* Count of allocated & free blocks */
+   int smblks;
+   int hblks;           /* Count of free blocks */
+   int hblkhd;          /* Size of the 'lastsbrk' block */
+   int usmblks;
+   int fsmblks;
+   int uordblks;        /* Heap space in use w/o overhead */
+   int fordblks;        /* Total space in free lists */
+   int keepcost;        /* Overhead in tracking storage */
+};
+
+struct mallinfo mallinfo(void);
+int             malloc_verify(void);
+int             malloc_debug(int level);
+void            mallocmap(void);
+FILE           *malldbgdumpfile(FILE *fp);
+M_HOOKFN        mallsethook(enum m_hook_kind which,
+                            M_HOOKFN newhook);
+
+#endif
+/* -------- malldbg.h ----------- */
diff --git a/gcc/config/i386/nmalloc/memalign.c b/gcc/config/i386/nmalloc/memalign.c
new file mode 100644
index 000000000..5389e8798
--- /dev/null
+++ b/gcc/config/i386/nmalloc/memalign.c
@@ -0,0 +1,137 @@
+
+/* 1------------------1 */
+
+/* The remaining code is an attempt to graft on the
+   memalign function.  It can do with improvement.
+   The idea is to do this without disturbing the
+   already checked and debugged package.
+
+   In units of ALIGN (== 8 here) bytes.  The value of
+   DATAOFFSET depends on SAVEMEMORY, either 2 or 3.  The
+   following assumes SAVEMEMORY is set and DATAOFFSET = 2.
+
+   Initial malloc block (alignment > ALIGN):
+    ____________________________________________________
+   |          |            |              |             |
+   |          |            |              |             |
+   |DATAOFFSET|   size     |  xtra for    |             |
+   | control  |            | realignment  |             |
+   |__________|____________|______________|_____________|
+              ^
+              ^
+A: If this point is aligned, then we simply cut the assignment.
+   Immediate use of realloc will avoid any data movement.
+
+B: Worst case when this is 1 (DELTA) above an alignment point.
+   becomes (since alignment > ALIGN and thus
+                  alignment >= DATAOFFSET):
+    ____________________________________________________
+   |          |            |              |             |
+   |alignment |DATAOFFSET  |              |     0       |
+   | - DELTA  |   for      |    size      |  nothing    |
+   |to freespc| control    |              | needed BUT: |
+   |________ _|____________|______________|_____________|
+                           ^              ^
+                           ^              ^
+   Now this point is suitably aligned     ^
+    ALIGNMENT - DELTA >= DATAOFFSET       ^
+                                          ^
+   For the intermediate cases make sure this block to be moved
+   to free space is at least 3 units long.  Easiest is to set
+   the initial extra value so that this worst case is 3, not 0
+ ?  This makes the initial extra size alignment+4 ??
+
+C: The initial alignment point is 1 low.  (DELTA = -1)
+    ____________________________________________________
+   |          |            |              |             |
+   |    3     |            |              |             |
+   |control+1 |    2       |    size      |  xtra-3     |
+   |to freespc|  control   |              |to freespc   |
+   |__________|____________|______________|_____________|
+                           ^              ^
+                           ^              ^
+   This point is aligned --^     This goes to freespace
+
+D: The initial alignment point is 2 low.  (DELTA = -2)
+    ____________________________________________________
+   |          |            |              |             |
+   |          |            |              |             |
+   |          |    2       |    size      |             |
+   |          |  control   |              |to freespc   |
+   |__________|____________|______________|_____________|
+                           ^              ^
+                           ^              ^
+   This point is aligned --^     This goes to freespace
+
+   The minimum of 3 units to freespace is because 2 are
+   required for control, and without further space the
+   block is useless.  In fact it needs the further space
+   to implement the free block linking mechanism.
+*/
+
+/* 1------------------1 */
+
+/* Check alignment is a non-zero power of two <= 65536. */
+/* Return 0 if so, else non-zero                        */
+static inline int invalid(size_t alignment)
+{
+   if (alignment && (alignment <= 65536))
+      return (alignment & (alignment - 1));
+   else return 1;  /* 0 is invalid */
+} /* invalid */
+
+/* 1------------------1 */
+
+/* define the XTRA storage needed to assure chopping up feasible
+   and that chopped off storage is large enough to be usable.
+   XTRA is always a multiple of ALIGN.
+*/
+
+#define XTRA (alignment + 3 * ALIGN)
+
+/* 1------------------1 */
+
+/* return memory aligned so that the return value is a */
+/* multiple of alignment.  Otherwise similar to malloc */
+/* alignment MUST be a power of two, max 65536.        */
+void *nmemalign(size_t size, size_t alignment)
+{
+   memblockp m = NULL, m1;
+   void     *minit;
+   ulong     misalign;
+   size_t    szneed, sz = size; /* preserve arg for hooks */
+
+   /* compute the rounded up size needed */
+   if (!sz) sz++;     /* avoid any 0 space allocation */
+   szneed = roundup(sz);
+   DBGPRTM("memalign(%5lu) [%5lu] %5lu", sz, szneed, alignment);
+   DBGEOLN;
+
+   if (size < ((ulong)(INT_MAX - 65536)) &&
+       !invalid(alignment)) {
+      /* parameters seem to be valid */
+      if (alignment <= ALIGN) {
+         DBGPRTM("  alignment value ignored"); DBGEOLN;
+         return nmalloc(szneed);                      /* EXIT */
+      }
+      else if ((minit = nmalloc(szneed + XTRA))) {
+         /* alignment >= 2*ALIGN and power of 2 if here */
+         misalign = (ulong)minit % alignment;
+         DBGPRTM("  misalignment = %d", misalign);
+         if (0 == misalign) { /* aligned, just return XTRA */
+            DBGPRTM(" Just realloc the block."); DBGEOLN;
+            return nrealloc(minit, size);             /* EXIT */
+         }
+         else {
+            /* two or more chunks to release */
+            /* for now, just return NULL and have a leak */
+            DBGPRTM("  Complex case, release multiple chunks");
+            DBGEOLN;
+         }
+      } /* alignment > ALIGN */
+   } /* valid parameters */
+   if (m) return PTR(m);
+   else return NULL;
+} /* nmemalign */
+
+/* --------- nmalloc.c ----------- */
diff --git a/gcc/config/i386/nmalloc/nmalloc.c b/gcc/config/i386/nmalloc/nmalloc.c
new file mode 100644
index 000000000..ecaf4eb80
--- /dev/null
+++ b/gcc/config/i386/nmalloc/nmalloc.c
@@ -0,0 +1,1032 @@
+/* --------- nmalloc.c ----------- */
+
+/* Copyright (c) 2003, 2007 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@maineline.net>
+     (html mail will probably be summarily ignored)
+
+   Revised 2007-01-04 to include calloc.
+   Revised 2007-01-28 per bug report by Florian Xaver. *f1*
+*/
+
+/* A re-implementation of malloc and friends for DJGPP 2.03/2.04
+   This includes many bits modeled after DJs original scheme.
+   This is NOT portable - it builds in knowledge of int size etc.
+   i.e. unsigned ints and pointers are both 32 bits (size 4)
+
+   The system is NOT thread and interrupt safe, although use of a
+   suitable critical section call could make it such.  Nothing
+   herein executes for any unusual length of time (with NDEBUG).
+*/
+
+/* Some critical tuning constants. Search for them:
+   MINSBRK    controls minimal access to sbrk
+   ALIGN      controls alignment of pointers
+   SAVEMEMORY reduces overhead at expense of checkability
+   INT_MAX    (system) controls maximum allocation quantum.
+*/
+
+/* To avoid unexpected problems, the default has been changed
+   so we now require NEWMALLDBG to enable the original action
+*/
+
+#ifndef NEWMALLDBG
+#  undef  NDEBUG
+#  define NDEBUG
+#else
+#  undef  NDEBUG
+#endif
+
+#ifndef NDEBUG
+   /* diddle these to control areas debugged */
+#  define DEBUGM 1     /* malloc */
+#  define DEBUGF 1     /* free */
+#  define DEBUGR 1     /* realloc */
+#else
+#  define DEBUGM 0
+#  define DEBUGF 0
+#  define DEBUGR 0
+   /* the HOOKABLE variant is only for development   */
+   /* It allows some other package to define malloc, */
+   /* free, realloc, and to call this package.       */
+#  ifndef HOOKABLE
+#     define nmalloc  malloc
+#     define nfree    free
+#     define nrealloc realloc
+#     define nmemalign memalign
+#     define ncalloc  calloc
+#  else
+#     define nmalloc  _malloc
+#     define nfree    _free
+#     define nrealloc _realloc
+#     define nmemalign _memalign
+#     define ncalloc   calloc  /* can't hook this */
+#  endif
+#  define fakesbrk sbrk
+#endif
+
+#define SAVEMEMORY 1  /* 0/1 to use/eliminate extra storage */
+
+typedef unsigned char byte;
+typedef unsigned int  ulong;
+
+#include <stddef.h> /* offsetof() */
+#include <stdlib.h> /* malloc, free, realloc, exit, EXIT_FAILURE */
+#include <unistd.h> /* sbrk, write */
+#include <signal.h> /* raise, SIGABRT */
+#include <string.h> /* strlen, memmove, memcpy, memset */
+#include <limits.h> /* CHAR_BIT, INT_MAX */
+#include "sysquery.h" /* available debugger linkages */
+
+/* system dependant magic.  Only STDIN, STDERR used */
+enum {STDIN = 0, STDOUT, STDERR, STDAUX, STDPRN}; /* handles */
+
+/* Incorporation into the system should require deleting the
+   following <nmalloc.h>, changing all references to nmalloc
+   to malloc, nfree to free, nrealloc to realloc.  Change the
+   single call to fakesbrk to sbrk.  Also normally set all
+   DEBUGx values above to 0 in place of 1.  Later many
+   routines will be made inline.  For debugging compilations
+   are done with "/Dinline= " switch.  For production use
+   the "/DNDEBUG=1" switch, which does all the above except
+   the inlining. But see NEWMALLDBG above.
+*/
+#ifndef NDEBUG
+#  include "nmalloc.h" /* while testing before name changes */
+#else
+#  ifdef HOOKABLE
+#     include "hookmem.h"
+#  endif
+#endif
+
+/* ============================================================
+   Macros and storage for debugging, works before init on DJGPP
+   WARNING - GNU extensions used here!!
+   Note: many messages are designed for easy search with grep
+         and also serve as comments.
+*/
+#if DEBUGM || DEBUGF || DEBUGR
+#  include <stdio.h>     /* sprintf, for DEBUG only */
+#  include "fakesbrk.h"  /* repeatable sbrk */
+#  define EOL "\n"       /* for DEBUG printouts only, allow crlf */
+   static char  dbgbuff[1024];
+   static char *dbgbp = dbgbuff;
+#  define DBGFLUSH do {if (dbgbp != dbgbuff) { \
+                         /* write it out */ \
+                         write(STDOUT, dbgbuff, strlen(dbgbuff)); \
+                         dbgbp = dbgbuff; \
+                      } \
+                   } while (0)
+#  define DBGEOLN do { \
+                     DBGPRT(EOL); \
+                     DBGFLUSH; \
+                  } while (0)
+#  define DBGPRT(msg, args...) do { \
+                    if ((dbgbp - dbgbuff) > 924) DBGFLUSH; \
+                    dbgbp +=sprintf(dbgbp, msg , ## args); \
+                 } while (0)
+#  define SHOWBLK(m, id) showblock(m, id)
+#  if DEBUGM
+#     define DBGPRTM(msg, args...) \
+                     dbgbp +=sprintf(dbgbp, msg , ## args)
+#     define SHOWBLKM(m, id) showblock(m, id)
+#  else
+#     define DBGPRTM(msg, args...)
+#     define SHOWBLKM(m, id)
+#  endif
+#  if DEBUGF
+#     define DBGPRTF(msg, args...) \
+                     dbgbp +=sprintf(dbgbp, msg , ## args)
+#     define SHOWBLKF(m, id) showblock(m, id)
+#  else
+#     define DBGPRTF(msg, args...)
+#     define SHOWBLKF(m, id)
+#  endif
+#  if DEBUGR
+#     define DBGPRTR(msg, args...) \
+                     dbgbp +=sprintf(dbgbp, msg , ## args)
+#     define SHOWBLKR(m, id) showblock(m, id)
+#  else
+#     define DBGPRTR(msg, args...)
+#     define SHOWBLKR(m, id)
+#  endif
+#else
+#  define DBGFLUSH
+#  define DBGEOLN
+#  define DBGPRT(msg, args...)
+#  define SHOWBLK(m, id)
+#  define DBGPRTM(msg, args...)
+#  define SHOWBLKM(m, id)
+#  define DBGPRTF(msg, args...)
+#  define SHOWBLKF(m, id)
+#  define DBGPRTR(msg, args...)
+#  define SHOWBLKR(m, id)
+#endif
+
+/* This is intended to allow finding the header area from
+   the address of the immediately adjacent memblocks.
+   The guardxx avoid destruction by an off by one pointer
+   and serve no real logical purpose.  Note that in some
+   cases sz may be recovered from next or next may be
+   recovered from sz.
+*/
+typedef struct memblock {
+   struct memblock *prev;   /* 1st, protect against overrun */
+   struct memblock *next;   /* makes this less clobberable  */
+   ulong            sz;                 /* of this memblock */
+   /* An allocated block has the next two (1) fields NULL */
+   /* A free block has them both non-NULL  */
+   struct memblock *nextfree;
+   struct memblock *prevfree; /* actually data w/SAVEMEMORY */
+#if SAVEMEMORY == 0
+   ulong            guardlo;     /* may hold size requested */
+#endif
+   /* here lies the actual assigned storage                 */
+   /* so the following must be addressed by adding offset   */
+   /* storage must always be a multiple of 8 in size        */
+   /* thus these items are fictional, i.e. for zero data    */
+} memblock, *memblockp;
+
+/* Notice that with SAVEMEMORY the prevfree field only
+   exists for free blocks; it reuses data space.  This
+   is why we cannot allow 0 sized blocks.
+*/
+#if SAVEMEMORY
+#  define DATAOFFSET (offsetof(memblock, prevfree))
+#else
+#  define DATAOFFSET sizeof(memblock)
+#endif
+
+/* conversion and access macros */
+#define MEMBLKp(p) (memblockp)((byte*)(p) - DATAOFFSET)
+#define PTR(m)     (void*)((byte*)(m) + DATAOFFSET)
+
+#define ALIGN 8
+#define ALIGNMASK (ALIGN-1)
+
+/* We can never use an allocation smaller than this */
+#define MINSAVE   (ALIGN + DATAOFFSET)
+
+/* Alternate form of NULL to distinguish free lists
+   This is self protection, because freehdrs[1] is otherwise
+   unused.  freehdrs[0] is reserved to hold lastsbrk.  In turn
+   this means that ALIGN must be >= 4.
+*/
+#define NONE (memblockp)&freehdrs[1]
+
+/* Magic constants.  MINSBRK must be MINSAVE or larger */
+enum {NFLISTS = (int)(CHAR_BIT * sizeof(size_t)), MINSBRK = 1024};
+
+/* ============== Globals ============= */
+
+/* Headers of lists holding free blocks of 2**2 thru 2**31 size */
+/* freehdr[n] holds items sized 2**n thru 2**(n+1) - 1          */
+
+static memblockp freehdrs[NFLISTS]; /* yes, low indices are waste */
+#define lastsbrk freehdrs[0]
+
+/* keep track of the bases of each new sbrk block */
+#define MAXSBRKS 100     /* I have never seen more than 5 needed */
+static int   lastsbrkbgn;       /* zeroed on load */
+static void *sbrkbgn[MAXSBRKS]; /* NULLS on load */
+
+/* This holds pointers to hooks, initialized to NULLs */
+/* see enum m_hook_kind for actual identifiers in sysquery.h */
+static M_HOOKFN hookptr[HKCOUNT];
+
+/* Forward declaration to allow sysquery init below */
+static M_HOOKFN sethook(enum m_hook_kind which,
+                        M_HOOKFN         newhook);
+
+/* This allows a clean connection to debugging software */
+static struct _sysquery sysquery = {
+        DATAOFFSET,
+#if SAVEMEMORY
+        0xff,
+#else
+        offsetof(memblock, guardlo),
+#endif
+        offsetof(memblock, sz),
+        offsetof(memblock, prevfree),
+        offsetof(memblock, nextfree),
+        offsetof(memblock, next),
+        offsetof(memblock, prev),
+        sizeof(memblock),
+        NONE,         /* also &freehds[1] */
+        &sbrkbgn,     /* anchors field */
+        sethook       /* hookset field */
+};
+
+/* 1------------------1 */
+
+/* This can return the above values, hopefully in a register */
+/* The use of NONE in nextfree, prevfree may cause confusion */
+struct _sysquery _sysmalloc(void)
+{
+   return sysquery;
+} /* _sysmalloc */
+
+/* 1------------------1 */
+
+#if DEBUGM || DEBUGF || DEBUGR
+
+/* These two routines are actually available in any user  */
+/* application by use of the _sysmalloc call above.  They */
+/* are retained here to show the derivation of user code, */
+/* and in case needed during system initialization.       */
+
+static void showblock(memblockp m, char *id)
+{
+   if (m) {
+      DBGPRT(" %s %p sz=%u nxt=%p prv=%p nxtf=",
+             id, m, m->sz, m->next, m->prev);
+      if (m->nextfree) {
+         if (NONE == m->nextfree)
+            DBGPRT("NONE prvf=");
+         else
+            DBGPRT("%p prvf=", m->nextfree);
+         if (NONE == m->prevfree)
+            DBGPRT("NONE");
+         else
+            DBGPRT("%p", m->prevfree);
+      }
+      else DBGPRT("0");
+   }
+   else
+      DBGPRT(" %s NULL", id);
+} /* showblock */
+
+/* 1------------------1 */
+
+/* dump the entire free chain group */
+static void dumpfree(void)
+{
+   int       i;
+   memblockp m;
+
+   for (i = 0; i < NFLISTS; i++) {
+      if ((m = freehdrs[i])) {
+         DBGPRT(EOL "%2d: ", i);
+         do {
+            DBGPRT("%p(%u)->", m, m->sz);
+            m = m->nextfree;
+         } while (m && (NONE != m));
+         DBGPRT("0");
+         m = freehdrs[i];
+         while (m && (NONE !=m )) {
+            SHOWBLK(m, EOL "     ");
+            m = m->nextfree;
+         }
+      }
+   }
+   DBGEOLN;
+} /* dumpfree */
+#endif
+
+/* 1------------------1 */
+
+/* This is accessible only through the pointer    */
+/* returned in the sysquery record by _sysmalloc. */
+/* Only of use in the malldbg package.            */
+/* No safeties implemented here - see malldbg     */
+static M_HOOKFN sethook(enum m_hook_kind which,
+                        M_HOOKFN         newhook)
+{
+   M_HOOKFN tmp = NULL;
+
+   if (which < HKCOUNT) {
+      tmp = hookptr[which];
+      hookptr[which] = newhook;
+   }
+   return tmp;
+} /* sethook */
+
+/* 1------------------1 */
+
+/* inserts bases of sbrk chains in sbrkbgn array  */
+/* This ensures we can find all controlled memory */
+/* gets called when we find an unexpected sbrk.   */
+/* Note that if the sbrk was unaligned bk has now */
+/* been aligned, and we have no record of wastage */
+/* As long as nothing is returned to sbrk this is */
+/* not a problem.  This only for the malldbg pkg. */
+static void recordnewsbrk(memblockp bk)
+{
+   int i;
+
+   if (lastsbrkbgn < MAXSBRKS - 1) {
+      /* This check for a previous entry is probably not
+         needed, but it is a rare occurance, so safety */
+      for (i = 0; i < lastsbrkbgn; i++) {
+         if (bk == sbrkbgn[i]) return;
+      }
+      sbrkbgn[lastsbrkbgn++] = bk;
+   }
+/* else we abandon trying to keep track */
+} /* recordnewsbrk */
+
+/* 1------------------1 */
+
+static inline ulong roundup(size_t sz)
+{
+   ulong size;
+
+   size = ((sz + ALIGNMASK) & ~ALIGNMASK) + DATAOFFSET;
+   return size;
+} /* roundup */
+
+/* 1------------------1 */
+
+static inline int size2bucket(ulong sz)
+{
+   int b;
+
+   for (b = 0; sz; sz >>= 1, b++) continue;
+   return b;
+} /* size2bucket */
+
+/* 1------------------1 */
+
+static void badcallabort(const char *msg, int lgh, memblockp m)
+{
+#if DEBUGM || DEBUGF || DEBUGR
+   DBGEOLN;
+#endif
+   write(STDERR, msg, lgh);
+   write(STDERR, ": memory fouled\n", 16);
+#if DEBUGM || DEBUGF || DEBUGR
+   SHOWBLK(m, "");
+   dumpfree();
+#else
+   (void)m;  /* anti unused warning */
+#endif
+   raise(SIGABRT);
+} /* badcallabort */
+
+/* 1------------------1 */
+
+#define ISFREE(m) (m && (m != NONE) && m->nextfree && m->prevfree)
+#if SAVEMEMORY
+#define FOULED(m) (!lastsbrk || m->nextfree)
+#else
+#define FOULED(m) (!lastsbrk || (m->guardlo != 0xDEADBEEF))
+#endif
+
+/* 1------------------1 */
+
+/* Unlike rmvfromfree, this extracts a block that */
+/* may be buried deep within the free list by     */
+/* unlinking.  m is already known a free block    */
+static void extractfree(memblockp m)
+{
+   int       b;
+   memblockp mnxtf, mprvf;
+
+   if (m) {
+      b = size2bucket(m->sz);
+      SHOWBLKF(m, EOL "  extractfree blk");
+
+      /* ease further tests */
+      if (NONE == (mnxtf = m->nextfree)) m->nextfree = NULL;
+      if (NONE == (mprvf = m->prevfree)) m->prevfree = NULL;
+
+      if      (m->nextfree) m->nextfree->prevfree = mprvf;
+
+      if      (m->prevfree) m->prevfree->nextfree = mnxtf;
+      else if (m->nextfree) freehdrs[b] = mnxtf;
+      else                  freehdrs[b] = NULL;
+
+      /* mark the block non-free */
+      m->nextfree = m->prevfree = NULL;
+
+      DBGPRTF(EOL "  freehdrs %d", b);
+      SHOWBLKF(freehdrs[b], "is blk");
+   }
+} /* extractfree */
+
+/* 1------------------1 */
+
+static inline memblockp combinelo(memblockp m)
+{
+   memblockp m1;
+
+   m1 = m;
+   if (ISFREE(m->prev)) {
+      if (m->prev->next != m) {
+         badcallabort("combinelo", 9, m);
+         exit(EXIT_FAILURE);  /* prevent user trapping SIGABRT */
+      }
+      m1 = m->prev;
+      extractfree(m1);
+      if (NULL != (m1->next = m->next))
+         m1->next->prev = m1;
+      m1->sz += m->sz;
+   }
+   return m1;
+} /* combinelo */
+
+/* 1------------------1 */
+
+/* used to combine with lastsbrk, so no ISFREE test */
+/* because lastsbrk is not kept in the free lists   */
+static memblockp combinehi(memblockp m)
+{
+   memblockp m1;
+
+   if (m && m->next) {
+      SHOWBLK(m,       EOL "  combinehi");
+      SHOWBLK(m->next, EOL "  with");
+      if (m->next->prev != m) {
+         badcallabort("combinehi", 9, m);
+         exit(EXIT_FAILURE);  /* prevent user trapping SIGABRT */
+      }
+      m1 = m->next;
+      if (m1 != lastsbrk) extractfree(m1);
+      if (NULL != (m->next = m->next->next))
+         m->next->prev = m;
+      m->sz += m1->sz;
+      SHOWBLK(m,       EOL "  giving");
+   }
+   return m;
+} /* combinehi */
+
+/* 1------------------1 */
+
+/* This takes care of marking the block as free */
+static void mv2freelist(memblockp m)
+{
+   int       b;
+
+   if (m) {
+      if (ISFREE(m->next)) m = combinehi(m);
+      b = size2bucket(m->sz);
+      DBGPRT(EOL "  mv2freelist %d", b); SHOWBLK(m, "blk");
+      if (lastsbrk && (m->next == lastsbrk)) {
+         SHOWBLKF(lastsbrk, EOL "  Combine with lastsbrk");
+         lastsbrk = combinehi(m);
+         lastsbrk->nextfree = lastsbrk->prevfree = NULL;
+         SHOWBLKF(lastsbrk, EOL "  Resulting in lastsbrk");
+         return;
+      }
+      else if (freehdrs[b]) {
+         m->nextfree = freehdrs[b];
+         freehdrs[b]->prevfree = m;
+      }
+      else {
+         m->nextfree = NONE;
+      }
+      m->prevfree = NONE;
+      if (freehdrs[b]) freehdrs[b]->prevfree = m;
+      freehdrs[b] = m;
+      DBGPRT(EOL "  Exit mv2freelist");
+   }
+} /* mv2freelist */
+
+/* 1------------------1 */
+
+/* this always marks the block as non-free */
+static inline void rmvfromfree(memblockp m)
+{
+   int b;
+
+   if (m) {
+      b = size2bucket(m->sz);
+      DBGPRTM(EOL "  rmvfromfree %d", b); SHOWBLKM(m, "blk");
+      if (m != freehdrs[b]) {
+         DBGPRTM(" NOT FREE");
+         badcallabort("rmvfromfree", 11, m);
+         exit(EXIT_FAILURE);  /* prevent user trapping SIGABRT */
+      }
+      else {
+         if (NONE == m->nextfree)
+            freehdrs[b] = NULL;
+         else {
+            freehdrs[b] = m->nextfree;
+            freehdrs[b]->prevfree = NONE;
+         }
+#if SAVEMEMORY
+         m->nextfree = NULL;
+#else
+         m->nextfree = m->prevfree = NULL;
+#endif
+         DBGPRTM(EOL "  freehdrs %d", b);
+         SHOWBLKM(freehdrs[b], "is blk");
+      }
+   }
+} /* rmvfromfree */
+
+/* 1------------------1 */
+
+static int searchfree(ulong szneed)
+{
+   int b;
+
+   b = size2bucket(szneed);
+   DBGPRT(EOL "  freelist search from bucket %d", b);
+
+   if (! freehdrs[b] || (freehdrs[b]->sz < szneed)) {
+      do {
+         b++;
+      } while ((b < NFLISTS) && ! freehdrs[b]);
+   }
+   /* if found we will break off a piece and housekeep */
+   if (b < NFLISTS)
+      DBGPRT(", using %d", b);
+   else {
+      b = 0;
+      DBGPRT(", none found");
+   }
+   return b;
+} /* searchfree */
+
+/* 1------------------1 */
+
+/* The higher portion is returned in *mp,     */
+/* the lower portion via the function return. */
+/* and the lower portion is marked non-free   */
+static memblockp split(memblockp *mp, ulong sz)
+{
+   memblockp m1, m;
+
+   m = *mp;
+   m1 = (memblockp)((char *)m + sz);
+   if (m->sz < (sz + DATAOFFSET)) {
+      badcallabort("memblockpsz", 11, m);
+      exit(EXIT_FAILURE);  /* prevent user trapping SIGABRT */
+   }
+   memcpy(m1, m, DATAOFFSET);
+   m1->prev = m;
+   m1->sz = m->sz - sz;
+   m->next = m1;
+   m->sz = sz;
+   m->nextfree = NULL;
+#if SAVEMEMORY
+#else
+   m->prevfree = NULL;
+#endif
+   *mp = m1;
+   if (m1->next) {
+      if (m1->next->prev != m) {
+         badcallabort("memblockpnxt", 12, m1);
+         exit(EXIT_FAILURE);  /* prevent user trapping SIGABRT */
+      }
+      m1->next->prev = m1;
+   }
+   SHOWBLKM(m, EOL "  split returns");
+   return m;
+} /* split */
+
+/* 1------------------1 */
+
+/* Get the memory, see if it extends the present lastsbrk
+   If not, put the old lastsbrk into the appropriate freelist
+      and replace lastsbrk by the new, setting the headers up
+   else update the size markers in lastsbrk.  When done either
+   lastsbrk can supply the memory szextra, or NULL is returned.
+   A revised lastsbrk block is marked as non-free.
+*/
+static memblockp extendsbrk(ulong szxtra)
+{
+   memblockp  m;
+   byte      *expected;
+   int        alignerr;
+   int        aligndelta;
+
+   DBGPRTM(", extending sbrk");
+
+   /* we have to ensure that the new lastsbrk always has    */
+   /* room to both realign and to leave a header when split */
+   szxtra += (2 * ALIGN + DATAOFFSET);
+   if (szxtra < MINSBRK) szxtra = MINSBRK;
+
+   if (lastsbrk)
+      expected = ((byte*)lastsbrk) + lastsbrk->sz;
+   else expected = NULL;
+
+   if ((aligndelta = (ulong)expected & ALIGNMASK)) {
+      /* lastsbrk end was misaligned, try to align end of this */
+      szxtra += ALIGN - aligndelta;
+      aligndelta = 0;
+   }
+
+   m = fakesbrk(szxtra);
+   if (-1 == (int)m) return NULL;
+   else {
+      if ((byte*)m == expected) {  /* Extending size of lastsbrk */
+         DBGPRTM(EOL "  sbrk(%4u=0x%05x) got expected %p"
+                     " lastsbrk %p sz %d",
+                       szxtra, szxtra, expected,
+                       lastsbrk, expected - (byte*)lastsbrk);
+         lastsbrk->sz += szxtra;
+         m = lastsbrk;
+      }
+      else {
+         /* Here we have to check & fix alignment */
+         DBGPRTM(EOL "=>sbrk(%4u=0x%05x) got UNEXPECTED %p/%p"
+                     " lastsbrk %p sz %d",
+                       szxtra, szxtra, m, expected,
+                       lastsbrk, expected - (byte*)lastsbrk);
+         if ((alignerr = (ALIGNMASK & (ulong)m))) {
+/*f1*/      m = (memblockp)((char*)m +
+                            (aligndelta = ALIGN - alignerr));
+            DBGPRTM(", szerr %d/%d", aligndelta, alignerr);
+         }
+         m->sz = szxtra - aligndelta; /* discard alignerr bytes */
+         m->prev = m->next = NULL;
+#if SAVEMEMORY
+         m->nextfree = NULL;
+#else
+         m->nextfree = m->prevfree = NULL;
+         m->guardlo    = 0xDEADBEEF;
+#endif
+         mv2freelist(lastsbrk);
+         lastsbrk = m;
+         recordnewsbrk(m); /* save in list of chains */
+      }
+   }
+   return m;
+} /* extendsbrk */
+
+/* 1------------------1 */
+
+/* The mechanism:
+   All available memory is kept on the free list, and all adjacent
+   blocks, assigned or free, are linked by next/prev fields in order
+   of address.  Freehdrs[n] holds the first of a list of free blocks
+   of sizes between 2**n and 2**n+1. A pointer to the free portion
+   of the block last acquired via sbrk is held in lastsbrk.
+
+   All blocks on the freelist are marked by having a non-NULL value
+   in the nextfree or prevfree fields.  The special value NONE is
+   used to replace NULL to terminate these lists.  Because of the
+   misalignment possibilities it is necessary to keep accurate byte
+   count lengths in the sz component of lastsbrk.
+
+   1.  An allocation is made from the first fit freehdrs list. Note
+   that there MAY be a usable piece in the next lower freehdr, but
+   that is ignored because we do not want to search possibly long
+   lists.  The block is removed from the freelist, and any excess
+   space is broken off (if large enough to be usable) and assigned
+   to the appropriate free list.
+
+   2.  If no suitable free block is found, allocation is attempted
+   from the last block created by an sbrk call.  Such a block must
+   be large enough to maintain an sbrk pointer after splitting off
+   the desired allocation.
+
+   3.  If this fails a new block is created (or extended) via an
+   sbrk call.  If possible, the previous lastsbrk block is extended.
+   If extension is not possible the remains of the old block alone
+   is placed in the freelist.  This (non-extension) case results in
+   the prev field of the lastsbrk block being NULL.  The next field
+   of the lastsbrk block is always NULL. In this case only it is
+   necessary to check and correct memory alignment.
+
+   Insertion is always done into the start of any given freelist.
+   Thus there is no list walking needed.  Similarly, any block is
+   always removed from the head of the appropriate freelist.
+
+   It is assumed that sbrk will never return a lower address than
+   did a previous sbrk.  I am not sure if this affects anything. I
+   believe it does not.
+*/
+void *nmalloc(size_t size)
+{
+   memblockp m = NULL, m1;
+   ulong     szneed;
+   int       b;
+   void     *p = NULL;
+   size_t    sz = size; /* preserve arg for hooks */
+
+   /* compute the rounded up size needed */
+   if (!sz) sz++;     /* avoid any 0 space allocation */
+   szneed = roundup(sz);
+   DBGPRTM("malloc(%5lu) [%5u]", sz, szneed);
+   SHOWBLKM(lastsbrk, EOL "  lastsbrk");
+
+   /* Check for oversize allocation request */
+   if (szneed < ((ulong)(INT_MAX - 65536))) {
+      /* search the free lists for one */
+      b = searchfree(szneed);
+
+      if (b) {
+         rmvfromfree(m1 = freehdrs[b]);
+         if (m1->sz < szneed + MINSAVE)
+            m = m1;
+         else {
+            m = split(&m1, szneed);
+            mv2freelist(m1);
+         }
+      }
+      else if (lastsbrk &&
+              (lastsbrk->sz >= (szneed + DATAOFFSET))) {
+         m = split(&lastsbrk, szneed);
+      }
+      /* if not found get more from system */
+      else if ((m1 = extendsbrk(szneed))) {
+         if (m1->sz < szneed + MINSAVE) {
+            m = m1;
+            DBGPRTM(EOL "**FOULED lastsbrk\a");
+         }
+         else {
+            m = split(&lastsbrk, szneed);
+         }
+      }
+   /* else abject_failure(); */
+   /* abject_failure COULD check the first possible freehdrs */
+   /* list as a last chance to find some suitable memory     */
+
+      if (m) p = PTR(m);
+      else {
+         DBGPRTM(dbgbp, ", FAILURE");
+         p = NULL;
+      }
+   }
+/* else m and p are NULL for oversize; */
+
+#if DEBUGM
+   DBGPRTM(EOL "returns %p", p);
+   if (m) DBGPRTM("(%lu)", m->sz - DATAOFFSET);
+   DBGEOLN;
+#endif
+
+   if (hookptr[malloc_HK]) hookptr[malloc_HK](size, p);
+   if (!p && hookptr[malloc_fail_HK])
+      hookptr[malloc_fail_HK](size, NULL);
+
+   return p;
+} /* nmalloc */
+
+/* 1------------------1 */
+
+static void dofree(memblockp m)
+{
+   /* mark the block free */
+   m->nextfree = m->prevfree = NONE;
+
+   /* try to combine with lower or higher blocks in memory */
+   if (ISFREE(m->next)) m = combinehi(m);
+   if (ISFREE(m->prev)) m = combinelo(m);
+
+   if (lastsbrk && (lastsbrk == m->prev) )
+      DBGPRTF(EOL "**Found decreasing sbrk!! FOUL");
+   else mv2freelist(m);
+} /* dofree */
+
+/* 1------------------1 */
+
+void nfree(void *ptr)
+{
+   memblockp m;
+
+   if (hookptr[free_HK]) hookptr[free_HK](0, ptr);
+
+   if (ptr) {
+      m = MEMBLKp(ptr);
+      DBGPRTF("free(%p)", ptr); SHOWBLKF(m, "");
+      if (ISFREE(m) ||     /* bad, refreeing block */
+          FOULED(m) ) {    /* block is fouled */
+         badcallabort("free", 4, m);
+         return;           /* he can trap this SIGABRT */
+      }
+      dofree(m);
+#if DEBUGF
+      DBGEOLN;
+#endif
+   }
+   else if (hookptr[free_null_HK])
+      hookptr[free_null_HK](0, NULL);
+} /* nfree */
+
+/* 1------------------1 */
+
+static memblockp mv2lastsbrk(memblockp m, ulong szneed)
+{
+   memblockp m1;
+
+   m1 = split(&lastsbrk, szneed);
+
+   /* Now m1 is the proposed new block, of the right size */
+   /* links are already revised so copy data from m to m2 */
+   memcpy(PTR(m1), PTR(m), m->sz - DATAOFFSET);
+
+   dofree(m);
+   return m1;
+} /* mv2lastsbrk */
+
+/* 1------------------1 */
+
+void *nrealloc(void *ptr, size_t size)
+{
+   memblockp m, m1, m2;
+   void     *p;
+   ulong     szneed;
+   int       b;
+   size_t    sz = size;
+
+   if (hookptr[realloc_HK]) hookptr[realloc_HK](sz, ptr);
+
+   if (!ptr) {
+      p = nmalloc(sz);
+      if (hookptr[realloc_exit_HK])
+         hookptr[realloc_exit_HK](size, p);
+      return p;
+   }
+
+   m = m1 = MEMBLKp(ptr);
+   if (!sz) sz++;     /* avoid any 0 space allocation */
+   szneed = roundup(sz);
+   DBGPRTR("realloc(%p:%lu[%u])", ptr, sz, szneed);
+   SHOWBLKR(m, EOL "  was");
+   if (ISFREE(m) ||     /* bad, realloc of free block */
+       FOULED(m) ) {    /* storage fouled */
+      badcallabort("realloc", 7, m);
+      p = NULL;
+      goto exeunt;      /* he can trap this SIGABRT */
+   }
+   SHOWBLKR(lastsbrk, EOL "  lastsbrk");
+
+   /* if decreasing simply reduce size and move excess to free */
+   if (szneed <= m->sz) {
+      DBGPRTR(EOL "  Realloc is reducing");
+      if ((m->sz - szneed) >= MINSAVE) {
+         m = split(&m1, szneed);
+         mv2freelist(m1);
+      }
+   /* else just return old pointer, i.e. NOP */
+   }
+   else if (szneed > ((ulong)(INT_MAX - 65536))) {
+      /* reject excessive size request */
+      p = NULL; goto exeunt;
+   }
+   else if (ISFREE(m->next) &&
+            (szneed <= (m->sz + m->next->sz)) ) {
+      /* the 'next' block is free and adequate so use it */
+      DBGPRTR(EOL "  Realloc is combining, next is free");
+      m = m1 = combinehi(m);
+      /* now split off the excess, if any */
+      if ((m->sz - szneed) >= MINSAVE) {
+         m = split(&m1, szneed);
+         mv2freelist(m1);
+      }
+   /* else m is the oversized return block */
+   }
+   else if ((lastsbrk == m->next)  &&
+            ((szneed + MINSAVE) <= (m->sz + lastsbrk->sz)) ) {
+      /* lastsbrk is adequate and adjacent so use it */
+      DBGPRTR(EOL "  Realloc is using lastsbrk to extend");
+      m = m1 = combinehi(m1);
+      m = split(&m1, szneed);
+      lastsbrk = m1;
+   }
+   else if (ISFREE(m->prev) &&
+            (szneed <= (m->sz + m->prev->sz)) ) {
+      /* the 'prev' block is free and adequate so use it */
+      DBGPRTR(EOL "  Realloc is combining low free, moving data");
+      m1 = m->prev;
+      extractfree(m1);
+      m1->sz += m->sz;     /* revise the links */
+      if ((m1->next = m->next)) m1->next->prev = m1;
+      /* we are now done with m links, except sz */
+
+      /* This involves copying the data, overlapping */
+      memmove(PTR(m1), PTR(m), m->sz - DATAOFFSET);
+
+      m = m1;        /* done with the old m value */
+      /* Is there something leftover */
+      if ((m->sz - szneed) >= MINSAVE) {
+         m = split(&m1, szneed);
+         mv2freelist(m1);
+      }
+   }
+   else if ((b = searchfree(szneed))) {
+      /* An adequate free block exists, copy over, free old */
+      DBGPRTR(EOL "  Realloc is using free block, copying");
+      rmvfromfree(m1 = freehdrs[b]);
+      if (m1->sz < szneed + MINSAVE) {
+         m2 = m1;
+      }
+      else {
+         m2 = split(&m1, szneed);
+         mv2freelist(m1);
+      }
+      /* Now m2 is the proposed new block, of the right size */
+      /* links are already revised so copy data from m to m2 */
+      memcpy(PTR(m2), PTR(m), m->sz - DATAOFFSET);
+
+      dofree(m);
+      m = m2;
+   }
+   else if (lastsbrk &&
+            ((szneed + MINSAVE) <= lastsbrk->sz) ) {
+      DBGPRTR(EOL "  Realloc is copying into lastsbrk");
+      m = mv2lastsbrk(m, szneed);
+   }
+   /* else malloc new size, copy data, and free old */
+   else if ((m1 = extendsbrk(szneed))) {
+      if (lastsbrk == m->next) {
+         DBGPRTR(EOL "  Realloc is now using lastsbrk extended");
+         /* last chance to avoid copying */
+         m = m1 = combinehi(m);
+         m = split(&m1, szneed);
+         lastsbrk = m1;
+      }
+      else {
+         /* At this point lastsbrk is adequate size */
+         /* split off, copy over, and free old      */
+         DBGPRTR(EOL "  Realloc is making complete new copy");
+         m = mv2lastsbrk(m, szneed);
+      }
+   }
+   else m = NULL;  /* failure */
+
+   if (m) p = PTR(m);
+   else {
+      DBGPRTR(dbgbp, ", FAILURE");
+      p = NULL;
+   }
+
+#if DEBUGR
+   DBGPRTR(EOL "returns %p", p);
+   if (m) DBGPRTR("(%lu)", m->sz - DATAOFFSET);
+   DBGEOLN;
+#endif
+
+exeunt:       /* label used on realloc of free block */
+              /* and on trap of oversize request */
+   if (!p && ptr && hookptr[malloc_fail_HK])
+      hookptr[malloc_fail_HK](size, ptr);
+   if (hookptr[realloc_exit_HK])
+      hookptr[realloc_exit_HK](size, p);
+
+   return p;
+} /* nrealloc */
+
+/* 1------------------1 */
+
+/* calloc included here to ensure that it handles the
+   same range of sizes (s * n) as does malloc.  The
+   multiplication n*s can wrap, yielding a too small
+   value, so we must ensure calloc rejects this.
+*/
+void *ncalloc(size_t n, size_t s)
+{
+   void   *result;
+   size_t  sz;
+
+   result = NULL;
+   if (!n || (((size_t)-1) / n) > s) {
+      sz = n * s;
+      if ((result = nmalloc(sz))) memset(result, 0, sz);
+      }
+   return result;
+} /* ncalloc */
+
+/* 1------------------1 */
+
+#ifdef MEMALIGN
+#  include "memalign.c"  /* further extension, when done */
+#endif
diff --git a/gcc/config/i386/nmalloc/nmalloc.h b/gcc/config/i386/nmalloc/nmalloc.h
new file mode 100644
index 000000000..909f02054
--- /dev/null
+++ b/gcc/config/i386/nmalloc/nmalloc.h
@@ -0,0 +1,25 @@
+/* -------- nmalloc.h ----------- */
+
+/* Copyright (c) 2003, 2006 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@maineline.net>
+*/
+
+#ifndef nmalloc_h
+#define nmalloc_h
+
+#include <stddef.h>
+
+void *nmalloc(size_t sz);
+void nfree(void *ptr);
+void *nrealloc(void *ptr, size_t sz);
+void *ncalloc(size_t n, size_t s);
+#ifdef MEMALIGN
+   void *nmemalign(size_t sz, size_t alignment);
+#endif
+
+#endif
+/* -------- nmalloc.h ----------- */
diff --git a/gcc/config/i386/nmalloc/nmalloc.lst b/gcc/config/i386/nmalloc/nmalloc.lst
new file mode 100644
index 000000000..d7e89d5f3
--- /dev/null
+++ b/gcc/config/i386/nmalloc/nmalloc.lst
@@ -0,0 +1,8 @@
+nmalloc.h
+sysquery.h
+malldbg.h
+malldbg.c
+nmalloc.c
+tmalldbg.c
+tnmalloc.c
+
diff --git a/gcc/config/i386/nmalloc/nmalloc.txh b/gcc/config/i386/nmalloc/nmalloc.txh
new file mode 100644
index 000000000..e35c7d659
--- /dev/null
+++ b/gcc/config/i386/nmalloc/nmalloc.txh
@@ -0,0 +1,636 @@
+@node malloc, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+
+void *malloc(size_t size);
+@end example
+
+@subheading Description
+
+This function allocates a chunk of memory from the heap large
+enough to hold any object that is @var{size} bytes in length.
+This memory must be returned to the heap with @code{free}
+(@pxref{free}).
+
+Note: excessively large requests are rejected.  At present
+excessively large means over @code(INT_MAX) - 65536.
+
+Note: this version of malloc is designed to reduce memory usage.
+A faster but less efficient version is available in the libc
+sources (@file{djlsr*.zip}) in the file
+@file{src/libc/ansi/stdlib/fmalloc.c}.
+
+@subheading Return Value
+
+A pointer to the allocated memory, or @code{NULL} if there isn't
+enough free memory to satisfy the request.
+
+@subheading Portability
+
+@portability ansi, posix
+
+@subheading Example
+
+@example
+char *c = malloc(100);
+@end example
+
+@c -------------------------------------------------------------
+
+@node free, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+
+void free(void *ptr);
+@end example
+
+@subheading Description
+
+Returns the allocated memory to the heap (@pxref{malloc}).  If
+the @var{ptr} is @code{NULL}, @code{free} does nothing.
+
+@subheading Return Value
+
+None.
+
+@subheading Portability
+
+@portability ansi, posix
+
+@subheading Example
+
+@example
+char *q = malloc(20);
+free(q);
+@end example
+
+@c -------------------------------------------------------------
+
+@node realloc, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+
+void *realloc(void *ptr, size_t size);
+@end example
+
+@subheading Description
+
+This function changes the size of the region pointed to by
+@var{ptr}. If it can, it will reuse the same memory space, but
+it may have to allocate a new memory space to satisfy the
+request.  In either case, it will return the pointer that you
+should use to refer to the (possibly new) memory area.  The
+pointer passed may be @code{NULL}, in which case this function
+acts just like @code{malloc} (@pxref{malloc}).
+
+An application that wants to be robust in the face of a possible
+failure of @code{realloc} to enlarge a buffer should save a copy
+of the old pointer in a local variable, to be able to use the
+original buffer in case @code{realloc} returns @code{NULL}.  See
+the example below for details.
+
+Note: excessively large requests are rejected.  At present
+excessively large means over @code(INT_MAX) - 65536.
+
+@subheading Return Value
+
+On success, a pointer is returned to the memory you should now
+refer to.  On failure, @code{NULL} is returned and the memory
+pointed to by @var{ptr} prior to the call is not freed.
+
+@subheading Portability
+
+@portability ansi, posix
+
+@subheading Example
+
+@example
+if (now + new > max)
+@{
+  char *old = p;
+
+  oldmax = max;
+  max = now + new;
+  p = realloc(p, max);
+  if (p == NULL) @{
+    p = old;  /* retain the old pointer */
+    max = oldmax;
+  @}
+@}
+@end example
+
+@c -------------------------------------------------------------
+
+@node mallinfo, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h> /* on non-DJGPP systems */
+
+struct mallinfo mallinfo(void);
+@end example
+
+@subheading Description
+
+This function returns information about heap space usage.  It is
+intended to be used for debugging dynamic memory allocation and
+tracking heap usage.  The @code{struct mallinfo} structure is
+defined by @file{stdlib.h} as follows:
+
+@example
+ struct mallinfo @{
+   int arena;
+   int ordblks;
+   int smblks;
+   int hblks;
+   int hblkhd;
+   int usmblks;
+   int fsmblks;
+   int uordblks;
+   int fordblks;
+   int keepcost;
+ @};
+@end example
+
+@noindent
+whose members are:
+
+@table @code
+@item arena
+The total amount of space, in bytes, handed by @code{sbrk} to
+@code{malloc}.  Note that this is not the same as
+@code{sbrk(0)}, since @code{sbrk} allocates memory in large
+chunks and then subdivides them and passes them to @code{malloc}
+as required.  In particular, the result of @code{sbrk(0)} might
+be much larger than the @code{arena} member of @code{struct
+mallinfo} when the DPMI host allocates memory in non-contiguous
+regions (happens on MS-Windows).
+
+@item ordblks
+The number of ``ordinary blocks'': the total number of allocated
+and free blocks maintained by @code{malloc}.
+
+@item smblks
+The number of ``small blocks''.  This is normally zero, unless
+a special version of @code{malloc} was installed.
+
+@item hblks
+The count of freeblocks maintained in the malloc arena.  This
+is normally much smaller than the number of freed blocks, since
+such blocks have been combined into larger blocks.
+
+@itemx hblkhd
+The size of the currently available top portion of the memory
+assigned by @code(sbrk).  Sometimes known as @dfn(slop).
+
+@item usmblks
+The space (in bytes) in ``small blocks'' that are in use.  This
+is always zero in the DJGPP implementation.
+
+@item fsmblks
+The space in free ``small blocks''.  Normally zero in the DJGPP
+implementation.
+
+@item uordblks
+The amount of space, in bytes, in the heap space currently used
+by the application.  This does not include the small overhead
+used by @code{malloc} to maintain its hidden information in each
+allocated block.
+
+@item fordblks
+The amount of free heap space maintained by @code{malloc} in its
+free list of hblks chunks.
+
+@item keepcost
+The total overhead used by @code(malloc) in maintaining the
+currently allocated blocks.
+@end table
+
+@subheading Return Value
+
+The @code{mallinfo} structure filled with information.
+
+@subheading Portability
+
+@port-note posix This function is available on many Unix systems.
+@portability !ansi, !posix
+
+@subheading Example
+
+@example
+ struct mallinfo info = mallinfo();
+
+ printf("Memory in use: %d bytes\n",
+        info.usmblks + info.uordblks);
+ printf("Total heap size: %d bytes\n", info.arena);
+@end example
+
+@c -------------------------------------------------------------
+
+@node malloc_verify, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h> /* on non-DJGPP systems */
+
+int malloc_verify(void);
+@end example
+
+@subheading Description
+This function attempts to determine if the heap has been
+corrupted.  It scans all the blocks allocated by @code{malloc}
+and handed to the application, and also all the free blocks
+maintained by @code{malloc} and @code{free} in the internal free
+list.  Each block is checked for consistency of the hidden
+bookkeeping information recorded in it by @code{malloc} and
+@code{free}.
+
+What happens when a bad block is found depends on the current
+@dfn{malloc diagnostics level}: for example, the block can be
+reported, or the program may be aborted.  @xref{malloc_debug},
+for the details.
+
+@subheading Return Value
+If the program isn't aborted during the function's run (this
+depends on the current diagnostics level), @code{malloc_verify}
+returns 1 if the heap passes all tests, or zero of some of the
+tests failed.
+
+@subheading Portability
+
+@port-note posix This function is available on many Unix systems.
+@portability !ansi, !posix
+
+@subheading Example
+
+@example
+ if (malloc_verify() == 0)
+   printf ("Heap corruption detected!\n");
+@end example
+
+@c -------------------------------------------------------------
+
+@node malloc_debug, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h> /* on non-DJGPP systems */
+
+int malloc_debug(int level);
+@end example
+
+@subheading Description
+This function sets the level of error diagnosis and reporting
+during subsequent calls to @code{malloc}, @code{free},
+@code{realloc}, and all functions which call them internally.
+The argument @var{level} is interpreted as follows:
+
+@table @asis 
+@item Level 0
+The memory allocation functions behave as they do if
+@code{malloc_debug} was never called.  Only passive checks are
+allowed, including @code(malloc_verify), @code(mallocmap), and
+@code(malldbgdumpfile) (to set the output file).  In particular
+@code(mallsethook) is disabled, to avoid accidents.  The actual
+functioning of the malloc system remains unaffected.  Any malloc
+hooks @xref(mallsethook) are reset. If errors are detected by
+@code{malloc_verify}, it prints diagnostic messages to the
+@defn(dumpfile) (default standard error stream), with address
+and size of the offending block and other pertinent information.
+
+@item Level 1
+All the passive checks of level 0 are allowed.  In addition
+@code(mallsethook) is enabled, thus allowing construction of
+custom debugging packages.
+
+@item Level 2
+Similar to level 1, but the consistency of the entire heap is
+also verified (by calling @code{malloc_verify}) on every call to
+the memory allocation functions.  @emph{Warning: this may
+significantly slow down the application.}  Since the malloc
+hooks are in use to connect to this system, @code(mallsethook)
+is disabled.  If there are hooks already in use the change to
+level 2 or above is rejected.
+
+@item Level 3
+Similar to level 2, except that the program is aborted whenever
+a heap corruption is detected.  In addition, failed allocations
+(i.e.@: when @code{malloc} or @code(realloc) returns @code{NULL}
+because it cannot satisfy a request) are reported to the
+dumpfile (default standard error).
+
+@item Level 4
+Similar to level 3, but calls to @code{free} with a @code{NULL}
+pointer as an argument are also reported.
+
+@item Level -1
+Does not alter the debug level, but returns the current value.
+@end table
+
+@subheading Return Value
+
+@code{malloc_debug} returns the previous error diagnostic level.  The
+default level is 0.
+
+@subheading Portability
+
+@port-note posix This function is available on many Unix systems.
+@portability !ansi, !posix
+
+@subheading Example
+
+@example
+ malloc_debug(2);
+ ...
+ malloc_verify();
+@end example
+
+@c -------------------------------------------------------------
+
+@node mallocmap, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h> /* on non-DJGPP systems */
+
+void mallocmap(void);
+@end example
+
+@subheading Description
+
+This function prints a map of the heap storage to the selected
+@file(dumpfile). @xref(malldbgdumpfile). For each block, its
+address and size are printed, as well as an indication whether
+it is free or in use, together with pointers to adjacent blocks.
+
+@subheading Return Value
+
+None.
+
+@subheading Portability
+
+@port-note posix This function is available on many Unix systems.
+@portability !ansi, !posix
+
+@c -------------------------------------------------------------
+
+@node mallsethook, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h> /* on non-DJGPP systems */
+
+M_HOOKFN mallsethook(enum m_hook_kind which,
+                     M_HOOKFN newhook);
+@end example
+
+@subheading Description
+Several @defn(hooks) are provided for building custom
+@code{malloc} debugging packages.  Such packages typically need
+to be notified when memory is allocated and freed by the
+application, in order to be able to find memory leaks, code that
+writes beyond the limits of allocated buffers or attempts to
+@code(free) buffers which were not allocated by @code{malloc},
+etc. These hooks can be used to define callback functions which
+will be called by the library at strategic points.  Each
+callback is only called if it is non-@code{NULL}; by default,
+all of them are initialized to a @code{NULL} value.
+
+The actual hook to be set is described by the following
+constants, enumerated in @file(stdlib.h):
+
+@table @code
+@item malloc_HK = 0    
+on entry to malloc
+
+@item malloc_fail_HK   
+when malloc or realloc fails
+
+@item free_HK          
+on entry to free
+
+@item free_null_HK     
+when free is called with a NULL pointer
+
+@item realloc_HK       
+on entry to realloc
+
+@item realloc_exit_HK  
+when realloc exits.
+
+@item HKCOUNT          
+The first invalid value for a hook descriptor.
+@end @table
+
+@noindent
+and each ``callback'' function is described by:
+
+@example
+   typedef void (*M_HOOKFN)(size_t sz, void *ptr);
+@end
+
+@noindent
+in @file(stdlib.h).  Note that in some cases the parameters
+supplied to the ``callback'' function will be meaningless, in
+which case they will be zero or @code(NULL) as appropriate.  The
+callback function must @strong(NOT) call any of @code(malloc),
+@code(free), or @code(realloc).
+
+@code(mallsethook) action is disabled unless the debug_level is
+set to 1.  This interlock avoids accidental use before enabling
+the package, and avoids altering hooks that are already in use
+for debug_level of 2 or higher.
+
+For access to the internal storage of the malloc arena, see the
+@code(_sysmalloc) call and the @code(_sysinfo) struct.
+
+@table @code
+
+@item malloc_HK
+Called just before a chunk of memory is about to be returned to
+the application in response to an allocation request.
+@var{sz} is the size requested by the application
+(@strong{not} the actual size of the allocated buffer, which may
+be larger).  @var{ptr} is a pointer to the block that was
+allocated.
+
+@item malloc_fail_HK
+Called if @code{malloc} failed to find a free block large enough
+to satisfy a request, and also failed to obtain additional
+memory from @code{sbrk}.  @var{sz} is the requested allocation
+size.
+
+@item free_HK
+Called when a buffer is about to be freed.  @var{ptr} is a
+pointer to the block to be freed.  Its validity has not been
+checked.
+
+@item free_null_HK
+Called whenever a @code{NULL} pointer is passed to @code{free}.
+@acronym{ANSI} C specifically rules that this is allowed and
+should have no effect, but you might want to catch such cases if
+your program needs to be portable to old compilers whose
+libraries don't like @code{NULL} pointers in @code{free}.
+
+@item realloc_HK
+Called at entry to @code{realloc}, before the actual
+reallocation. @var{ptr} is the pointer whose contents are to be
+reallocated.  @var{sz} is the new size requested by the
+application.  (This hook is called @emph{in addition} to the
+other hooks which may be called by @code{malloc} if and when
+@code{realloc} calls them.)
+
+@item realloc_exit_HK
+Called at exit from @code(realloc).  @var(sz) is the requested
+size, and @var(ptr) is the (possibly) revised value of the user
+pointer which will be returned by @code(realloc).  This may be
+@code(NULL) if realloc was unable to allocate the space, in
+which case @emph(ONLY) the original value of @var(ptr) (as
+reported by @code(realloc_HK)) remains valid.
+
+@end table
+
+@subheading Return Value
+
+@code{mallsethook} returns the previous hook pointer, (usually
+@code(NULL)). If @code(mallsethook) is disabled it will also
+return @code(NULL).
+
+@subheading Portability
+
+@portability !ansi, !posix
+
+These hooks and the function are specific to DJGPP.
+
+@subheading Example
+
+@example
+
+ static void mallocfailalert(size_t sz, void *ptr)
+ @{
+    printf("Failed to malloc %lu bytes\n", (unsigned long)sz);
+ @}
+
+ malloc_debug(1);
+ mallsethook(malloc_fail_HK, mallocfailalert);
+ ...
+ /* any malloc failure will result in a message */
+ 
+@end example
+
+@c -------------------------------------------------------------
+
+@node malldbgdmpfile, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h> (on non-DJGPP systems)
+
+FILE *malldbgdmpfile(FILE *fp);
+@end example
+
+@subheading Description
+
+This function allows diverting the output of the malldbg package
+to any suitable text file, known as the @defn(dumpfile).  By
+default the package uses @code(stderr).
+
+@subheading Return Value
+
+The previous identity of the dumpfile.
+
+@subheading Portability
+
+@portability !ansi, !posix
+
+This function is specific to DJGPP.
+
+@subheading Example
+
+@example
+FILE *oldfile = malldbgdmpfile(stdout);
+@end example
+
+@c -------------------------------------------------------------
+
+@node _sysmalloc, memory
+@subheading Syntax
+
+@example
+#include <stdlib.h>
+#include <malldbg.h>  /* on non-DJGPP systems */
+#include <sysquery.h> /* alternative on non-DJGPP systems */
+
+struct _sysquery _sysmalloc(void);
+@end example
+
+@subheading Description
+
+This function exports the internal structure of the malloc arena
+and thus allows construction of such packages as malldbg.  It 
+avoids accidental exposure of system critical values, and also
+permits such values to be changed and reflected in external
+packages.
+
+@subheading Return Value
+
+A @code(struct _sysquery), described as follows:
+
+@example
+struct _sysquery @{
+  unsigned char data, gdlo, sz, prvf, nxtf, nxt, prv, ohead;
+  void         *nilp;
+  void         *anchors;
+  set_m_hook    hookset;
+@};
+@end example
+
+Any unsigned char field set to 255 signifies the value is
+meaningless.  The @code(ohead) value is not useful in the
+present implementation.  The remaining values are small offsets
+from the internal pointers to the appropriate fields.  In
+particular @code(data) is the offset between the internal
+pointer and the user pointers.  @code(nxt) and @code(prv) link
+all allocated memory blocks, while @code(nxtf) and @code(prvf)
+are used only to link free blocks. @code(sz) is the internal
+size of the block, not the user size, and is normally rounded
+upward.  Thus the @code(nxt) field is redundant to the @code(sz)
+field (except when no @code(nxt) exists) and is used in validity
+checking. A @code(NULL) value in @code(nxtf) field signifies
+that the block is not free. The special value @code(nilp) is
+used in @code(nxtf) and @code(prvf) as a @code(NULL) value
+distinguishable from @code(NULL).
+
+@code(anchors) points to a @code(NULL) terminated list of sets
+of chains of memory blocks.  These were allocated by @code(sbrk)
+and were not contiguous to any previous allocations.
+
+@code(hookset) is a pointer to a function that can set malloc
+hooks, as described in @code(mallsethook).  It is only available
+through this link.
+
+@subheading Portability
+
+@portability !ansi, !posix
+
+This function is specific to DJGPP.
+
+@subheading Example
+
+@example
+struct _sysquery sysinfo = _sysmalloc();
+@end example
+
+@c -------------------------------------------------------------
diff --git a/gcc/config/i386/nmalloc/readme.txt b/gcc/config/i386/nmalloc/readme.txt
new file mode 100644
index 000000000..0beffbee6
--- /dev/null
+++ b/gcc/config/i386/nmalloc/readme.txt
@@ -0,0 +1,56 @@
+This is intended to be prepared via the makefile.
+
+To create a testable debug version, enter "make tnmalloc".
+
+To create an object module for use in actual systems, enter 
+"make malloc.o".  This will have the normal names, malloc, free,
+realloc.
+
+To create a version for profiling, enter "make tmallocp".  The
+module mallocp.o created is generally suitable for profiling, 
+and has the usual names.
+
+To create a cross-reference, enter "make xrf" (under DOS boxes
+only)
+
+The various compile time flags are set up appropriately.  In
+particular malloc.o should be immediately ready for inclusion
+in a library.  It may be desirable to "strip" debugging
+information from the module.
+
+"make all" creates everything, "make clean" wipes them out.
+
+The little test 'evilalgo' can be linked to either the stock
+malloc system, or to the malloc.o generated above.  Then time
+execution for an argument of 200000.  The original library will
+probably fail where nmalloc will succeed, and nmalloc will do it
+a lot faster.
+
+To create the modules for the malloc_debug system, enter
+"make tmalldbg.exe".  Once this is done other systems with the
+debug mechanism can be created by linking malldbg and hookmem 
+(.o) ahead of the normal runtime library.  The system using it
+must #include malldbg.h.
+
+make zip doesn't work properly.
+
+The integration of the malldbg system is not complete, but
+should function correctly.  Future changes are expected to be
+fairly cosmetic, and improve performance slightly.  The
+hookmem.h file will disappear and the sysquery action will be 
+modified.
+
+2003-05-01
+
+The malldbg system now appears complete.  Documentation in
+info source form is included in nmalloc.txh.  I find the 
+following command useful for creating a viewable or printable
+(but imperfect) .htm doc file:
+
+makeinfo --force --no-split --no-validate --html
+         -o nmalloc.htm nmalloc.txh
+         
+(Above is all one line)         
+
+
+Bug reports to cbfalconer@worldnet.att.net.
diff --git a/gcc/config/i386/nmalloc/sysquery.h b/gcc/config/i386/nmalloc/sysquery.h
new file mode 100644
index 000000000..041ef13f0
--- /dev/null
+++ b/gcc/config/i386/nmalloc/sysquery.h
@@ -0,0 +1,53 @@
+/* -------- sysquery.h ------------ */
+
+/* Copyright (c) 2003 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@worldnet.att.net>
+*/
+
+#ifndef sysquery_h
+#define sysquery_h
+#ifdef __cplusplus
+   extern "C" {
+#endif
+
+/* The settable hooks, identifiers */
+/* HKCOUNT is illegal value */
+enum m_hook_kind {malloc_HK,  malloc_fail_HK,
+                  free_HK,    free_null_HK,
+                  realloc_HK, realloc_exit_HK,
+                  HKCOUNT};
+
+/* Depending on kind, some params may be meaningless */
+typedef void (*M_HOOKFN)(size_t sz, void *bk);
+
+/* returns previous value of the appropriate function */
+typedef M_HOOKFN (*set_m_hook)(enum m_hook_kind which,
+                               M_HOOKFN newhook);
+
+/* This allows a clean connection to debugging software      */
+/* NOTE: ANY value equivalent to -1 means data not available */
+/*       for the unsigned chars this means 0xffh.            */
+struct _sysquery {
+   unsigned char data, gdlo, sz, prvf, nxtf, nxt, prv, ohead;
+   void *        nilp;    /* dummy NULL, &freeptrs[1] */
+   void *        anchors; /* of memory chains */
+   set_m_hook    hookset; /* how to set a hook */
+};
+
+/* This can return the above values, hopefully in a register    */
+/* NONE is used in nextfree, prevfree as the equivalent of NULL */
+/* With the unclean knowledge that nil is actually a pointer to */
+/* freehdrs[1], and that lastsbrk is actually freehdrs[0], the  */
+/* entire malloc structure is open to debuggery.                */
+struct _sysquery _sysmalloc(void);
+
+#ifdef __cplusplus
+   }
+#endif
+
+#endif
+/* -------- sysquery.h ------------ */
diff --git a/gcc/config/i386/nmalloc/tmalldbg.c b/gcc/config/i386/nmalloc/tmalldbg.c
new file mode 100644
index 000000000..fb1e1e7ad
--- /dev/null
+++ b/gcc/config/i386/nmalloc/tmalldbg.c
@@ -0,0 +1,416 @@
+/* ------- tmalldbg -------- */
+
+/* Copyright (c) 2003 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@worldnet.att.net>
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <limits.h>
+#include "malldbg.h"
+#include "sysquery.h"
+
+/*#include <string.h>
+#include <math.h>
+#include "cokusMT.h"
+*/
+
+/* Number of free lists in system */
+#define NFLISTS ((int)(CHAR_BIT * sizeof(size_t)))
+
+typedef struct testnode {
+   struct testnode *next;
+   char             string[30];
+} testnode;
+
+testnode *root;
+
+int notquiet;
+
+/* 1------------------1 */
+
+/* Build something to display the structure of */
+/* a linked list headed by the global var 'root' */
+static testnode *buildlist(int items, testnode *root)
+{
+   testnode *this;
+
+   while (items) {
+      this = malloc(items + sizeof *this);
+      this->next = root;
+      root = this;
+      sprintf(this->string, "item #%d", items);
+      items--;
+   }
+   return root;
+} /* buildlist */
+
+/* 1------------------1 */
+
+/* retains 1 in three of original list,
+   Ex: a -> b -> c -> d ::= a -> d, b & c freed
+   This allows exercizing the free list compaction */
+static void prunelist(testnode *root)
+{
+   testnode *this, *keep;
+
+   while (root) {
+      keep = root;
+      this = root->next;
+      if ((root = this)) {
+         this = root->next;
+         free(root);
+         if ((root = this)) {
+            this = root->next;
+            free(root);
+            root = this;
+         }
+      }
+      keep->next = root;
+   }
+} /* prunelist */
+
+/* 1------------------1 */
+
+static struct _sysquery sysinfo;
+void                 *(*freehdrsp)[NFLISTS];
+
+
+#define NONE          sysinfo.nilp
+#define lastsbrk      freehdrs[0]
+#define memblockp     void*
+typedef unsigned int  ulong;
+typedef unsigned char byte;
+
+/* conversion and access macros */
+#define DATAOFFSET sysinfo.data
+
+#define MEMBLKp(p) (memblockp)((byte*)(p) - DATAOFFSET)
+#define PTR(m)     (void*)((byte*)(m) + DATAOFFSET)
+
+/* field access macros (AFTER sysinfo loaded)    */
+/* Examples - replace "m->prv" by "fld(m, prv)"  */
+/*            replace "m->sz"  by "szof(m)"      */
+/* where field is prvf, nxtf, prv, nxt           */
+#define fld(m, field)   *((void**)((char*)m + sysinfo.field))
+#define szof(m)         *(ulong*)((char*)m + sysinfo.sz)
+#define freehdrs        (*freehdrsp)
+
+/* 1------------------1 */
+
+/* Fouls if sysinfo has not been initialized    */
+/* See main for sysinfo initialization sequence */
+void showsysquery(void)
+{
+   printf("sysinfo is: NONE = %p\n"
+          "     DATAOFFSET  = %d\n"
+          "     gdlo offset = %d\n"
+          "     sz   offset = %d\n"
+          "     prvf offset = %d\n"
+          "     nxtf offset = %d\n"
+          "     nxt  offset = %d\n"
+          "     prv  offset = %d\n"
+          "     ohead       = %d\n"
+          "     &freehdrs   = %p\n"
+          "     &anchors    = %p\n"
+          "     &hookset()  = %p\n",
+          sysinfo.nilp, sysinfo.data, sysinfo.gdlo,
+          sysinfo.sz,  sysinfo.prvf, sysinfo.nxtf,
+          sysinfo.nxt, sysinfo.prv,  sysinfo.ohead,
+          freehdrs, sysinfo.anchors, sysinfo.hookset);
+
+
+} /* showsysquery */
+
+/* 1------------------1 */
+
+/* m is the allocated ptr treated by MEMBLKp    */
+/* Fouls if sysinfo has not been initialized    */
+/* See main for sysinfo initialization sequence */
+static void xshowblock(void *m, char *id)
+{
+   if (m) {
+      printf(" %s %p", id, m);
+      printf(" sz=%u nxt=%p prv=%p nxtf=",
+             szof(m), fld(m, nxt), fld(m, prv));
+      if (fld(m, nxtf)) {
+         if (NONE == fld(m, nxtf))
+            printf("NONE prvf=");
+         else
+            printf("%p prvf=", fld(m, nxtf));
+         if (NONE == fld(m, prvf))
+            printf("NONE");
+         else
+            printf("%p", fld(m, prvf));
+      }
+      else printf("0");
+   }
+   else
+      printf(" %s NULL", id);
+   fflush(stdout);  /* to coexist with internal debuggery */
+} /* xshowblock */
+
+/* ========== End of debuggery examples ============= */
+/* ============== Start of tests ==================== */
+
+struct blkspace {
+   unsigned long totspace;
+   unsigned long blkcount;
+};
+
+/* 1------------------1 */
+
+struct blkspace freeblocks()
+{
+   struct blkspace blksp;
+   int             i;
+   memblockp       m;
+
+   blksp.totspace = blksp.blkcount = 0;
+   for (i = 0; i < NFLISTS; i++) {
+      if ((m = freehdrs[i])) {
+         while (m && (NONE !=m )) {
+            blksp.totspace += szof(m);
+            blksp.blkcount++;
+            m = fld(m, nxtf);
+         }
+      }
+   }
+   return blksp;
+} /* freeblocks */
+
+/* 1------------------1 */
+
+void printinfo(struct mallinfo *info)
+{
+   printf("   arena = %d\n", info->arena);
+   printf(" ordblks = %d\n", info->ordblks);
+   printf("  smblks = %d\n", info->smblks);
+   printf("   hblks = %d\n", info->hblks);
+   printf("  hblkhd = %d\n", info->hblkhd);
+   printf(" usmblks = %d\n", info->usmblks);
+   printf(" fsmblks = %d\n", info->fsmblks);
+   printf("uordblks = %d\n", info->uordblks);
+   printf("fordblks = %d\n", info->fordblks); /* free space */
+   printf("keepcost = %d\n", info->keepcost);
+} /* printinfo */
+
+/* 1------------------1 */
+
+void foul2ndlast(testnode *root)
+{
+   testnode *this, *prev;
+   void     *m;
+
+   this = prev = NULL;
+   while (root) {
+      prev = this; this = root; root = root->next;
+   }
+   /* Now prev=>this=>NULL */
+   m = MEMBLKp(prev);
+
+   xshowblock(m, "Fouling block: ");
+   puts("");
+
+   /* acts like a write past the previous block */
+   (*(char*)m)--;
+
+   xshowblock(m, " which became: ");
+   puts("\n");
+
+} /* foul2ndlast */
+
+/* 1------------------1 */
+
+void test01(unsigned long n)
+{
+   struct mallinfo info;
+   struct blkspace blkspace;
+   void  *m;
+
+   root = buildlist(n, root);
+   m = MEMBLKp(root);
+   xshowblock(m, "\nLAST allocated:");
+   puts("");
+
+   blkspace = freeblocks();
+   info = mallinfo();
+   printinfo(&info);
+
+   printf("\nnfreeblk = %lu\n", blkspace.blkcount);
+   printf(" holding ( %lu )\n", blkspace.totspace);
+} /* test01 */
+
+/* 1------------------1 */
+
+void test02(unsigned long n)
+{
+   root = buildlist(n, root);
+   mallocmap();
+} /* test02 */
+
+/* 1------------------1 */
+
+void test03(unsigned long n)
+{
+   struct mallinfo info;
+
+   root = buildlist(n, root);
+   info = mallinfo();
+   puts("\nBefore pruning:");
+   printinfo(&info);
+   prunelist(root);
+   info = mallinfo();
+   puts("\nAfter pruning:");
+   printinfo(&info);
+   prunelist(root);
+   info = mallinfo();
+   puts("\nAfter repruning:");
+   printinfo(&info);
+   puts("\nComplete map:");
+   mallocmap();
+} /* test03 */
+
+/* 1------------------1 */
+
+void test04(unsigned long n)
+{
+   struct mallinfo info;
+   testnode       *this;
+
+   info = mallinfo();
+   puts("\nAt startup:");
+   printinfo(&info);
+   root = buildlist(n, root);
+   info = mallinfo();
+   puts("\nBefore pruning:");
+   printinfo(&info);
+   prunelist(root);
+   info = mallinfo();
+   puts("\nAfter pruning:");
+   printinfo(&info);
+   prunelist(root);
+   info = mallinfo();
+   puts("\nAfter repruning:");
+   printinfo(&info);
+   free(NULL);         /* to check the alert */
+   while ((this = root)) {
+      root = root->next;
+      free(this);
+   }
+   info = mallinfo();
+   puts("\nAfter freeing all:");
+   printinfo(&info);
+   puts("\nComplete map:");
+   mallocmap();
+} /* test04 */
+
+/* 1------------------1 */
+
+void test06(unsigned long n)
+{
+   root = buildlist(n, root);
+   printf("malloc_verify() returns %d\n", malloc_verify());
+   mallocmap();
+} /* test06 */
+
+/* 1------------------1 */
+
+void test07(unsigned long n)
+{
+   root = buildlist(n, root);
+   foul2ndlast(root);
+   printf("malloc_verify() returns %d\n", malloc_verify());
+   mallocmap();
+} /* test07 */
+
+/* 1------------------1 */
+
+void test08(unsigned long n)
+{
+   struct mallinfo info;
+   void  *p, *p1;
+
+   info = mallinfo();
+   puts("\nAt startup:");
+   printinfo(&info);
+   root = buildlist(n, root);
+   info = mallinfo();
+   puts("\nBefore pruning:");
+   printinfo(&info);
+   prunelist(root);
+   info = mallinfo();
+   puts("\nAfter pruning:");
+   printinfo(&info);
+   prunelist(root);
+   info = mallinfo();
+   puts("\nAfter repruning:");
+   printinfo(&info);
+   puts("\nAfter attempting malloc/realloc(INT_MAX):");
+   p = malloc(INT_MAX);
+   p = malloc(2);
+   if (p && (p1 = realloc(p, INT_MAX))) {
+      p = p1; /* shouldn't happen */
+      puts("\nSomething is wrong");
+   }
+   info = mallinfo();
+   printinfo(&info);
+   puts("\nComplete map:");
+   mallocmap();
+} /* test08 */
+
+/* 1------------------1 */
+
+int main(int argc, char *argv[])
+{
+   unsigned long t = 0, n = 0, dbglvl = 0;
+
+   if (argc > 1) t = strtoul(argv[1], NULL, 10);
+   if (argc > 2) n = strtoul(argv[2], NULL, 10);
+   if (argc > 3) dbglvl = strtoul(argv[3], NULL, 10);
+
+   if (0 == n) n = 10;
+
+   printf("test%02lu-%lu (%lu)\n", t, n, dbglvl);
+
+   sysinfo   = _sysmalloc();
+   freehdrsp = (void*)((byte*)(sysinfo.nilp)-sizeof(void*));
+   malloc_debug(dbglvl);
+   if (t != 5) malldbgdumpfile(stdout);
+
+   switch (t) {
+case 1: test01(n); break;
+case 2: test02(n); break;
+case 3: test03(n); break;
+case 4: test04(n); break;
+case 5: test04(n); break; /* see malldbgdumfile call above */
+case 6: test06(n); break;
+case 7: test07(n); break;
+case 8: test08(n); break;
+default:
+        printf("Usage: tmalldbg [testnumber [quantity [level]]]\n");
+        printf("CHAR_BIT * sizeof(size_t) = %lu\n",
+                (unsigned long)(CHAR_BIT * sizeof(size_t)));
+        showsysquery();
+        printf(
+           "\n"
+           "Test Purpose (usually to stdout)\n"
+           "  1  Allocate items, execute/show mallinfo\n"
+           "  2  Allocate items, execute mallocmap\n"
+           "  3  Allocate/prune items, do mallocmap & info\n"
+           "  4  As test 3, but all freed and free(NULL)\n"
+           "  5  As test 4, but dumps to stderr\n"
+           "  6  Allocate items, call malloc_verify / map\n"
+           "  7  As 6, but deliberately foul 2nd last malloc\n"
+           "  8  As 3, but attempt to malloc INT_MAX items\n"
+           );
+        break;
+   } /* switch (t) */
+   return 0;
+} /* main */
+
+/* ------- tmalldbg -------- */
diff --git a/gcc/config/i386/nmalloc/tnmalloc.c b/gcc/config/i386/nmalloc/tnmalloc.c
new file mode 100644
index 000000000..b5bc3e96d
--- /dev/null
+++ b/gcc/config/i386/nmalloc/tnmalloc.c
@@ -0,0 +1,618 @@
+/* ------- tstmalloc -------- */
+
+/* Copyright (c) 2003 by Charles B. Falconer
+   Licensed under the terms of the GNU LIBRARY GENERAL PUBLIC
+   LICENSE and/or the terms of COPYING.DJ, all available at
+   <http://www.delorie.com>.
+
+   Bug reports to <mailto:cbfalconer@worldnet.att.net>
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+#include <math.h>
+#include "fakesbrk.h"
+#include "cokusMT.h"
+#include "sysquery.h"
+#include <unistd.h>     /* write */
+
+/* NDEBUG allows this to be used for profiling malloc.o */
+#ifndef NDEBUG
+#  include "nmalloc.h"
+#  define  INTERVAL 10  /* for emitting free list dumps */
+#else
+#  define nmalloc   malloc
+#  define nfree     free
+#  define nrealloc  realloc
+#  define nmemalign memalign
+#  define INTERVAL  1000 /* for emitting free list dumps */
+#endif
+
+/* Magic 1500 below must be > MINSBRK in nmalloc.c */
+enum {FAKESIZE = 1234567,
+      HIFAKESZ = 1500,
+      HIFAKE   = FAKESIZE - HIFAKESZ,
+      NFLISTS  = (int)(CHAR_BIT * sizeof(size_t))
+     };
+
+char fakearea[FAKESIZE];
+
+int notquiet;   /* 0 suppresses most output in this module */
+
+/* 1------------------1 */
+
+/* we can fool with this to generate test cases      */
+/* If I could only figure a way to peg the addresses */
+/* the test runs would be a good regression test.    */
+void *fakesbrk(int delta)
+{
+static char *unused = fakearea;
+static char *hiarea = fakearea + HIFAKE;
+char        *next, *p;
+
+   if (hiarea && (delta >= 32) && (delta < HIFAKESZ)) {
+      /* return something above normal use to test
+         action under decreasing sbrk values */
+      p = hiarea;
+      hiarea = 0;
+      return (void *)p;
+   }
+   /* otherwise just act normally */
+   next = unused + delta;
+   if ((unsigned) next > HIFAKE) return (void *)-1;
+   else {
+      p = unused;
+      unused = next;
+      return (void *)p;
+   }
+} /* fakesbrk */
+
+/* =====================================================
+   This portion is an example of using the _sysmalloc()
+   call to access the inner workings of the malloc pkg.
+   Note the exact parallel between these routines and
+   the corresponding ones in nmalloc.c.
+   =====================================================
+*/
+
+/* 1------------------1 */
+
+static struct _sysquery sysinfo;
+void                 *(*freehdrsp)[NFLISTS];
+
+
+#define NONE          sysinfo.nilp
+#define lastsbrk      freehdrs[0]
+#define memblockp     void*
+typedef unsigned int  ulong;
+typedef unsigned char byte;
+
+/* conversion and access macros */
+#define DATAOFFSET sysinfo.data
+
+#define MEMBLKp(p) (memblockp)((byte*)(p) - DATAOFFSET)
+#define PTR(m)     (void*)((byte*)(m) + DATAOFFSET)
+
+/* field access macros (AFTER sysinfo loaded)    */
+/* Examples - replace "m->prv" by "fld(m, prv)"  */
+/*            replace "m->sz"  by "szof(m)"      */
+/* where field is prvf, nxtf, prv, nxt           */
+#define fld(m, field)   *((void**)((char*)m + sysinfo.field))
+#define szof(m)         *(ulong*)((char*)m + sysinfo.sz)
+#define freehdrs        (*freehdrsp)
+
+/* 1------------------1 */
+
+/* Fouls if sysinfo has not been initialized    */
+/* See main for sysinfo initialization sequence */
+void showsysquery(void)
+{
+   printf("sysinfo is: nil = %p\n"
+          "    DATAOFFSET  = %d\n"
+          "    gdlo offset = %d\n"
+          "    sz   offset = %d\n"
+          "    prvf offset = %d\n"
+          "    nxtf offset = %d\n"
+          "    nxt  offset = %d\n"
+          "    prv  offset = %d\n"
+          "    ohead       = %d\n"
+          "    &freehdrs   = %p\n"
+          "    &anchors    = %p\n"
+          "    &hookset()  = %p\n",
+          sysinfo.nilp, sysinfo.data, sysinfo.gdlo,
+          sysinfo.sz,  sysinfo.prvf, sysinfo.nxtf,
+          sysinfo.nxt, sysinfo.prv,  sysinfo.ohead,
+          freehdrs, sysinfo.anchors, sysinfo.hookset);
+
+} /* showsysquery */
+
+/* 1------------------1 */
+
+/* m is the allocated ptr treated by MEMBLKp    */
+/* Fouls if sysinfo has not been initialized    */
+/* See main for sysinfo initialization sequence */
+static void xshowblock(void *m, char *id)
+{
+   if (m) {
+      printf(" %s %p", id, m);
+      printf(" sz=%u nxt=%p prv=%p nxtf=",
+             szof(m), fld(m, nxt), fld(m, prv));
+      if (fld(m, nxtf)) {
+         if (NONE == fld(m, nxtf))
+            printf("NONE prvf=");
+         else
+            printf("%p prvf=", fld(m, nxtf));
+         if (NONE == fld(m, prvf))
+            printf("NONE");
+         else
+            printf("%p", fld(m, prvf));
+      }
+      else printf("0");
+   }
+   else
+      printf(" %s NULL", id);
+   fflush(stdout);  /* to coexist with internal debuggery */
+} /* xshowblock */
+
+/* 1------------------1 */
+
+/* dump the entire free chain group             */
+/* Fouls if sysinfo has not been initialized    */
+/* See main for sysinfo initialization sequence */
+static void xdumpfree(void)
+{
+   int       i;
+   memblockp m;
+   ulong     totfree;
+
+   totfree = 0;
+   for (i = 0; i < NFLISTS; i++) {
+      if ((m = freehdrs[i])) {
+         printf("\n%2d: ", i);
+         do {
+            printf("%p(%u)->", m, szof(m));
+            totfree += szof(m);
+            m = fld(m, nxtf);
+         } while (m && (NONE != m));
+         printf("0");
+         m = freehdrs[i];
+         while (m && (NONE !=m )) {
+            xshowblock(m, "\n     ");
+            m = fld(m, nxtf);
+         }
+      }
+   }
+   printf("\nTotal Free = %u\n", totfree);
+   fflush(stdout);  /* to coexist with internal debuggery */
+} /* xdumpfree */
+
+/* ========== End of debuggery examples ============= */
+/* ============== Start of tests ==================== */
+
+/* Just allocate increasing sizes */
+void test01(int n)
+{
+   int   i;
+   void *m;
+
+   for (i = 0; i < n; i++) m = nmalloc(65 * i);
+} /* test01 */
+
+/* 1------------------1 */
+
+/* allocate increasing sizes, freeing what was allocated
+   10 items earlier.  Monitor free list every 10th.  Free
+   everything at end.  Perturb sbrk return values.
+*/
+void test02(int n)
+{
+   int   i;
+   void *m[10] = {0};
+
+   for (i = 0; i < n; i++) {
+      nfree(m[i % 10]);
+      m[i % 10] = nmalloc(15 * i);
+      if (0 == (i % 30)) (void)fakesbrk(3);
+      if ( (INTERVAL - 1) == (i % INTERVAL )
+          && notquiet)
+         xdumpfree();
+   }
+   for (i = 0; i < 10; i++) nfree(m[i]);
+   xdumpfree();
+} /* test02 */
+
+/* 1------------------1 */
+
+enum {STDIN = 0, STDOUT, STDERR, STDAUX, STDPRN}; /* handles */
+
+/* made to be compatible with nmalloc internal debugger */
+void inject(int i)
+{
+   char buf[20];
+
+#ifndef NDEBUG
+   sprintf(buf, "%03d: ", i);
+   write(STDOUT, buf, strlen(buf));
+#endif
+} /* inject */
+
+/* 1------------------1 */
+
+/* allocate random sizes, free, finally abort. Perturb sbrk */
+void test03(int n)
+{
+   int   i;
+   void *m[10] = {0};
+
+   if (0 == n) n = 10;
+
+   for (i = 0; i < n; i++) {
+      if (m[i % 10]) inject(i);
+      nfree(m[i % 10]);
+      if (notquiet) inject(i);
+      m[i % 10] = nmalloc(randomMT() % 10000);
+
+      if (0 == i) xshowblock(MEMBLKp(m[0]), "\n*testing*");
+
+      if (0 == (i % 30)) (void)fakesbrk(3);
+      if ( (INTERVAL - 1) == (i % INTERVAL )
+          && notquiet)
+         xdumpfree();
+   }
+   for (i = 0; i < 10; i++) {
+      if (m[i] && notquiet) inject(i);
+      nfree(m[i]);
+   }
+   xdumpfree();
+   if (n & 1) {
+      printf("\nDeliberately refreeing pointer, should abort\n\n");
+      fflush(stdout);
+      nfree(m[0]);
+   }
+} /* test03 */
+
+/* 1------------------1 */
+
+/* allocate random sizes, realloc, free. Perturb sbrk */
+void test04(int n)
+{
+   int   i;
+   void *m[10] = {0};
+   void *temp;
+
+   for (i = 0; i < n; i++) {
+      if (m[i % 10]) inject(i);
+      nfree(m[i % 10]);
+      if (notquiet) inject(i);
+      m[i % 10] = nmalloc(randomMT() % 10000);
+      if (notquiet) inject(i);
+      temp = nrealloc(m[i % 10], randomMT() % 10000);
+      if (temp) m[i % 10] = temp;
+      if (0 == (i % 30)) (void)fakesbrk(3);
+      if ( (INTERVAL - 1) == (i % INTERVAL)
+           && notquiet)
+         xdumpfree();
+   }
+   for (i = 0; i < 10; i++) {
+      if (m[i] && notquiet) inject(i);
+      nfree(m[i]);
+   }
+   xdumpfree();
+} /* test04 */
+
+/* 1------------------1 */
+
+/* made to be compatible with nmalloc internal debugger */
+void showijk(int i, int j, int k)
+{
+   char buf[20];
+
+#ifndef NDEBUG
+   sprintf(buf, "%03d:%d:%d ", i, j, k);
+   write(STDOUT, buf, strlen(buf));
+#endif
+} /* showijk */
+
+/* 1------------------1 */
+
+/* free 10 items, allocate 10 random sizes, realloc 10 random  */
+/* Much like test 4, but a different sequence. No sbrk perturb */
+void test05(int n)
+{
+   int   i, j, k, ix;
+   void *m[10] = {0};
+   void *temp;
+
+   for (i = 0; i < n; i++) {
+      j = (i / 10) % 3;   /* 0, 1, or 2 */
+      k = (i % 10);
+      ix = k + 10 * (i / 30);
+      if (0 == j) {
+         if (notquiet) showijk(i, j, k);
+         temp = nrealloc(m[k], randomMT() % 10000);
+         if (temp) m[k] = temp;
+         if ( (INTERVAL - 1) == (i % INTERVAL)
+             && notquiet)
+            xdumpfree();
+      }
+      if (1 == j) {
+         if (m[k]) {
+            if (notquiet) showijk(i, j, k);
+            nfree(m[k]);
+            m[k] = NULL;
+         }
+         if ( (INTERVAL - 1) == (i % INTERVAL)
+              && notquiet)
+            xdumpfree();
+      }
+      if (2 == j) {
+         if (notquiet) showijk(i, j, k);
+         m[k] = nmalloc(randomMT() % 10000);
+         if ( (INTERVAL - 1) == (i % INTERVAL)
+              && notquiet)
+            xdumpfree();
+      }
+      if (0 == i) (void)fakesbrk(3); /* make 2 blocks */
+   }
+   for (i = 0; i < 10; i++) {
+      if (m[i]) {
+         if (notquiet) inject(i);
+         nfree(m[i]);
+      }
+   }
+   xdumpfree();
+} /* test05 */
+
+/* 1------------------1 */
+
+/* reallocate random sizes continuously */
+void test06(int n)
+{
+   int   i;
+   void *m[10] = {0};
+   void *temp;
+
+   for (i = 0; i < n; i++) {
+      if (notquiet) inject(i);
+      temp = nrealloc(m[i % 10], randomMT() % 10000);
+      if (temp) m[i % 10] = temp;
+      if ( (INTERVAL - 1) == (i % INTERVAL)
+           && notquiet)
+         xdumpfree();
+   }
+   for (i = 0; i < 10; i++) {
+      if (m[i] && notquiet) inject(i);
+      nfree(m[i]);
+   }
+   xdumpfree();
+} /* test06 */
+
+/* 1------------------1 */
+
+/* reallocate random sizes continuously, check data unharmed */
+/* This writes over all allocated memory, so it is a fairly  */
+/* good test that nothing is out of place.                   */
+void test07(int n)
+{
+   int             i, j, k;
+   void           *m[10] = {0};
+   int             sz[10] = {0};
+   int             newsz, minsz;
+   unsigned char  *p;
+
+   void *temp;
+
+   for (i = 0; i < n; i++) {
+      if (notquiet) inject(i);
+      k = i % 10;
+      minsz = newsz = randomMT() % 10000;
+      if (sz[k] < minsz) minsz = sz[k];
+      if (m[k]) {
+         p = m[k];
+         for (j = 0; j < sz[k]; j++) {
+            /* null loop for initial access */
+            p[j] = j & 0xff;
+         }
+      }
+      temp = nrealloc(m[k], newsz);
+      if (temp) {
+         p = m[k] = temp;
+         sz[k] = newsz;
+         for (j = 0; j < minsz; j++) {
+            /* null loop for initial access */
+            if (p[j] != (j & 0xff)) {
+               printf("Data failure at index %d!!\n", j);
+               printf("is %d should be %d\n",
+                       p[j], j & 0xff);
+               fflush(stdout);
+               exit(EXIT_FAILURE);
+            }
+         }
+      }
+      if ( (INTERVAL - 1) == (i % INTERVAL)
+           && notquiet)
+         xdumpfree();
+   }
+   for (i = 0; i < 10; i++) {
+      if (m[i] && notquiet) inject(i);
+      nfree(m[i]);
+   }
+   xdumpfree();
+} /* test07 */
+
+/* 1------------------1 */
+
+/* From the C-FAQ, slightly modified
+ * Most likely value is 0, + or - 5 are rare
+ */
+double gaussrand(void)
+{
+   static double V2, X;
+   static int    phase = 0;
+   double        Y, U1, U2, V1, S;
+
+   if (phase) Y = V2 * X;
+   else {
+      do {
+         U1 = (double)randomMT() / ranMTMAX;
+         U2 = (double)randomMT() / ranMTMAX;
+
+         V1 = 2 * U1 - 1;
+         V2 = 2 * U2 - 1;
+         S = V1 * V1 + V2 * V2;
+      } while (S >= 1 || S == 0);
+
+      Y = V1 * (X = sqrt(-2 * log(S) / S));
+   }
+   phase = 1 - phase;
+   return Y;
+} /* gaussrand */
+
+/* 1------------------1 */
+
+/* maps gaussrand -inf .. 0 into 0..1 and
+ *                0 .. +inf into 1..inf.
+ * Most likely value is slightly less than 1
+ * 5.0 is fairly rare, 120.0 extremely rare
+ */
+double gausspos(void)
+{
+#define GAUSSLIMIT 10.0
+   double r;
+
+   if (GAUSSLIMIT < (r = gaussrand()))  /* limit */
+      r = GAUSSLIMIT;
+   return exp(r);
+} /* gausspos */
+
+/* 1------------------1 */
+
+typedef struct node {
+   struct node *next;
+   char        *wastage;
+} node, *nodeptr;
+
+/* Under development for long term thrashing */
+void test08(int n, int reps)
+{
+   int     i, j;
+   nodeptr root, temp;
+   size_t  sz, totalsz;
+
+   printf("Under development\n"); fflush(stdout);
+   j = 0;
+   do {
+      if (reps) {
+         printf("Repetion %d\n", j + 1); fflush(stdout);
+      }
+      root = NULL; totalsz = 0;
+      for (i = 0; i < n; i++) {
+         /* form singly linked list of various sizes */
+         if (!(temp = nmalloc(sizeof *temp))) {
+            fprintf(stderr, "malloc node failed\n");
+            exit(EXIT_FAILURE);
+         }
+         else {
+            sz = (1 + gausspos()) * 32.0;
+            if (!(temp->wastage = nmalloc(sz))) {
+               fprintf(stderr, "malloc wastage failed\n");
+               exit(EXIT_FAILURE);
+            }
+            else {
+               temp->next = root;
+               root = temp;
+               totalsz += sz;
+            }
+         }
+      } /* for, formed base list */
+
+      xdumpfree();
+
+      /* liberate it all */
+      while (root) {
+         nfree(root->wastage);
+         temp = root->next;
+         nfree(root);
+         root = temp;
+      } /* while */
+
+      xdumpfree();
+   } while (++j < reps);
+} /* test08 */
+
+/* 1------------------1 */
+
+/* Under development for memalign exercise */
+void test09(int n, int reps)
+{
+   int   i;
+   void *p;
+
+   printf("Under development\n"); fflush(stdout);
+   if (!reps) reps = 512;
+   for (i = 0; i < n; i++) {
+      p = nmemalign(65 * i, reps);
+   }
+} /* test09 */
+
+/* 1------------------1 */
+
+int main(int argc, char *argv[])
+{
+   unsigned long t = 0, n = 0, reps = 0;
+
+   if (argc > 1) t = strtoul(argv[1], NULL, 10);
+   if (argc > 2) n = strtoul(argv[2], NULL, 10);
+   if (argc < 4) notquiet = 1;
+   else {
+      reps = strtoul(argv[3], NULL, 10);
+      notquiet = !(reps & 1);
+   }
+
+   if (0 == n) n = 10;
+
+   printf("test%02lu-%lu (%lu)\n", t, n, reps);
+   fflush(stdout);  /* Needed to coexist with debug pkg */
+
+   sysinfo   = _sysmalloc();
+   freehdrsp = (void*)((byte*)(sysinfo.nilp)-sizeof(void*));
+
+   (void) fakesbrk(1);  /* start it off on odds */
+   switch (t) {
+case 1: test01(n); break;
+case 2: test02(n); break;
+case 3: test03(n); break;
+case 4: test04(n); break;
+case 5: test05(n); break;
+case 6: test06(n); break;
+case 7: test07(n); break;
+case 8: test08(n, reps); break;
+case 9: test09(n, reps); break;
+default:
+        printf("Usage: tnmalloc [testnumber [quantity [reps]]]\n");
+        printf("fakearea at %p through %p (was f594)\n",
+               &fakearea, &fakearea[FAKESIZE-1]);
+        printf("CHAR_BIT * sizeof(size_t) = %lu\n",
+                (unsigned long)(CHAR_BIT * sizeof(size_t)));
+        showsysquery();
+        printf(
+           "Test Purpose\n"
+           "  1  malloc only\n"
+           "  2  malloc and free\n"
+           "  3  malloc(random), free, aborts for odd quantity\n"
+           "  4  malloc(random), realloc(random), and free\n"
+           "  5  malloc(10 random), realloc(10 random) and free 10\n"
+           "  6  realloc(random), monitor free lists\n"
+           "  7  realloc(random), check data unharmed\n"
+           "  8  run a long faked sequence, not complete\n"
+           "  9  test memalign operation\n"
+           "Any odd entry for reps suppresses free list dumps\n"
+           );
+        break;
+   } /* switch (t) */
+   return 0;
+} /* main */
+
+/* ------- tstmalloc -------- */
diff --git a/gcc/config/i386/nmalloc/xref.exe b/gcc/config/i386/nmalloc/xref.exe
new file mode 100644
index 000000000..e69de29bb
diff --git a/gcc/config/i386/x-djgpp b/gcc/config/i386/x-djgpp
new file mode 100644
index 000000000..7b84f3f76
--- /dev/null
+++ b/gcc/config/i386/x-djgpp
@@ -0,0 +1,31 @@
+#-----------------------------------------------------------------------------
+# The following code is copied from config/mh-djgpp as one may 
+# want to run make in gcc build directory instead of toplevel 
+# one (for example 'make restage2' or similar which are not available
+# from top level makefile and we should have the same substitutions 
+# in this case)           
+#-----------------------------------------------------------------------------
+
+# Shorten the target alias so when it is used to set 'libsubdir'
+# the name will work in both short and long filename environments.
+ifeq ($(findstring -pc-msdosdjgpp,$(target_alias)),-pc-msdosdjgpp)
+target_alias=djgpp
+endif
+
+# The version string must be modified to contain just one dot
+# because DOS filenames can only have one dot when long filenames
+# are not available.
+#
+version := $(shell echo $(version) | sed -e 's:\.::2g')
+
+# on DJGPP the 'ln -s' does not work correctly
+LN = cp -p
+LN_S = cp -p
+
+# Replace DJGPP malloc with nmalloc
+EXTRA_OBJS += malloc.o
+EXTRA_GCC_OBJS += malloc.o
+
+malloc.o: $(srcdir)/config/i386/nmalloc/nmalloc.c $(srcdir)/config/i386/nmalloc/memalign.c \
+		$(srcdir)/config/i386/nmalloc/sysquery.h
+	$(CC) -c -O2 -W -Wall -DMEMALIGN $< -o $@
diff --git a/gcc/config/i386/xm-djgpp.h b/gcc/config/i386/xm-djgpp.h
index c3758ea9e..f5899381b 100644
--- a/gcc/config/i386/xm-djgpp.h
+++ b/gcc/config/i386/xm-djgpp.h
@@ -82,3 +82,18 @@ along with GCC; see the file COPYING3.  If not see
       strcat (fixed_path, "/");			\
       (PATH) = xstrdup (fixed_path);		\
     } 
+
+/* Rename libstdc++ to libstdcxx as the first name is not valid for DOS */
+#define LIBSTDCXX "-lstdcxx"
+#define LIBSTDCXX_PROFILE "-lstdcxx"
+
+/* Rename libgfortranbegin.a to avoid filename conflict for DOS */
+#undef FORTRAN_INIT
+#define FORTRAN_INIT "-lgf95begin"
+
+/* Definition is missing in DJGPP headers. That broke building
+   GNU Fortran compiler in GCC-4.1 */
+typedef unsigned int uint;
+
+#undef MAX_OFILE_ALIGNMENT
+#define MAX_OFILE_ALIGNMENT 128
diff --git a/gcc/configure b/gcc/configure
index 145923ae1..c61a31302 100755
--- a/gcc/configure
+++ b/gcc/configure
@@ -798,6 +798,7 @@ LDFLAGS
 CFLAGS
 CC
 GENINSRC
+libstdcxx_incdir_base
 target_subdir
 host_subdir
 build_subdir
@@ -3262,11 +3263,14 @@ fi
 
 
 # This logic must match libstdc++-v3/acinclude.m4:GLIBCXX_EXPORT_INSTALL_INFO.
+libstdcxx_incdir_base=c++
+
+
 if test x${gcc_gxx_include_dir} = x; then
   if test x${enable_version_specific_runtime_libs} = xyes; then
-    gcc_gxx_include_dir='${libsubdir}/include/c++'
+    gcc_gxx_include_dir='${libsubdir}/include/$(libstdcxx_incdir_base)'
   else
-    libstdcxx_incdir='include/c++/$(version)'
+    libstdcxx_incdir='include/$(libstdcxx_incdir_base)/$(version)'
     if test x$host != x$target; then
        libstdcxx_incdir="$target_alias/$libstdcxx_incdir"
     fi
@@ -17108,7 +17112,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 17111 "configure"
+#line 17115 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -17214,7 +17218,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 17217 "configure"
+#line 17221 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
diff --git a/gcc/configure.ac b/gcc/configure.ac
index 45d29595c..a8ebb0cf7 100644
--- a/gcc/configure.ac
+++ b/gcc/configure.ac
@@ -132,11 +132,14 @@ no)	;;
 esac])
 
 # This logic must match libstdc++-v3/acinclude.m4:GLIBCXX_EXPORT_INSTALL_INFO.
+libstdcxx_incdir_base=c++
+AC_SUBST(libstdcxx_incdir_base)
+
 if test x${gcc_gxx_include_dir} = x; then
   if test x${enable_version_specific_runtime_libs} = xyes; then
-    gcc_gxx_include_dir='${libsubdir}/include/c++'
+    gcc_gxx_include_dir='${libsubdir}/include/$(libstdcxx_incdir_base)'
   else
-    libstdcxx_incdir='include/c++/$(version)'
+    libstdcxx_incdir='include/$(libstdcxx_incdir_base)/$(version)'
     if test x$host != x$target; then
        libstdcxx_incdir="$target_alias/$libstdcxx_incdir"
     fi
diff --git a/gcc/gcc.c b/gcc/gcc.c
index e7ee3820e..dcc3c2d1a 100644
--- a/gcc/gcc.c
+++ b/gcc/gcc.c
@@ -765,6 +765,10 @@ proper position among the other output files.  */
 #endif
 
 
+#ifndef POST_LINK_SPEC
+#define POST_LINK_SPEC ""
+#endif
+
 /* -u* was put back because both BSD and SysV seem to support it.  */
 /* %{static:} simply prevents an error message if the target machine
    doesn't handle -static.  */
@@ -796,7 +800,7 @@ proper position among the other output files.  */
     %{fopenmp|ftree-parallelize-loops=*:%:include(libgomp.spec)%(link_gomp)} %(mflib)\
     %{fprofile-arcs|fprofile-generate*|coverage:-lgcov}\
     %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}\
-    %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}"
+    %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} \n%(post_link) }}}}}}"
 #endif
 
 #ifndef LINK_LIBGCC_SPEC
@@ -842,6 +846,7 @@ static const char *linker_plugin_file_spec = "";
 static const char *lto_wrapper_spec = "";
 static const char *lto_gcc_spec = "";
 static const char *lto_libgcc_spec = "";
+static const char *post_link_spec = POST_LINK_SPEC;
 static const char *link_command_spec = LINK_COMMAND_SPEC;
 static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;
 static const char *startfile_prefix_spec = STARTFILE_PREFIX_SPEC;
@@ -1608,10 +1613,12 @@ static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
 static const char *md_exec_prefix = MD_EXEC_PREFIX;
 static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;
 static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;
+#ifndef __DJGPP__
 static const char *const standard_startfile_prefix_1
   = STANDARD_STARTFILE_PREFIX_1;
 static const char *const standard_startfile_prefix_2
   = STANDARD_STARTFILE_PREFIX_2;
+#endif
 
 /* A relative path to be used in finding the location of tools
    relative to the driver.  */
@@ -1689,6 +1696,7 @@ static struct spec_list static_specs[] =
   INIT_STATIC_SPEC ("lto_wrapper",		&lto_wrapper_spec),
   INIT_STATIC_SPEC ("lto_gcc",			&lto_gcc_spec),
   INIT_STATIC_SPEC ("lto_libgcc",		&lto_libgcc_spec),
+  INIT_STATIC_SPEC ("post_link",                &post_link_spec),
   INIT_STATIC_SPEC ("link_libgcc",		&link_libgcc_spec),
   INIT_STATIC_SPEC ("md_exec_prefix",		&md_exec_prefix),
   INIT_STATIC_SPEC ("md_startfile_prefix",	&md_startfile_prefix),
@@ -4322,6 +4330,7 @@ process_command (int argc, const char **argv)
      configured-in locations.  */
   if (!gcc_exec_prefix)
     {
+#ifndef __DJGPP__
 #ifndef OS2
       add_prefix (&exec_prefixes, standard_libexec_prefix, "GCC",
 		  PREFIX_PRIORITY_LAST, 1, 0);
@@ -4332,6 +4341,7 @@ process_command (int argc, const char **argv)
 #endif
       add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
 		  PREFIX_PRIORITY_LAST, 1, 0);
+#endif
     }
 
   gcc_assert (!IS_ABSOLUTE_PATH (tooldir_base_prefix));
@@ -7085,6 +7095,7 @@ main (int argc, char **argv)
 		      NULL, PREFIX_PRIORITY_LAST, 0, 1);
 	}
 
+#ifndef __DJGPP__
       /* Sysrooted prefixes are relocated because target_system_root is
 	 also relocated by gcc_exec_prefix.  */
       if (*standard_startfile_prefix_1)
@@ -7095,6 +7106,7 @@ main (int argc, char **argv)
 	add_sysrooted_prefix (&startfile_prefixes,
 			      standard_startfile_prefix_2, "BINUTILS",
 			      PREFIX_PRIORITY_LAST, 0, 1);
+#endif
     }
 
   /* Process any user specified specs in the order given on the command
diff --git a/gcc/gcov.c b/gcc/gcov.c
index 1c1403d92..5ec8532e9 100644
--- a/gcc/gcov.c
+++ b/gcc/gcov.c
@@ -1552,6 +1552,23 @@ make_gcov_file_name (const char *input_name, const char *src_name)
     }
 
   strcat (name, ".gcov");
+#ifdef __DJGPP__
+     if (!_use_lfn(name))
+       {
+           char *s1, *s2=NULL;
+           for (s1=name; *s1 && *s1!='.'; s1++);
+           if (*s1) for (s2=s1+1; *s2 && *s2!='.'; s2++);
+           if (s2 && *s2=='.')
+             {
+                 int l;
+                 s1++;  l=s2-s1;  if (l>2) l=2;
+                 s1 = s1+l;  s2++;
+                 while (*s2) { *s1++=*s2++; }
+                 *s1=0;
+             }
+       }
+#endif
+
   return name;
 }
 
diff --git a/gcc/ginclude/float.h b/gcc/ginclude/float.h
index 9969f1c88..4eba7e9d0 100644
--- a/gcc/ginclude/float.h
+++ b/gcc/ginclude/float.h
@@ -25,6 +25,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  * ISO C Standard:  5.2.4.2.2  Characteristics of floating types <float.h>
  */
 
+#ifdef __DJGPP__
+#include_next <float.h>
+#endif
+
 #ifndef _FLOAT_H___
 #define _FLOAT_H___
 
diff --git a/include/libiberty.h b/include/libiberty.h
index a7716e4a4..85d71adb7 100644
--- a/include/libiberty.h
+++ b/include/libiberty.h
@@ -102,7 +102,7 @@ extern int writeargv PARAMS ((char **, FILE *));
    to find the declaration so provide a fully prototyped one.  If it
    is 1, we found it so don't provide any declaration at all.  */
 #if !HAVE_DECL_BASENAME
-#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (HAVE_DECL_BASENAME)
+#if defined (__GNU_LIBRARY__ ) || defined (__linux__) || defined (__FreeBSD__) || defined (__OpenBSD__) || defined(__NetBSD__) || defined (__CYGWIN__) || defined (__CYGWIN32__) || defined (__MINGW32__) || defined (__DJGPP__) || defined (HAVE_DECL_BASENAME)
 extern char *basename (const char *);
 #else
 /* Do not allow basename to be used if there is no prototype seen.  We
diff --git a/libada/Makefile.in b/libada/Makefile.in
index 01fa83623..d014b95f7 100644
--- a/libada/Makefile.in
+++ b/libada/Makefile.in
@@ -68,6 +68,12 @@ include $(GCC_DIR)/libgcc.mvars
 
 target_noncanonical:=@target_noncanonical@
 version := $(shell cat $(srcdir)/../gcc/BASE-VER)
+
+ifneq ($(findstring djgpp, $(build)),)
+tmp_version := $(shell echo $(version) | sed -e 's:\.::2g')
+version := $(tmp_version)
+endif
+
 libsubdir := $(libdir)/gcc/$(target_noncanonical)/$(version)$(MULTISUBDIR)
 ADA_RTS_DIR=$(GCC_DIR)/ada/rts$(subst /,_,$(MULTISUBDIR))
 
diff --git a/libcpp/files.c b/libcpp/files.c
index ecf9d6c46..20136c777 100644
--- a/libcpp/files.c
+++ b/libcpp/files.c
@@ -645,6 +645,10 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)
     cpp_error (pfile, CPP_DL_WARNING,
 	       "%s is shorter than expected", file->path);
 
+/* For DOS we should handle DOS EOF character (0x1A, ^Z). It is
+   only done if it is really the last character of the file  */
+  if (total>0 && buf[total-1]==0x1A) total--;
+
   file->buffer = _cpp_convert_input (pfile,
 				     CPP_OPTION (pfile, input_charset),
 				     buf, size, total,
diff --git a/libgfortran/Makefile.am b/libgfortran/Makefile.am
index bd767a2e6..dc8ee0cbc 100644
--- a/libgfortran/Makefile.am
+++ b/libgfortran/Makefile.am
@@ -20,11 +20,21 @@ toolexeclib_LTLIBRARIES = libgfortran.la
 libgfortran_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)
 libgfortran_la_LDFLAGS = -version-info `grep -v '^\#' $(srcdir)/libtool-version` $(LTLDFLAGS) -lm $(extra_ldflags_libgfortran) $(version_arg)
 
+if DJGPP
+myexeclib_LTLIBRARIES = libgf95begin.la
+else
 myexeclib_LTLIBRARIES = libgfortranbegin.la
-myexeclibdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)
+endif
+myexeclibdir = $(libdir)/gcc/$(target_alias)/$(gcc_version_alias)$(MULTISUBDIR)
+if DJGPP
+libgf95begin_la_SOURCES = fmain.c
+libgf95begin_la_LDFLAGS = -static
+libgf95begin_la_LINK = $(LINK) $(libgf95begin_la_LDFLAGS)
+else
 libgfortranbegin_la_SOURCES = fmain.c
 libgfortranbegin_la_LDFLAGS = -static
 libgfortranbegin_la_LINK = $(LINK) $(libgfortranbegin_la_LDFLAGS)
+endif
 
 ## io.h conflicts with a system header on some platforms, so
 ## use -iquote
diff --git a/libgfortran/Makefile.in b/libgfortran/Makefile.in
index 02e93b152..cadc36f5b 100644
--- a/libgfortran/Makefile.in
+++ b/libgfortran/Makefile.in
@@ -88,6 +88,11 @@ am__base_list = \
 am__installdirs = "$(DESTDIR)$(myexeclibdir)" \
 	"$(DESTDIR)$(toolexeclibdir)"
 LTLIBRARIES = $(myexeclib_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)
+libgf95begin_la_LIBADD =
+am__libgf95begin_la_SOURCES_DIST = fmain.c
+@DJGPP_TRUE@am_libgf95begin_la_OBJECTS = fmain.lo
+libgf95begin_la_OBJECTS = $(am_libgf95begin_la_OBJECTS)
+@DJGPP_TRUE@am_libgf95begin_la_rpath = -rpath $(myexeclibdir)
 libgfortran_la_LIBADD =
 am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c runtime/bounds.c \
 	runtime/compile_options.c runtime/convert_char.c \
@@ -776,8 +781,10 @@ am__objects_42 = $(am__objects_1) $(am__objects_34) $(am__objects_35) \
 @onestep_TRUE@am_libgfortran_la_OBJECTS = libgfortran_c.lo
 libgfortran_la_OBJECTS = $(am_libgfortran_la_OBJECTS)
 libgfortranbegin_la_LIBADD =
-am_libgfortranbegin_la_OBJECTS = fmain.lo
+am__libgfortranbegin_la_SOURCES_DIST = fmain.c
+@DJGPP_FALSE@am_libgfortranbegin_la_OBJECTS = fmain.lo
 libgfortranbegin_la_OBJECTS = $(am_libgfortranbegin_la_OBJECTS)
+@DJGPP_FALSE@am_libgfortranbegin_la_rpath = -rpath $(myexeclibdir)
 DEFAULT_INCLUDES = -I.@am__isrc@
 depcomp = $(SHELL) $(top_srcdir)/../depcomp
 am__depfiles_maybe = depfiles
@@ -803,9 +810,11 @@ LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
 FCCOMPILE = $(FC) $(AM_FCFLAGS) $(FCFLAGS)
 LTFCCOMPILE = $(LIBTOOL) --tag=FC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
 	--mode=compile $(FC) $(AM_FCFLAGS) $(FCFLAGS)
-SOURCES = $(libgfortran_la_SOURCES) $(libgfortranbegin_la_SOURCES)
-DIST_SOURCES = $(am__libgfortran_la_SOURCES_DIST) \
+SOURCES = $(libgf95begin_la_SOURCES) $(libgfortran_la_SOURCES) \
 	$(libgfortranbegin_la_SOURCES)
+DIST_SOURCES = $(am__libgf95begin_la_SOURCES_DIST) \
+	$(am__libgfortran_la_SOURCES_DIST) \
+	$(am__libgfortranbegin_la_SOURCES_DIST)
 MULTISRCTOP = 
 MULTIBUILDTOP = 
 MULTIDIRS = 
@@ -929,6 +938,7 @@ enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
 extra_ldflags_libgfortran = @extra_ldflags_libgfortran@
+gcc_version_alias = @gcc_version_alias@
 host = @host@
 host_alias = @host_alias@
 host_cpu = @host_cpu@
@@ -977,11 +987,15 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \
 toolexeclib_LTLIBRARIES = libgfortran.la
 libgfortran_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)
 libgfortran_la_LDFLAGS = -version-info `grep -v '^\#' $(srcdir)/libtool-version` $(LTLDFLAGS) -lm $(extra_ldflags_libgfortran) $(version_arg)
-myexeclib_LTLIBRARIES = libgfortranbegin.la
-myexeclibdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)$(MULTISUBDIR)
-libgfortranbegin_la_SOURCES = fmain.c
-libgfortranbegin_la_LDFLAGS = -static
-libgfortranbegin_la_LINK = $(LINK) $(libgfortranbegin_la_LDFLAGS)
+@DJGPP_FALSE@myexeclib_LTLIBRARIES = libgfortranbegin.la
+@DJGPP_TRUE@myexeclib_LTLIBRARIES = libgf95begin.la
+myexeclibdir = $(libdir)/gcc/$(target_alias)/$(gcc_version_alias)$(MULTISUBDIR)
+@DJGPP_TRUE@libgf95begin_la_SOURCES = fmain.c
+@DJGPP_TRUE@libgf95begin_la_LDFLAGS = -static
+@DJGPP_TRUE@libgf95begin_la_LINK = $(LINK) $(libgf95begin_la_LDFLAGS)
+@DJGPP_FALSE@libgfortranbegin_la_SOURCES = fmain.c
+@DJGPP_FALSE@libgfortranbegin_la_LDFLAGS = -static
+@DJGPP_FALSE@libgfortranbegin_la_LINK = $(LINK) $(libgfortranbegin_la_LDFLAGS)
 AM_CPPFLAGS = -iquote$(srcdir)/io -I$(srcdir)/$(MULTISRCTOP)../gcc \
 	      -I$(srcdir)/$(MULTISRCTOP)../gcc/config \
 	      -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc -D_GNU_SOURCE
@@ -1814,10 +1828,12 @@ clean-toolexeclibLTLIBRARIES:
 	  echo "rm -f \"$${dir}/so_locations\""; \
 	  rm -f "$${dir}/so_locations"; \
 	done
+libgf95begin.la: $(libgf95begin_la_OBJECTS) $(libgf95begin_la_DEPENDENCIES) 
+	$(libgf95begin_la_LINK) $(am_libgf95begin_la_rpath) $(libgf95begin_la_OBJECTS) $(libgf95begin_la_LIBADD) $(LIBS)
 libgfortran.la: $(libgfortran_la_OBJECTS) $(libgfortran_la_DEPENDENCIES) 
 	$(libgfortran_la_LINK) -rpath $(toolexeclibdir) $(libgfortran_la_OBJECTS) $(libgfortran_la_LIBADD) $(LIBS)
 libgfortranbegin.la: $(libgfortranbegin_la_OBJECTS) $(libgfortranbegin_la_DEPENDENCIES) 
-	$(libgfortranbegin_la_LINK) -rpath $(myexeclibdir) $(libgfortranbegin_la_OBJECTS) $(libgfortranbegin_la_LIBADD) $(LIBS)
+	$(libgfortranbegin_la_LINK) $(am_libgfortranbegin_la_rpath) $(libgfortranbegin_la_OBJECTS) $(libgfortranbegin_la_LIBADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
diff --git a/libgfortran/configure b/libgfortran/configure
index 46e08630f..846de7207 100755
--- a/libgfortran/configure
+++ b/libgfortran/configure
@@ -652,6 +652,9 @@ CFLAGS
 CC
 toolexeclibdir
 toolexecdir
+gcc_version_alias
+DJGPP_FALSE
+DJGPP_TRUE
 multi_basedir
 MAINT
 MAINTAINER_MODE_FALSE
@@ -3360,6 +3363,16 @@ fi
 ac_config_commands="$ac_config_commands default-1"
 
 
+# Add test for DJGPP
+ if echo $build | grep msdosdjgpp; then
+  DJGPP_TRUE=
+  DJGPP_FALSE='#'
+else
+  DJGPP_TRUE='#'
+  DJGPP_FALSE=
+fi
+
+
 # Handy for debugging:
 #AC_MSG_NOTICE($build / $host / $target / $host_alias / $target_alias); sleep 5
 
@@ -3373,6 +3386,19 @@ else
   LIBGFOR_IS_NATIVE=true
 fi
 
+# Convert GCC version string (to be used as directory name)
+# Does nothing except for DJGPP
+case "$build" in
+  *-msdosdjgpp*)
+     gcc_version_alias='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+     ;;
+  *)
+     gcc_version_alias='$(gcc_version)'
+     ;;
+esac
+
+
+
 # Calculate toolexeclibdir
 # Also toolexecdir, though it's only used in toolexeclibdir
 case ${version_specific_libs} in
@@ -3381,7 +3407,7 @@ case ${version_specific_libs} in
     # and header files if --enable-version-specific-runtime-libs option
     # is selected.
     toolexecdir='$(libdir)/gcc/$(target_alias)'
-    toolexeclibdir='$(toolexecdir)/$(gcc_version)$(MULTISUBDIR)'
+    toolexeclibdir='$(toolexecdir)/$(gcc_version_alias)$(MULTISUBDIR)'
     ;;
   no)
     if test -n "$with_cross_host" &&
@@ -11306,7 +11332,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11309 "configure"
+#line 11335 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11412,7 +11438,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11415 "configure"
+#line 11441 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -25078,6 +25104,10 @@ if test -z "${MAINTAINER_MODE_TRUE}" && test -z "${MAINTAINER_MODE_FALSE}"; then
   as_fn_error "conditional \"MAINTAINER_MODE\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
+if test -z "${DJGPP_TRUE}" && test -z "${DJGPP_FALSE}"; then
+  as_fn_error "conditional \"DJGPP\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 if test -z "${AMDEP_TRUE}" && test -z "${AMDEP_FALSE}"; then
   as_fn_error "conditional \"AMDEP\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
diff --git a/libgfortran/configure.ac b/libgfortran/configure.ac
index 104f2c18d..d530ba8a1 100644
--- a/libgfortran/configure.ac
+++ b/libgfortran/configure.ac
@@ -67,6 +67,9 @@ AM_INIT_AUTOMAKE([1.9.6 no-define foreign -Wall -Wno-portability])
 AM_MAINTAINER_MODE
 AM_ENABLE_MULTILIB(, ..)
 
+# Add test for DJGPP
+AM_CONDITIONAL(DJGPP,echo $build | grep msdosdjgpp)
+
 # Handy for debugging:
 #AC_MSG_NOTICE($build / $host / $target / $host_alias / $target_alias); sleep 5
 
@@ -80,6 +83,19 @@ else
   LIBGFOR_IS_NATIVE=true
 fi
 
+# Convert GCC version string (to be used as directory name)
+# Does nothing except for DJGPP
+case "$build" in
+  *-msdosdjgpp*)
+     gcc_version_alias='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+     ;;
+  *)
+     gcc_version_alias='$(gcc_version)'
+     ;; 
+esac
+
+AC_SUBST(gcc_version_alias)
+
 # Calculate toolexeclibdir
 # Also toolexecdir, though it's only used in toolexeclibdir
 case ${version_specific_libs} in
@@ -88,7 +104,7 @@ case ${version_specific_libs} in
     # and header files if --enable-version-specific-runtime-libs option
     # is selected.
     toolexecdir='$(libdir)/gcc/$(target_alias)'
-    toolexeclibdir='$(toolexecdir)/$(gcc_version)$(MULTISUBDIR)'
+    toolexeclibdir='$(toolexecdir)/$(gcc_version_alias)$(MULTISUBDIR)'
     ;;
   no)
     if test -n "$with_cross_host" &&
diff --git a/libgfortran/io/unix.c b/libgfortran/io/unix.c
index 32f38904f..e4e761a74 100644
--- a/libgfortran/io/unix.c
+++ b/libgfortran/io/unix.c
@@ -156,6 +156,9 @@ typedef struct
 }
 unix_stream;
 
+#ifdef __DJGPP__
+#include <io.h>
+#endif
 
 /* fix_fd()-- Given a file descriptor, make sure it is not one of the
  * standard descriptors, returning a non-standard descriptor.  If the
@@ -889,7 +892,12 @@ tempfile (st_parameter_open *opp)
 
   template = get_mem (strlen (tempdir) + 20);
 
+#ifdef __DJGPP__
+  /* Default filename is too long for DOS */
+  sprintf (template, "%s/gfXXXXXX", tempdir);
+#else
   sprintf (template, "%s/gfortrantmpXXXXXX", tempdir);
+#endif
 
 #ifdef HAVE_MKSTEMP
 
@@ -1121,6 +1129,13 @@ open_external (st_parameter_open *opp, unit_flags *flags)
       internal_error (&opp->common, "open_external(): Bad action");
     }
 
+#ifdef __DJGPP__
+  if (flags->form == FORM_UNFORMATTED)
+    {
+      setmode (fd, O_BINARY);
+    }
+#endif
+
   return fd_to_stream (fd, prot);
 }
 
diff --git a/libiberty/config/mh-djgpp b/libiberty/config/mh-djgpp
new file mode 100644
index 000000000..829a268b6
--- /dev/null
+++ b/libiberty/config/mh-djgpp
@@ -0,0 +1,3 @@
+EXTRA_OFILES=asprintf.o mempcpy.o mkstemps.o sigsetmask.o strndup.o strverscmp.o vasprintf.o
+# Only DJGPP v2.04pre have snprinf() and vsnprintf(). Therefore take also them
+EXTRA_OFILES+=snprintf.o vsnprintf.o
diff --git a/libiberty/configure b/libiberty/configure
index 77aeb56c7..c8d5bb0c6 100755
--- a/libiberty/configure
+++ b/libiberty/configure
@@ -4828,6 +4828,7 @@ case "${host}" in
   *-*-freebsd2.2.[012])	frag=mh-fbsd21 ;;
   i370-*-opened*)       frag=mh-openedition ;;
   i[34567]86-*-windows*)	frag=mh-windows ;;
+  i[34567]86-*-msdosdjgpp)	frag=mh-djgpp ;;
 esac
 
 if [ -n "${frag}" ]; then
diff --git a/libiberty/configure.ac b/libiberty/configure.ac
index 515bb3384..be8ecb1d6 100644
--- a/libiberty/configure.ac
+++ b/libiberty/configure.ac
@@ -185,6 +185,7 @@ case "${host}" in
   *-*-freebsd2.2.[[012]])	frag=mh-fbsd21 ;;
   i370-*-opened*)       frag=mh-openedition ;;
   i[[34567]]86-*-windows*)	frag=mh-windows ;;
+  i[[34567]]86-*-msdosdjgpp)	frag=mh-djgpp ;;
 esac
 
 if [[ -n "${frag}" ]]; then
diff --git a/libiberty/make-relative-prefix.c b/libiberty/make-relative-prefix.c
index 2fcccac38..1929c28ec 100644
--- a/libiberty/make-relative-prefix.c
+++ b/libiberty/make-relative-prefix.c
@@ -81,6 +81,7 @@ relative prefix can be found, return @code{NULL}.
 #  define HAVE_DOS_BASED_FILE_SYSTEM
 #  define HAVE_HOST_EXECUTABLE_SUFFIX
 #  define HOST_EXECUTABLE_SUFFIX ".exe"
+#  define FILENAME_COMPARE strcasecmp
 #  ifndef DIR_SEPARATOR_2 
 #    define DIR_SEPARATOR_2 '\\'
 #  endif
@@ -96,6 +97,10 @@ relative prefix can be found, return @code{NULL}.
 	(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))
 #endif
 
+#ifndef FILENAME_COMPARE
+#  define FILENAME_COMPARE strcmp
+#endif
+
 #define DIR_UP ".."
 
 static char *save_string (const char *, int);
@@ -333,7 +338,7 @@ make_relative_prefix_1 (const char *progname, const char *bin_prefix,
     {
       for (i = 0; i < bin_num; i++)
 	{
-	  if (strcmp (prog_dirs[i], bin_dirs[i]) != 0)
+	  if (FILENAME_COMPARE (prog_dirs[i], bin_dirs[i]) != 0)
 	    break;
 	}
 
@@ -349,7 +354,7 @@ make_relative_prefix_1 (const char *progname, const char *bin_prefix,
   n = (prefix_num < bin_num) ? prefix_num : bin_num;
   for (common = 0; common < n; common++)
     {
-      if (strcmp (bin_dirs[common], prefix_dirs[common]) != 0)
+      if (FILENAME_COMPARE (bin_dirs[common], prefix_dirs[common]) != 0)
 	break;
     }
 
diff --git a/libiberty/make-temp-file.c b/libiberty/make-temp-file.c
index 13e192565..94849c6f8 100644
--- a/libiberty/make-temp-file.c
+++ b/libiberty/make-temp-file.c
@@ -54,6 +54,29 @@ extern int mkstemps (char *, int);
 #define DIR_SEPARATOR '/'
 #endif
 
+#if defined (_WIN32) || defined (__MSDOS__) \
+    || defined (__DJGPP__) || defined (__OS2__)
+#  define HAVE_DOS_BASED_FILE_SYSTEM
+#  ifndef DIR_SEPARATOR_2 
+#    define DIR_SEPARATOR_2 '\\'
+#  endif
+#endif
+
+/* Define IS_DIR_SEPARATOR. VMS uses '::', ':', '[...]' and '<...>' to
+   separate the different components of a file specification.  It's a
+   bit of a stretch to call ':', ']' and '>' directory separators, so
+   just define the test to find the file name component.  */
+#ifdef VMS
+#  define IS_DIR_SEPARATOR(ch) ((ch) == ':' || (ch) == ']' || (ch) == '>')
+#else
+#  ifndef DIR_SEPARATOR_2
+#    define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)
+#  else
+#    define IS_DIR_SEPARATOR(ch) \
+	(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))
+#  endif
+#endif
+
 /* Name of temporary file.
    mktemp requires 6 trailing X's.  */
 #define TEMP_FILE "ccXXXXXX"
@@ -137,7 +160,8 @@ choose_tmpdir (void)
       len = strlen (base);
       tmpdir = XNEWVEC (char, len + 2);
       strcpy (tmpdir, base);
-      tmpdir[len] = DIR_SEPARATOR;
+      if (len>0 && !IS_DIR_SEPARATOR(tmpdir[len-1]))   
+          tmpdir[len] = DIR_SEPARATOR;
       tmpdir[len+1] = '\0';
       memoized_tmpdir = tmpdir;
 #else /* defined(_WIN32) && !defined(__CYGWIN__) */
diff --git a/libobjc/Makefile.in b/libobjc/Makefile.in
index 71faf8ac4..62718d200 100644
--- a/libobjc/Makefile.in
+++ b/libobjc/Makefile.in
@@ -39,6 +39,8 @@ multi_basedir = @multi_basedir@
 toolexecdir = @toolexecdir@
 # Toolexecdir is used only by toolexeclibdir
 toolexeclibdir = @toolexeclibdir@
+# Editted (if neccessary) GCC version string
+gcc_version_dir = @gcc_version_dir@
 
 includedirname = @includedirname@
 libsuffix = @libsuffix@
@@ -50,7 +52,7 @@ top_builddir = .
 -include ../boehm-gc/threads.mk
 
 libdir = $(exec_prefix)/lib
-libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version)
+libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version_dir)
 
 # Multilib support variables.
 MULTISRCTOP =
diff --git a/libobjc/configure b/libobjc/configure
index 1dfcb31bd..65ca533c7 100755
--- a/libobjc/configure
+++ b/libobjc/configure
@@ -600,6 +600,7 @@ ac_includes_default="\
 
 ac_subst_vars='LTLIBOBJS
 LIBOBJS
+gcc_version_dir
 SET_MAKE
 CPP
 OTOOL64
@@ -10566,7 +10567,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 10569 "configure"
+#line 10570 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -10672,7 +10673,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 10675 "configure"
+#line 10676 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11246,7 +11247,7 @@ if test "${enable_sjlj_exceptions+set}" = set; then :
   enableval=$enable_sjlj_exceptions; :
 else
   cat > conftest.$ac_ext << EOF
-#line 11249 "configure"
+#line 11250 "configure"
 @interface Frob
 @end
 @implementation Frob
@@ -11298,6 +11299,19 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_exception_model_name" >&5
 $as_echo "$ac_exception_model_name" >&6; }
 
+# For DJGPP there should not be more than 1 dot. Therefore edit
+# version in case of DJGPP
+case $build in
+	i?86-*-msdosdjgpp*)
+		gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+		;;
+
+	* )
+		gcc_version_dir='$(gcc_version)'
+		;;
+esac
+
+
 # ------
 # Output
 # ------
diff --git a/libobjc/configure.ac b/libobjc/configure.ac
index 8820edc7e..95644a779 100644
--- a/libobjc/configure.ac
+++ b/libobjc/configure.ac
@@ -270,6 +270,19 @@ fi
 AC_LANG_POP(C)
 AC_MSG_RESULT($ac_exception_model_name)
 
+# For DJGPP there should not be more than 1 dot. Therefore edit
+# version in case of DJGPP
+[case $build in
+	i?86-*-msdosdjgpp*)
+		gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+		;;
+
+	* )
+		gcc_version_dir='$(gcc_version)'
+		;;
+esac]
+AC_SUBST(gcc_version_dir)
+
 # ------
 # Output
 # ------
diff --git a/libssp/Makefile.am b/libssp/Makefile.am
index 7b6e94650..b9880c1c7 100644
--- a/libssp/Makefile.am
+++ b/libssp/Makefile.am
@@ -24,7 +24,7 @@ AM_CFLAGS = -Wall
 toolexeclib_LTLIBRARIES = libssp.la libssp_nonshared.la
 
 target_noncanonical = @target_noncanonical@
-libsubincludedir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version)/include
+libsubincludedir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version_dir)/include
 nobase_libsubinclude_HEADERS = ssp/ssp.h ssp/string.h ssp/stdio.h ssp/unistd.h
 
 libssp_la_SOURCES = \
diff --git a/libssp/Makefile.in b/libssp/Makefile.in
index fc83109e4..856a65d26 100644
--- a/libssp/Makefile.in
+++ b/libssp/Makefile.in
@@ -220,6 +220,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_dir = @gcc_version_dir@
 host = @host@
 host_alias = @host_alias@
 host_cpu = @host_cpu@
@@ -269,7 +270,7 @@ gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)
 @LIBSSP_USE_SYMVER_TRUE@version_dep = $(srcdir)/ssp.map
 AM_CFLAGS = -Wall
 toolexeclib_LTLIBRARIES = libssp.la libssp_nonshared.la
-libsubincludedir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version)/include
+libsubincludedir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version_dir)/include
 nobase_libsubinclude_HEADERS = ssp/ssp.h ssp/string.h ssp/stdio.h ssp/unistd.h
 libssp_la_SOURCES = \
 	ssp.c gets-chk.c memcpy-chk.c memmove-chk.c mempcpy-chk.c \
diff --git a/libssp/configure b/libssp/configure
index d5e83844f..4acc5f484 100755
--- a/libssp/configure
+++ b/libssp/configure
@@ -602,6 +602,7 @@ ac_subst_vars='am__EXEEXT_FALSE
 am__EXEEXT_TRUE
 LTLIBOBJS
 LIBOBJS
+gcc_version_dir
 toolexeclibdir
 toolexecdir
 enable_static
@@ -10591,7 +10592,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 10594 "configure"
+#line 10595 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -10697,7 +10698,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 10700 "configure"
+#line 10701 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -10973,6 +10974,19 @@ else
   multilib_arg=
 fi
 
+# For DJGPP there should not be more than 1 dot. Therefore edit
+# version in case of DJGPP
+case $build in
+       i?86-*-msdosdjgpp*)
+               gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+               ;;
+
+       * )
+               gcc_version_dir='$(gcc_version)'
+               ;;
+esac
+
+
 ac_config_files="$ac_config_files Makefile ssp/ssp.h"
 
 cat >confcache <<\_ACEOF
diff --git a/libssp/configure.ac b/libssp/configure.ac
index fae10572b..bdc16f394 100644
--- a/libssp/configure.ac
+++ b/libssp/configure.ac
@@ -170,5 +170,18 @@ else
   multilib_arg=
 fi
 
+# For DJGPP there should not be more than 1 dot. Therefore edit
+# version in case of DJGPP
+[case $build in
+       i?86-*-msdosdjgpp*)
+               gcc_version_dir='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+               ;;
+
+       * )
+               gcc_version_dir='$(gcc_version)'
+               ;;
+esac]
+AC_SUBST(gcc_version_dir)
+
 AC_CONFIG_FILES([Makefile ssp/ssp.h])
 AC_OUTPUT
diff --git a/libstdc++-v3/Makefile.in b/libstdc++-v3/Makefile.in
index ecfe02a2a..e6e39b198 100644
--- a/libstdc++-v3/Makefile.in
+++ b/libstdc++-v3/Makefile.in
@@ -257,6 +257,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -279,6 +280,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
diff --git a/libstdc++-v3/acinclude.m4 b/libstdc++-v3/acinclude.m4
index f54517f20..0590d972e 100644
--- a/libstdc++-v3/acinclude.m4
+++ b/libstdc++-v3/acinclude.m4
@@ -707,9 +707,23 @@ AC_DEFUN([GLIBCXX_EXPORT_INSTALL_INFO], [
     [version_specific_libs=no])
   AC_MSG_RESULT($version_specific_libs)
 
+  # Convert GCC version string (to be used as directory name)
+  # Does nothing except for DJGPP
+  case "$build" in
+    *-msdosdjgpp*)
+       libstdcxx_incdir_base=cxx
+       gcc_version_alias='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+       ;;
+    *)
+       libstdcxx_incdir_base=c++
+       gcc_version_alias='$(gcc_version)'
+       ;; 
+  esac
+
   # Default case for install directory for include files.
   if test $version_specific_libs = no && test $gxx_include_dir = no; then
-    gxx_include_dir='include/c++/${gcc_version}'
+    gxx_include_dir='include/$(libstdcxx_incdir_base)/$(gcc_version_alias)'
+
     if test -n "$with_cross_host" && 
        test x"$with_cross_host" != x"no"; then	
       gxx_include_dir='${prefix}/${target_alias}/'"$gxx_include_dir"
@@ -725,10 +739,10 @@ AC_DEFUN([GLIBCXX_EXPORT_INSTALL_INFO], [
     # is selected.  FIXME: these variables are misnamed, there are
     # no executables installed in _toolexecdir or _toolexeclibdir.
     if test x"$gxx_include_dir" = x"no"; then
-      gxx_include_dir='${libdir}/gcc/${host_alias}/${gcc_version}/include/c++'
+      gxx_include_dir='${libdir}/gcc/${host_alias}/${gcc_version_alias}/include/${libstdcxx_incdir_base}'
     fi
     glibcxx_toolexecdir='${libdir}/gcc/${host_alias}'
-    glibcxx_toolexeclibdir='${toolexecdir}/${gcc_version}$(MULTISUBDIR)'
+    glibcxx_toolexeclibdir='${toolexecdir}/${gcc_version_alias}$(MULTISUBDIR)'
   fi
 
   # Calculate glibcxx_toolexecdir, glibcxx_toolexeclibdir
@@ -756,6 +770,8 @@ AC_DEFUN([GLIBCXX_EXPORT_INSTALL_INFO], [
   AC_SUBST(gxx_include_dir)
   AC_SUBST(glibcxx_toolexecdir)
   AC_SUBST(glibcxx_toolexeclibdir)
+  AC_SUBST(libstdcxx_incdir_base)
+  AC_SUBST(gcc_version_alias)
 ])
 
 
diff --git a/libstdc++-v3/config/os/djgpp/error_constants.h b/libstdc++-v3/config/os/djgpp/error_constants.h
new file mode 100644
index 000000000..c7bc2697f
--- /dev/null
+++ b/libstdc++-v3/config/os/djgpp/error_constants.h
@@ -0,0 +1,226 @@
+// Specific definitions for generic platforms  -*- C++ -*-
+
+// Copyright (C) 2007 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 2, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING.  If not, write to the Free
+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
+// USA.
+
+// As a special exception, you may use this file as part of a free software
+// library without restriction.  Specifically, if other files instantiate
+// templates or use macros or inline functions from this file, or you compile
+// this file and link it with other files to produce an executable, this
+// file does not by itself cause the resulting executable to be covered by
+// the GNU General Public License.  This exception does not however
+// invalidate any other reasons why the executable file might be covered by
+// the GNU General Public License.
+
+/** @file error_constants.h
+ *  This is an internal header file, included by other library headers.
+ *  You should not attempt to use it directly.
+ */
+
+#ifndef _GLIBCXX_ERROR_CONSTANTS
+#  define _GLIBCXX_ERROR_CONSTANTS 1
+
+#include <bits/c++config.h>
+#include <cerrno>
+
+_GLIBCXX_BEGIN_NAMESPACE(std)
+
+enum class errc
+{
+#ifdef EAFNOSUPPORT
+      address_family_not_supported = 		EAFNOSUPPORT,
+#endif
+#ifdef EADDRINUSE
+      address_in_use = 				EADDRINUSE,
+#endif
+#ifdef EADDRNOTAVAIL
+      address_not_available = 			EADDRNOTAVAIL,
+#endif
+#ifdef EISCONN
+      already_connected = 			EISCONN,
+#endif
+      argument_list_too_long = 			E2BIG,
+      argument_out_of_domain = 			EDOM,
+      bad_address = 				EFAULT,
+      bad_file_descriptor = 			EBADF,
+
+#ifdef _GLIBCXX_HAVE_EBADMSG
+      bad_message = 				EBADMSG,
+#endif
+
+      broken_pipe = 				EPIPE,
+#ifdef ECONNABORTED
+      connection_aborted = 			ECONNABORTED,
+#endif
+#ifdef EALREADY
+      connection_already_in_progress = 		EALREADY,
+#endif
+#ifdef ECONNREFUSED
+      connection_refused = 			ECONNREFUSED,
+#endif
+#ifdef ECONNRESET
+      connection_reset = 			ECONNRESET,
+#endif
+      cross_device_link = 			EXDEV,
+#ifdef EDESTADDRREQ
+      destination_address_required = 		EDESTADDRREQ,
+#endif
+      device_or_resource_busy = 		EBUSY,
+      directory_not_empty = 			ENOTEMPTY,
+      executable_format_error = 		ENOEXEC,
+      file_exists = 	       			EEXIST,
+      file_too_large = 				EFBIG,
+      filename_too_long = 			ENAMETOOLONG,
+      function_not_supported = 			ENOSYS,
+#ifdef EHOSTUNREACH
+      host_unreachable = 			EHOSTUNREACH,
+#endif
+#ifdef EIDRM
+      identifier_removed = 			EIDRM,
+#endif
+#ifdef EILSEQ
+      illegal_byte_sequence = 			EILSEQ,
+#endif
+      inappropriate_io_control_operation = 	ENOTTY,
+      interrupted = 				EINTR,
+      invalid_argument = 			EINVAL,
+      invalid_seek = 				ESPIPE,
+      io_error = 				EIO,
+      is_a_directory = 				EISDIR,
+#ifdef EMSGSIZE
+      message_size = 				EMSGSIZE,
+#endif
+#ifdef ENETDOWN
+      network_down = 				ENETDOWN,
+#endif
+#ifdef ENETRESET
+      network_reset = 				ENETRESET,
+#endif
+#ifdef ENETUNREACH
+      network_unreachable = 			ENETUNREACH,
+#endif
+#ifdef ENOBUFS
+      no_buffer_space = 			ENOBUFS,
+#endif
+      no_child_process = 			ECHILD,
+
+#ifdef _GLIBCXX_HAVE_ENOLINK
+      no_link = 				ENOLINK,
+#endif
+      no_lock_available = 			ENOLCK,
+
+#ifdef _GLIBCXX_HAVE_ENODATA
+      no_message_available = 			ENODATA, 
+#endif
+
+#ifdef ENOMSG
+      no_message = 				ENOMSG, 
+#endif
+#ifdef ENOPROTOOPT
+      no_protocol_option = 			ENOPROTOOPT,
+#endif
+      no_space_on_device = 			ENOSPC,
+
+#ifdef _GLIBCXX_HAVE_ENOSR
+      no_stream_resources = 			ENOSR,
+#endif
+
+      no_such_device_or_address = 		ENXIO,
+      no_such_device = 				ENODEV,
+      no_such_file_or_directory = 		ENOENT,
+      no_such_process = 			ESRCH,
+      not_a_directory = 			ENOTDIR,
+#ifdef ENOTSOCK
+      not_a_socket = 				ENOTSOCK,
+#endif
+
+#ifdef _GLIBCXX_HAVE_ENOSTR
+      not_a_stream = 				ENOSTR,
+#endif
+
+#ifdef ENOTCONN
+      not_connected = 				ENOTCONN,
+#endif
+      not_enough_memory = 			ENOMEM,
+#ifdef ENOTSUP
+      not_supported = 				ENOTSUP,
+#endif
+
+#ifdef _GLIBCXX_HAVE_ECANCELED
+      operation_canceled = 			ECANCELED,
+#endif
+
+#ifdef EINPROGRESS
+      operation_in_progress = 			EINPROGRESS,
+#endif
+      operation_not_permitted = 		EPERM,
+#ifdef EOPNOTSUPP
+      operation_not_supported = 		EOPNOTSUPP,
+#endif
+#ifdef EWOULDBLOCK
+      operation_would_block = 			EWOULDBLOCK,
+#endif
+
+#ifdef _GLIBCXX_HAVE_EOWNERDEAD
+      owner_dead = 				EOWNERDEAD,
+#endif
+      permission_denied = 			EACCES,
+#ifdef _GLIBCXX_HAVE_EPROTO
+      protocol_error = 				EPROTO,
+#endif
+
+#ifdef EPROTONOSUPPORT
+      protocol_not_supported = 			EPROTONOSUPPORT,
+#endif
+      read_only_file_system = 			EROFS,
+      resource_deadlock_would_occur = 		EDEADLK,
+      resource_unavailable_try_again = 		EAGAIN,
+      result_out_of_range = 			ERANGE,
+#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE
+      state_not_recoverable = 			ENOTRECOVERABLE,
+#endif
+
+#ifdef _GLIBCXX_HAVE_ETIME
+      stream_timeout = 				ETIME,
+#endif
+
+#ifdef ETXTBSY
+      text_file_busy = 				ETXTBSY,
+#endif
+#ifdef ETIMEDOUT
+      timed_out = 				ETIMEDOUT,
+#endif
+      too_many_files_open_in_system = 		ENFILE,
+      too_many_files_open = 			EMFILE,
+      too_many_links = 				EMLINK,
+#ifdef ELOOP
+      too_many_synbolic_link_levels = 		ELOOP,
+#endif
+#ifdef _GLIBCXX_HAVE_EOVERFLOW
+      value_too_large = 			EOVERFLOW,
+#endif
+
+#ifdef EPROTOTYPE
+      wrong_protocol_type = 			EPROTOTYPE,
+#endif
+      no_posix_equivalent = 1L << 16
+};
+
+_GLIBCXX_END_NAMESPACE
+
+#endif
diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure
index 69f6b5d42..fd5a77037 100755
--- a/libstdc++-v3/configure
+++ b/libstdc++-v3/configure
@@ -607,6 +607,8 @@ WARN_FLAGS
 OPTIMIZE_CXXFLAGS
 TOPLEVEL_INCLUDES
 GLIBCXX_INCLUDES
+gcc_version_alias
+libstdcxx_incdir_base
 glibcxx_toolexeclibdir
 glibcxx_toolexecdir
 gxx_include_dir
@@ -714,6 +716,8 @@ LN_S
 toplevel_srcdir
 glibcxx_srcdir
 glibcxx_builddir
+DJGPP_FALSE
+DJGPP_TRUE
 ac_ct_CXX
 CXXFLAGS
 CXX
@@ -4550,6 +4554,16 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
 CXXFLAGS="$save_CXXFLAGS"
 
+# Add test for DJGPP environment
+ if echo $build | grep msdosdjgpp; then
+  DJGPP_TRUE=
+  DJGPP_FALSE='#'
+else
+  DJGPP_TRUE='#'
+  DJGPP_FALSE=
+fi
+
+
 # Runs configure.host, and assorted other critical bits.  Sets
 # up critical shell variables.
 
@@ -11441,7 +11455,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11444 "configure"
+#line 11458 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11547,7 +11561,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11550 "configure"
+#line 11564 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -14887,7 +14901,7 @@ fi
     #
     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.
     cat > conftest.$ac_ext << EOF
-#line 14890 "configure"
+#line 14904 "configure"
 struct S { ~S(); };
 void bar();
 void foo()
@@ -15255,7 +15269,7 @@ $as_echo "$glibcxx_cv_atomic_long_long" >&6; }
   # Fake what AC_TRY_COMPILE does.
 
     cat > conftest.$ac_ext << EOF
-#line 15258 "configure"
+#line 15272 "configure"
 int main()
 {
   typedef bool atomic_type;
@@ -15292,7 +15306,7 @@ $as_echo "$glibcxx_cv_atomic_bool" >&6; }
     rm -f conftest*
 
     cat > conftest.$ac_ext << EOF
-#line 15295 "configure"
+#line 15309 "configure"
 int main()
 {
   typedef short atomic_type;
@@ -15329,7 +15343,7 @@ $as_echo "$glibcxx_cv_atomic_short" >&6; }
     rm -f conftest*
 
     cat > conftest.$ac_ext << EOF
-#line 15332 "configure"
+#line 15346 "configure"
 int main()
 {
   // NB: _Atomic_word not necessarily int.
@@ -15367,7 +15381,7 @@ $as_echo "$glibcxx_cv_atomic_int" >&6; }
     rm -f conftest*
 
     cat > conftest.$ac_ext << EOF
-#line 15370 "configure"
+#line 15384 "configure"
 int main()
 {
   typedef long long atomic_type;
@@ -15443,7 +15457,7 @@ $as_echo "$as_me: WARNING: Performance of certain classes will degrade as a resu
   # unnecessary for this test.
 
     cat > conftest.$ac_ext << EOF
-#line 15446 "configure"
+#line 15460 "configure"
 int main()
 {
   _Decimal32 d1;
@@ -59075,9 +59089,23 @@ fi
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: $version_specific_libs" >&5
 $as_echo "$version_specific_libs" >&6; }
 
+  # Convert GCC version string (to be used as directory name)
+  # Does nothing except for DJGPP
+  case "$build" in
+    *-msdosdjgpp*)
+       libstdcxx_incdir_base=cxx
+       gcc_version_alias='$(shell echo $(gcc_version) | sed -e "s:\.::2g")'
+       ;;
+    *)
+       libstdcxx_incdir_base=c++
+       gcc_version_alias='$(gcc_version)'
+       ;;
+  esac
+
   # Default case for install directory for include files.
   if test $version_specific_libs = no && test $gxx_include_dir = no; then
-    gxx_include_dir='include/c++/${gcc_version}'
+    gxx_include_dir='include/$(libstdcxx_incdir_base)/$(gcc_version_alias)'
+
     if test -n "$with_cross_host" &&
        test x"$with_cross_host" != x"no"; then
       gxx_include_dir='${prefix}/${target_alias}/'"$gxx_include_dir"
@@ -59093,10 +59121,10 @@ $as_echo "$version_specific_libs" >&6; }
     # is selected.  FIXME: these variables are misnamed, there are
     # no executables installed in _toolexecdir or _toolexeclibdir.
     if test x"$gxx_include_dir" = x"no"; then
-      gxx_include_dir='${libdir}/gcc/${host_alias}/${gcc_version}/include/c++'
+      gxx_include_dir='${libdir}/gcc/${host_alias}/${gcc_version_alias}/include/${libstdcxx_incdir_base}'
     fi
     glibcxx_toolexecdir='${libdir}/gcc/${host_alias}'
-    glibcxx_toolexeclibdir='${toolexecdir}/${gcc_version}$(MULTISUBDIR)'
+    glibcxx_toolexeclibdir='${toolexecdir}/${gcc_version_alias}$(MULTISUBDIR)'
   fi
 
   # Calculate glibcxx_toolexecdir, glibcxx_toolexeclibdir
@@ -59128,6 +59156,8 @@ $as_echo "$gxx_include_dir" >&6; }
 
 
 
+
+
 # Export all the include and flag information to Makefiles.
 
   # Used for every C++ compile we perform.
@@ -59292,6 +59322,10 @@ else
   am__EXEEXT_FALSE=
 fi
 
+if test -z "${DJGPP_TRUE}" && test -z "${DJGPP_FALSE}"; then
+  as_fn_error "conditional \"DJGPP\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 if test -z "${MAINTAINER_MODE_TRUE}" && test -z "${MAINTAINER_MODE_FALSE}"; then
   as_fn_error "conditional \"MAINTAINER_MODE\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
diff --git a/libstdc++-v3/configure.ac b/libstdc++-v3/configure.ac
index 9fe9c3396..86db037cd 100644
--- a/libstdc++-v3/configure.ac
+++ b/libstdc++-v3/configure.ac
@@ -87,6 +87,9 @@ AC_PROG_CC
 AC_PROG_CXX
 CXXFLAGS="$save_CXXFLAGS"
 
+# Add test for DJGPP environment
+AM_CONDITIONAL(DJGPP,echo $build | grep msdosdjgpp)
+
 # Runs configure.host, and assorted other critical bits.  Sets
 # up critical shell variables.
 GLIBCXX_CONFIGURE
diff --git a/libstdc++-v3/configure.host b/libstdc++-v3/configure.host
index 4b4e2423c..2d85ef86c 100644
--- a/libstdc++-v3/configure.host
+++ b/libstdc++-v3/configure.host
@@ -231,6 +231,7 @@ case "${host_os}" in
     ;;
   *djgpp*)      # leading * picks up "msdosdjgpp"
     os_include_dir="os/djgpp"
+    error_constants_dir="os/djgpp"
     ;;
   freebsd*)
     os_include_dir="os/bsd/freebsd"
diff --git a/libstdc++-v3/doc/Makefile.in b/libstdc++-v3/doc/Makefile.in
index 025ec93a4..fa62b109e 100644
--- a/libstdc++-v3/doc/Makefile.in
+++ b/libstdc++-v3/doc/Makefile.in
@@ -194,6 +194,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -216,6 +217,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
diff --git a/libstdc++-v3/include/Makefile.in b/libstdc++-v3/include/Makefile.in
index 9caf45989..6bf5b35fc 100644
--- a/libstdc++-v3/include/Makefile.in
+++ b/libstdc++-v3/include/Makefile.in
@@ -196,6 +196,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -218,6 +219,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
diff --git a/libstdc++-v3/libsupc++/Makefile.in b/libstdc++-v3/libsupc++/Makefile.in
index a535d49cd..44c358179 100644
--- a/libstdc++-v3/libsupc++/Makefile.in
+++ b/libstdc++-v3/libsupc++/Makefile.in
@@ -278,6 +278,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -300,6 +301,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
diff --git a/libstdc++-v3/po/Makefile.in b/libstdc++-v3/po/Makefile.in
index 871bb3752..a9afa1176 100644
--- a/libstdc++-v3/po/Makefile.in
+++ b/libstdc++-v3/po/Makefile.in
@@ -194,6 +194,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -216,6 +217,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
diff --git a/libstdc++-v3/python/Makefile.am b/libstdc++-v3/python/Makefile.am
index 457e45ba4..ebf75ceb4 100644
--- a/libstdc++-v3/python/Makefile.am
+++ b/libstdc++-v3/python/Makefile.am
@@ -33,6 +33,12 @@ nobase_python_DATA = \
     libstdcxx/v6/__init__.py \
     libstdcxx/__init__.py
 
+if DJGPP
+name_base=libstdcxx
+else
+name_base=libstdc++
+endif
+
 gdb.py: hook.in Makefile
 	sed -e 's,@pythondir@,$(pythondir),' \
 	    -e 's,@toolexeclibdir@,$(toolexeclibdir),' < $(srcdir)/hook.in > $@
@@ -45,7 +51,7 @@ install-data-local: gdb.py
 ## fragile, but there does not seem to be a better option, because
 ## libtool hides the real names from us.
 	@here=`pwd`; cd $(DESTDIR)$(toolexeclibdir); \
-	  for file in libstdc++*; do \
+	  for file in $(name_base)*; do \
 	    case $$file in \
 	      *-gdb.py) ;; \
 	      *.la) ;; \
diff --git a/libstdc++-v3/python/Makefile.in b/libstdc++-v3/python/Makefile.in
index 683d7986e..a0672f49b 100644
--- a/libstdc++-v3/python/Makefile.in
+++ b/libstdc++-v3/python/Makefile.in
@@ -218,6 +218,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -240,6 +241,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
@@ -292,6 +294,8 @@ nobase_python_DATA = \
     libstdcxx/v6/__init__.py \
     libstdcxx/__init__.py
 
+@DJGPP_FALSE@name_base = libstdc++
+@DJGPP_TRUE@name_base = libstdcxx
 all: all-am
 
 .SUFFIXES:
@@ -514,7 +518,7 @@ gdb.py: hook.in Makefile
 install-data-local: gdb.py
 	@$(mkdir_p) $(DESTDIR)$(toolexeclibdir)
 	@here=`pwd`; cd $(DESTDIR)$(toolexeclibdir); \
-	  for file in libstdc++*; do \
+	  for file in $(name_base)*; do \
 	    case $$file in \
 	      *-gdb.py) ;; \
 	      *.la) ;; \
diff --git a/libstdc++-v3/scripts/create_testsuite_files b/libstdc++-v3/scripts/create_testsuite_files
index f4a0bcd80..de1cf9e42 100755
--- a/libstdc++-v3/scripts/create_testsuite_files
+++ b/libstdc++-v3/scripts/create_testsuite_files
@@ -33,8 +33,21 @@ cd $srcdir
 # what has to happen when find(1) doesn't support -mindepth, or -xtype.
 dlist=`echo [0-9][0-9]*`
 dlist="$dlist abi backward ext performance tr1 decimal"
-find $dlist "(" -type f -o -type l ")" -name "*.cc" -print > $tmp.01
-find $dlist "(" -type f -o -type l ")" -name "*.c" -print > $tmp.02
+
+#find $dlist "(" -type f -o -type l ")" -name "*.cc" -print > $tmp.01
+#find $dlist "(" -type f -o -type l ")" -name "*.c" -print > $tmp.02
+
+case $OSTYPE in
+  msdos*)
+     find $dlist "(" -type f ")" -name "*.cc" -print > $tmp.01
+     find $dlist "(" -type f ")" -name "*.c" -print > $tmp.02
+     ;;
+  *)
+     find $dlist "(" -type f -o -type l ")" -name "*.cc" -print > $tmp.01
+     find $dlist "(" -type f -o -type l ")" -name "*.c" -print > $tmp.02
+     ;;
+esac
+
 cat  $tmp.01 $tmp.02 | sort > $tmp.1
 if test ! -s "$tmp.1"; then
   exit 1
diff --git a/libstdc++-v3/src/Makefile.am b/libstdc++-v3/src/Makefile.am
index 9b1e830ee..6c843772b 100644
--- a/libstdc++-v3/src/Makefile.am
+++ b/libstdc++-v3/src/Makefile.am
@@ -25,7 +25,11 @@
 include $(top_srcdir)/fragment.am
 
 # Cross compiler support.
+if DJGPP
+toolexeclib_LTLIBRARIES = libstdcxx.la
+else
 toolexeclib_LTLIBRARIES = libstdc++.la
+endif
 
 # Symbol versioning for shared libraries.
 if ENABLE_SYMVERS
@@ -199,18 +203,37 @@ sources = \
 vpath % $(top_srcdir)/src
 vpath % $(top_srcdir)
 
+if DJGPP
+libstdcxx_la_SOURCES = $(sources)
+else
 libstdc___la_SOURCES = $(sources)
+endif
 
+if DJGPP
+libstdcxx_la_LIBADD = \
+	$(GLIBCXX_LIBS) \
+	$(top_builddir)/libsupc++/libsupc++convenience.la
+else
 libstdc___la_LIBADD = \
 	$(GLIBCXX_LIBS) \
 	$(top_builddir)/libsupc++/libsupc++convenience.la
+endif
+
+if DJGPP
+libstdcxx_la_DEPENDENCIES = \
+	${version_dep} \
+	$(top_builddir)/libsupc++/libsupc++convenience.la
 
+libstdcxx_la_LDFLAGS = \
+	-version-info $(libtool_VERSION) ${version_arg} -lm
+else
 libstdc___la_DEPENDENCIES = \
 	${version_dep} \
 	$(top_builddir)/libsupc++/libsupc++convenience.la
 
 libstdc___la_LDFLAGS = \
 	-version-info $(libtool_VERSION) ${version_arg} -lm 
+endif
 
 libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)
 
diff --git a/libstdc++-v3/src/Makefile.in b/libstdc++-v3/src/Makefile.in
index a385e4c6d..d3d5a1e8a 100644
--- a/libstdc++-v3/src/Makefile.in
+++ b/libstdc++-v3/src/Makefile.in
@@ -131,16 +131,45 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \
 	streambuf.lo string-inst.lo valarray-inst.lo wlocale-inst.lo \
 	wstring-inst.lo mutex.lo condition_variable.lo chrono.lo \
 	thread.lo future.lo $(am__objects_1) $(am__objects_4)
-am_libstdc___la_OBJECTS = $(am__objects_5)
+@DJGPP_FALSE@am_libstdc___la_OBJECTS = $(am__objects_5)
 libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)
+@DJGPP_FALSE@am_libstdc___la_rpath = -rpath $(toolexeclibdir)
+am__libstdcxx_la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \
+	pool_allocator.cc mt_allocator.cc codecvt.cc compatibility.cc \
+	compatibility-c++0x.cc compatibility-debug_list.cc \
+	compatibility-list.cc complex_io.cc ctype.cc debug.cc \
+	functexcept.cc globals_io.cc hash_c++0x.cc hash_tr1.cc \
+	hashtable_c++0x.cc hashtable_tr1.cc ios.cc ios_failure.cc \
+	ios_init.cc ios_locale.cc limits.cc list.cc debug_list.cc \
+	locale.cc locale_init.cc locale_facets.cc localename.cc \
+	math_stubs_float.cc math_stubs_long_double.cc stdexcept.cc \
+	strstream.cc system_error.cc tree.cc allocator-inst.cc \
+	concept-inst.cc fstream-inst.cc ext-inst.cc ios-inst.cc \
+	iostream-inst.cc istream-inst.cc istream.cc locale-inst.cc \
+	misc-inst.cc ostream-inst.cc sstream-inst.cc streambuf-inst.cc \
+	streambuf.cc string-inst.cc valarray-inst.cc wlocale-inst.cc \
+	wstring-inst.cc mutex.cc condition_variable.cc chrono.cc \
+	thread.cc future.cc atomicity.cc codecvt_members.cc \
+	collate_members.cc ctype_members.cc messages_members.cc \
+	monetary_members.cc numeric_members.cc time_members.cc \
+	basic_file.cc c++locale.cc compatibility-ldbl.cc \
+	parallel_list.cc parallel_settings.cc \
+	compatibility-parallel_list.cc
+@DJGPP_TRUE@am_libstdcxx_la_OBJECTS = $(am__objects_5)
+libstdcxx_la_OBJECTS = $(am_libstdcxx_la_OBJECTS)
+libstdcxx_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
+	$(CXXFLAGS) $(libstdcxx_la_LDFLAGS) $(LDFLAGS) -o $@
+@DJGPP_TRUE@am_libstdcxx_la_rpath = -rpath $(toolexeclibdir)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
 depcomp =
 am__depfiles_maybe =
 CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
 CXXLD = $(CXX)
-SOURCES = $(libstdc___la_SOURCES)
-DIST_SOURCES = $(am__libstdc___la_SOURCES_DIST)
+SOURCES = $(libstdc___la_SOURCES) $(libstdcxx_la_SOURCES)
+DIST_SOURCES = $(am__libstdc___la_SOURCES_DIST) \
+	$(am__libstdcxx_la_SOURCES_DIST)
 ETAGS = etags
 CTAGS = ctags
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
@@ -273,6 +302,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -295,6 +325,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
@@ -341,9 +372,10 @@ WARN_CXXFLAGS = \
 
 # -I/-D flags to pass when compiling.
 AM_CPPFLAGS = $(GLIBCXX_INCLUDES)
+@DJGPP_FALSE@toolexeclib_LTLIBRARIES = libstdc++.la
 
 # Cross compiler support.
-toolexeclib_LTLIBRARIES = libstdc++.la
+@DJGPP_TRUE@toolexeclib_LTLIBRARIES = libstdcxx.la
 @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,-exported_symbols_list,libstdc++-symbols.explist
 @ENABLE_SYMVERS_FALSE@version_arg = 
 @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,--version-script=libstdc++-symbols.ver
@@ -442,17 +474,29 @@ sources = \
 	${host_sources} \
 	${host_sources_extra} 
 
-libstdc___la_SOURCES = $(sources)
-libstdc___la_LIBADD = \
-	$(GLIBCXX_LIBS) \
-	$(top_builddir)/libsupc++/libsupc++convenience.la
+@DJGPP_TRUE@libstdcxx_la_SOURCES = $(sources)
+@DJGPP_FALSE@libstdc___la_SOURCES = $(sources)
+@DJGPP_TRUE@libstdcxx_la_LIBADD = \
+@DJGPP_TRUE@	$(GLIBCXX_LIBS) \
+@DJGPP_TRUE@	$(top_builddir)/libsupc++/libsupc++convenience.la
+
+@DJGPP_FALSE@libstdc___la_LIBADD = \
+@DJGPP_FALSE@	$(GLIBCXX_LIBS) \
+@DJGPP_FALSE@	$(top_builddir)/libsupc++/libsupc++convenience.la
+
+@DJGPP_TRUE@libstdcxx_la_DEPENDENCIES = \
+@DJGPP_TRUE@	${version_dep} \
+@DJGPP_TRUE@	$(top_builddir)/libsupc++/libsupc++convenience.la
+
+@DJGPP_TRUE@libstdcxx_la_LDFLAGS = \
+@DJGPP_TRUE@	-version-info $(libtool_VERSION) ${version_arg} -lm
 
-libstdc___la_DEPENDENCIES = \
-	${version_dep} \
-	$(top_builddir)/libsupc++/libsupc++convenience.la
+@DJGPP_FALSE@libstdc___la_DEPENDENCIES = \
+@DJGPP_FALSE@	${version_dep} \
+@DJGPP_FALSE@	$(top_builddir)/libsupc++/libsupc++convenience.la
 
-libstdc___la_LDFLAGS = \
-	-version-info $(libtool_VERSION) ${version_arg} -lm 
+@DJGPP_FALSE@libstdc___la_LDFLAGS = \
+@DJGPP_FALSE@	-version-info $(libtool_VERSION) ${version_arg} -lm 
 
 libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)
 
@@ -574,7 +618,9 @@ clean-toolexeclibLTLIBRARIES:
 	  rm -f "$${dir}/so_locations"; \
 	done
 libstdc++.la: $(libstdc___la_OBJECTS) $(libstdc___la_DEPENDENCIES) 
-	$(libstdc___la_LINK) -rpath $(toolexeclibdir) $(libstdc___la_OBJECTS) $(libstdc___la_LIBADD) $(LIBS)
+	$(libstdc___la_LINK) $(am_libstdc___la_rpath) $(libstdc___la_OBJECTS) $(libstdc___la_LIBADD) $(LIBS)
+libstdcxx.la: $(libstdcxx_la_OBJECTS) $(libstdcxx_la_DEPENDENCIES) 
+	$(libstdcxx_la_LINK) $(am_libstdcxx_la_rpath) $(libstdcxx_la_OBJECTS) $(libstdcxx_la_LIBADD) $(LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
diff --git a/libstdc++-v3/testsuite/Makefile.in b/libstdc++-v3/testsuite/Makefile.in
index 72a40c8ff..8992d527b 100644
--- a/libstdc++-v3/testsuite/Makefile.in
+++ b/libstdc++-v3/testsuite/Makefile.in
@@ -194,6 +194,7 @@ dvidir = @dvidir@
 enable_shared = @enable_shared@
 enable_static = @enable_static@
 exec_prefix = @exec_prefix@
+gcc_version_alias = @gcc_version_alias@
 glibcxx_MOFILES = @glibcxx_MOFILES@
 glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@
 glibcxx_POFILES = @glibcxx_POFILES@
@@ -216,6 +217,7 @@ infodir = @infodir@
 install_sh = @install_sh@
 libdir = @libdir@
 libexecdir = @libexecdir@
+libstdcxx_incdir_base = @libstdcxx_incdir_base@
 libtool_VERSION = @libtool_VERSION@
 localedir = @localedir@
 localstatedir = @localstatedir@
