diff --git a/gcc/fortran/trans-expr.c b/gcc/fortran/trans-expr.c
index 0946e6fa1..38e14ae6d 100644
--- a/gcc/fortran/trans-expr.c
+++ b/gcc/fortran/trans-expr.c
@@ -6268,7 +6268,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,
      after use. This necessitates the creation of a temporary to
      hold the result to prevent duplicate calls.  */
   if (!byref && sym->ts.type != BT_CHARACTER
-      && sym->attr.allocatable && !sym->attr.dimension && !comp)
+      && ((sym->attr.allocatable && !sym->attr.dimension && !comp)
+	  || (comp && comp->attr.allocatable && !comp->attr.dimension)))
     {
       tmp = gfc_create_var (TREE_TYPE (se->expr), NULL);
       gfc_add_modify (&se->pre, tmp, se->expr);
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_51.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_51.f90
new file mode 100644
index 000000000..87cb53e67
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_51.f90
@@ -0,0 +1,36 @@
+! { dg-do compile }
+! { dg-options "-fdump-tree-original -Wno-trampolines" }
+!
+! PR 80983: [F03] memory leak when calling procedure-pointer component with allocatable result
+!
+! Contributed by Janus Weil <janus@gcc.gnu.org>
+
+program test
+  implicit none
+
+  type :: concrete_type
+    procedure (alloc_integer), pointer, nopass :: alloc
+  end type
+
+  procedure (alloc_integer), pointer :: pp
+
+  type(concrete_type) :: concrete
+
+  print *, alloc_integer()     ! case #1: plain function
+
+  pp => alloc_integer
+  print *, pp()                ! case #2: procedure pointer
+
+  concrete % alloc => alloc_integer
+  print *, concrete % alloc()  ! case #3: procedure-pointer component
+
+contains
+
+   function alloc_integer() result(res)
+      integer, allocatable :: res
+      allocate(res, source=13)
+   end function
+
+end
+
+! { dg-final { scan-tree-dump-times "__builtin_free" 3 "original" } }
