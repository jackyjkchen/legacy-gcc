diff --git a/gcc/cp/decl.c b/gcc/cp/decl.c
index 6c975aa7f..599faec3c 100644
--- a/gcc/cp/decl.c
+++ b/gcc/cp/decl.c
@@ -7210,8 +7210,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,
 	       && ! (DECL_LANG_SPECIFIC (decl)
 		     && DECL_NOT_REALLY_EXTERN (decl)))
 	{
-	  if (init)
-	    DECL_INITIAL (decl) = init;
+	  /* check_initializer will have done any constant initialization.  */
 	}
       /* A variable definition.  */
       else if (DECL_FUNCTION_SCOPE_P (decl) && !TREE_STATIC (decl))
diff --git a/gcc/testsuite/g++.dg/cpp0x/extern_template-5.C b/gcc/testsuite/g++.dg/cpp0x/extern_template-5.C
new file mode 100644
index 000000000..5d412489f
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/extern_template-5.C
@@ -0,0 +1,36 @@
+// PR c++/87554
+// { dg-options "-O" }
+
+template < class a > class b {
+  static void c(a);
+  static a &create() { c(instance); return mya; }
+
+  static a mya;
+
+public:
+  static a d() { create(); return a(); }
+  static a &instance;
+};
+template < class a > a &b< a >::instance = create();
+class e;
+class f {
+public:
+  void operator()(int g) { h(g); }
+  template < class a > void h(a i) { p(j, i); }
+  e *j;
+};
+class e : public f {
+public:
+  e(int);
+};
+struct k {
+  int l;
+};
+template < class m, class a > void p(m, a) { b< k >::d(); }
+extern template class b< k >;
+int n;
+int o;
+void test() {
+  e out(o);
+  out(n);
+}
