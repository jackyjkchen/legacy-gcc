diff --git a/gcc/testsuite/c-c++-common/asan/pr59063-2.c b/gcc/testsuite/c-c++-common/asan/pr59063-2.c
index 759b7f24d..a22db6a0d 100644
--- a/gcc/testsuite/c-c++-common/asan/pr59063-2.c
+++ b/gcc/testsuite/c-c++-common/asan/pr59063-2.c
@@ -1,5 +1,4 @@
 /* { dg-do run { target { *-*-linux* } } } */
-/* { dg-options "-static-libasan" } */
 
 #include <time.h>
 static int weak_gettime (clockid_t clk_id, struct timespec *tp)
diff --git a/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c b/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
index 45759ae8e..a8ba6f958 100644
--- a/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
+++ b/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-fno-builtin-malloc -fno-builtin-strncpy" } */
+/* { dg-options "-fno-builtin-malloc -fno-builtin-strncpy -Wno-stringop-overflow" } */
 /* { dg-shouldfail "asan" } */
 
 #include <string.h>
diff --git a/gcc/testsuite/c-c++-common/torture/vector-compare-1.c b/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
index 4cdfcf718..a1bf21337 100644
--- a/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
+++ b/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-format" } */
 #define vector(elcount, type)  \
 __attribute__((vector_size((elcount)*sizeof(type)))) type
 
diff --git a/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c b/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
index e2176da4b..175efea0d 100644
--- a/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
+++ b/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
@@ -1,4 +1,5 @@
 /* { dg-shouldfail "tsan" } */
+/* { dg-options "-Wno-unused-result" } */
 /* { dg-additional-options "-ldl" } */
 
 #include <pthread.h>
diff --git a/gcc/testsuite/g++.dg/abi/anon1.C b/gcc/testsuite/g++.dg/abi/anon1.C
index 0fb4ae8fe..52018c317 100644
--- a/gcc/testsuite/g++.dg/abi/anon1.C
+++ b/gcc/testsuite/g++.dg/abi/anon1.C
@@ -1,4 +1,5 @@
 // PR c++/54883
+// { dg-additional-options "-fno-pie" { target ia32 } }
 
 namespace { enum E { E1 }; } void f(E e) { }
 
diff --git a/gcc/testsuite/g++.dg/abi/anon4.C b/gcc/testsuite/g++.dg/abi/anon4.C
index 088ba9940..517cc5284 100644
--- a/gcc/testsuite/g++.dg/abi/anon4.C
+++ b/gcc/testsuite/g++.dg/abi/anon4.C
@@ -1,4 +1,5 @@
 // PR c++/65209
+// { dg-additional-options "-fno-pie" { target { ia32 || sparc*-*-* } } }
 // { dg-final { scan-assembler-not "comdat" } }
 
 // Everything involving the anonymous namespace bits should be private, not
diff --git a/gcc/testsuite/g++.dg/abi/pragma-pack1.C b/gcc/testsuite/g++.dg/abi/pragma-pack1.C
index 9b76071c9..689807c24 100644
--- a/gcc/testsuite/g++.dg/abi/pragma-pack1.C
+++ b/gcc/testsuite/g++.dg/abi/pragma-pack1.C
@@ -1,4 +1,5 @@
 // PR c++/7046
+// { dg-options "-Wno-format" }
 
 extern "C" int printf (const char *, ...);
 
diff --git a/gcc/testsuite/g++.dg/abi/regparm1.C b/gcc/testsuite/g++.dg/abi/regparm1.C
index c4710464a..63a40bfd8 100644
--- a/gcc/testsuite/g++.dg/abi/regparm1.C
+++ b/gcc/testsuite/g++.dg/abi/regparm1.C
@@ -1,5 +1,6 @@
 // PR c++/29911 (9381)
 // { dg-do run { target i?86-*-* x86_64-*-* } }
+// { dg-options "-Wno-format" }
 // { dg-require-effective-target c++11 }
 
 extern "C" int printf(const char *, ...);
diff --git a/gcc/testsuite/g++.dg/asan/asan_test.C b/gcc/testsuite/g++.dg/asan/asan_test.C
index 410e4ce72..f53588b1c 100644
--- a/gcc/testsuite/g++.dg/asan/asan_test.C
+++ b/gcc/testsuite/g++.dg/asan/asan_test.C
@@ -2,7 +2,7 @@
 // { dg-skip-if "" { *-*-* } { "*" } { "-O2" } }
 // { dg-skip-if "" { *-*-* } { "-flto" } { "" } }
 // { dg-additional-sources "asan_globals_test-wrapper.cc" }
-// { dg-options "-std=c++11 -fsanitize=address -fno-builtin -Wall -Werror -g -DASAN_UAR=0 -DASAN_HAS_EXCEPTIONS=1 -DASAN_HAS_BLACKLIST=0 -DSANITIZER_USE_DEJAGNU_GTEST=1 -lasan -lpthread -ldl" }
+// { dg-options "-std=c++11 -fsanitize=address -fno-builtin -Wall -Wno-restrict -Wno-unused-result -Werror -g -DASAN_UAR=0 -DASAN_HAS_EXCEPTIONS=1 -DASAN_HAS_BLACKLIST=0 -DSANITIZER_USE_DEJAGNU_GTEST=1 -lasan -lpthread -ldl" }
 // { dg-additional-options "-DASAN_NEEDS_SEGV=1" { target { ! arm*-*-* } } }
 // { dg-additional-options "-DASAN_LOW_MEMORY=1 -DASAN_NEEDS_SEGV=0" { target arm*-*-* } }
 // { dg-additional-options "-DASAN_AVOID_EXPENSIVE_TESTS=1" { target { ! run_expensive_tests } } }
diff --git a/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C b/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
index e64c184a4..4c53b1c61 100644
--- a/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
+++ b/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
@@ -1,7 +1,7 @@
 // ASan interceptor can be accessed with __interceptor_ prefix.
 
 // { dg-do run { target *-*-linux* } }
-// { dg-options "-fno-builtin-free" }
+// { dg-options "-fno-builtin-free -Wno-unused-result" }
 // { dg-additional-options "-D__NO_INLINE__" { target { *-*-linux-gnu } } }
 // { dg-shouldfail "asan" }
 
diff --git a/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C b/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
index f59cd8453..886b244b8 100644
--- a/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
+++ b/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
@@ -1,5 +1,6 @@
 // PR c++/53202
 // { dg-do run { target c++11 } }
+// { dg-options "-Wno-format" }
 
 #include <tuple>
 
diff --git a/gcc/testsuite/g++.dg/ext/align1.C b/gcc/testsuite/g++.dg/ext/align1.C
index 6c960c396..4484e3b53 100644
--- a/gcc/testsuite/g++.dg/ext/align1.C
+++ b/gcc/testsuite/g++.dg/ext/align1.C
@@ -2,6 +2,7 @@
 // The alignment used to be 64 but Cygwin does not
 // support an alignment greater than 16 and COFF 
 // not support an alignment greater than 4.
+// { dg-options "-Wno-format" }
 
 extern "C" int printf (const char *, ...);
 
diff --git a/gcc/testsuite/g++.dg/init/elide3.C b/gcc/testsuite/g++.dg/init/elide3.C
index 7eb0389a3..22a01c7ee 100644
--- a/gcc/testsuite/g++.dg/init/elide3.C
+++ b/gcc/testsuite/g++.dg/init/elide3.C
@@ -1,5 +1,6 @@
 // PR c++/67557
 // { dg-do run }
+// { dg-options "-Wno-format" }
 
 namespace std
 {
diff --git a/gcc/testsuite/g++.dg/opt/alias2.C b/gcc/testsuite/g++.dg/opt/alias2.C
index 0b4122471..e75e52e54 100644
--- a/gcc/testsuite/g++.dg/opt/alias2.C
+++ b/gcc/testsuite/g++.dg/opt/alias2.C
@@ -1,5 +1,5 @@
 // { dg-do run }
-// { dg-options "-O2" }
+// { dg-options "-O2 -Wno-format" }
 
 extern "C" int printf (const char*, ...);
 
diff --git a/gcc/testsuite/g++.dg/other/anon5.C b/gcc/testsuite/g++.dg/other/anon5.C
index ee4601e27..dadd92ef9 100644
--- a/gcc/testsuite/g++.dg/other/anon5.C
+++ b/gcc/testsuite/g++.dg/other/anon5.C
@@ -1,5 +1,6 @@
 // PR c++/34094
 // { dg-do link { target { ! { *-*-darwin* *-*-hpux* *-*-solaris2.* } } } }
+// { dg-require-effective-target nonpic }
 // { dg-options "-gdwarf-2" }
 // Ignore additional message on powerpc-ibm-aix
 // { dg-prune-output "obtain more information" } */
diff --git a/gcc/testsuite/g++.dg/pr71694.C b/gcc/testsuite/g++.dg/pr71694.C
index 5261dbbfb..60f246ff8 100644
--- a/gcc/testsuite/g++.dg/pr71694.C
+++ b/gcc/testsuite/g++.dg/pr71694.C
@@ -1,5 +1,6 @@
 /* { dg-do compile } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -fno-store-merging" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 /* { dg-additional-options "-fno-common -mdynamic-no-pic" { target { ia32 && { x86_64-*-darwin* i?86-*-darwin* } } } } */
 
 struct B {
diff --git a/gcc/testsuite/g++.dg/stackprotectexplicit2.C b/gcc/testsuite/g++.dg/stackprotectexplicit2.C
index 9cf9ab909..90b76951f 100644
--- a/gcc/testsuite/g++.dg/stackprotectexplicit2.C
+++ b/gcc/testsuite/g++.dg/stackprotectexplicit2.C
@@ -2,6 +2,7 @@
 
 /* { dg-do compile { target i?86-*-* x86_64-*-* } } */
 /* { dg-options "-O2 -fstack-protector-explicit" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 int A()
 {
diff --git a/gcc/testsuite/g++.dg/tc1/dr20.C b/gcc/testsuite/g++.dg/tc1/dr20.C
index 933385181..886b4de09 100644
--- a/gcc/testsuite/g++.dg/tc1/dr20.C
+++ b/gcc/testsuite/g++.dg/tc1/dr20.C
@@ -1,4 +1,5 @@
 // { dg-do run }
+// { dg-options "-Wno-format" }
 // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>
 // DR20: Some clarifications needed for 12.8 para 15 
 
diff --git a/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C b/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
index 680bec737..97610b1bd 100644
--- a/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
+++ b/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Copyright (C) 2000 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 16 Jan 2001 <nathan@codesourcery.com>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.brendan/template8.C b/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
index 66ba0d8ac..03f7c3f9d 100644
--- a/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
+++ b/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates
 #include <stdio.h>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C b/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
index aefe5cc61..50aa6a66e 100644
--- a/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
+++ b/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Bug: catching pointers by reference doesn't work right.
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.jason/access23.C b/gcc/testsuite/g++.old-deja/g++.jason/access23.C
index aec281973..f41801efa 100644
--- a/gcc/testsuite/g++.old-deja/g++.jason/access23.C
+++ b/gcc/testsuite/g++.old-deja/g++.jason/access23.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // PRMS Id: 9127
 // Bug: members of anonymous unions are not access-controlled.
 
diff --git a/gcc/testsuite/g++.old-deja/g++.law/cvt8.C b/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
index cecec9c48..373b0d82d 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed conversions
 // cvt file
 // From: solomon@cs.wisc.edu (Marvin Solomon)
diff --git a/gcc/testsuite/g++.old-deja/g++.law/operators28.C b/gcc/testsuite/g++.old-deja/g++.law/operators28.C
index 7d166474a..005a354b0 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/operators28.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/operators28.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed operators
 #include <sys/types.h>
 #include <stdio.h>
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/net35.C b/gcc/testsuite/g++.old-deja/g++.mike/net35.C
index bded913c0..9140e7b81 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/net35.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/net35.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 
 class A {
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/offset1.C b/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
index b0ddc7b54..5e3ca7729 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 void *vp;
 int fail = 0;
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p12306.C b/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
index 6309016a3..923e5ff1f 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 12306
 
 void *ptr1, *ptr2;
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3579.C b/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
index 90a134446..32988722c 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3579
 
 extern "C" int printf(const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
index 56e4bcbe2..42de2bdbe 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
index dff53b553..858b2b76e 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
index 2cccc4691..7883c47b4 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p646.C b/gcc/testsuite/g++.old-deja/g++.mike/p646.C
index 4f7807d11..d7bc1bc21 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p646.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p646.C
@@ -1,5 +1,5 @@
 // { dg-do assemble  }
-// { dg-options "-Wno-deprecated -Wreturn-type" }
+// { dg-options "-Wno-deprecated -Wreturn-type -Wno-format" }
 // GROUPS passed i960
 /*
   Bug Id: bnr
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p710.C b/gcc/testsuite/g++.old-deja/g++.mike/p710.C
index 7fdd5b022..c16bbfc7d 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p710.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p710.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed delete
 /*
   Bug Id: 
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p789a.C b/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
index bee0228bb..725aa7dc1 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // global and local multidimensional array objects are not getting
 // constructors called on any dimension, other than the first.  Also,
 // the destructors are not being called.  Seems odd, they probably
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C b/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
index 209c5ebea..2839b4f31 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 
 class A_table {
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/temp.C b/gcc/testsuite/g++.old-deja/g++.mike/temp.C
index 0a5ce5812..dc64f13a1 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/temp.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/temp.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 extern "C" const char *getenv(const char *);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.other/temporary1.C b/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
index b1c8cd651..d940ecbff 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char *, ...);
 
 int c, d;
diff --git a/gcc/testsuite/g++.old-deja/g++.other/vbase5.C b/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
index 3d22ff50d..7788cb584 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Copyright (C) 2000 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 19 Jan 2001 <nathan@codesourcery.com>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.other/virtual8.C b/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
index f1ec9ada6..4229c1df0 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char*, ...);
 
 struct A
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
index 3111f41b5..1587cb8c9 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
index 4e81d015d..be214f406 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
index 6c196f5d4..157ed94eb 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
index 3eb5f287d..098d12445 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/t39.C b/gcc/testsuite/g++.old-deja/g++.pt/t39.C
index 8f9bead3a..f8569a002 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/t39.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/t39.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char *, ...);
 
 template <class T>
diff --git a/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C b/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
index 4163399fb..efd291aa1 100644
--- a/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
+++ b/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 #include <stdio.h>
 
 class A {
diff --git a/gcc/testsuite/gcc.dg/20020312-2.c b/gcc/testsuite/gcc.dg/20020312-2.c
index f5929e0b0..f763f03db 100644
--- a/gcc/testsuite/gcc.dg/20020312-2.c
+++ b/gcc/testsuite/gcc.dg/20020312-2.c
@@ -7,6 +7,7 @@
 
 /* { dg-do run } */
 /* { dg-options "-O -fno-pic" } */
+/* { dg-additional-options "-no-pie" { target pie_enabled } } */
 /* { dg-require-effective-target nonlocal_goto } */
 
 extern void abort (void);
diff --git a/gcc/testsuite/gcc.dg/20050607-1.c b/gcc/testsuite/gcc.dg/20050607-1.c
index 83c096748..b67811486 100644
--- a/gcc/testsuite/gcc.dg/20050607-1.c
+++ b/gcc/testsuite/gcc.dg/20050607-1.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-Wpadded" }
+/* { dg-options "-Wpadded -Wno-trampolines" }
 /* The struct internally constructed for the nested function should
    not result in a warning from -Wpadded. */
 extern int baz(int (*) (int));
diff --git a/gcc/testsuite/gcc.dg/builtins-nonnull.c b/gcc/testsuite/gcc.dg/builtins-nonnull.c
index fa9eaf232..ca68dce8f 100644
--- a/gcc/testsuite/gcc.dg/builtins-nonnull.c
+++ b/gcc/testsuite/gcc.dg/builtins-nonnull.c
@@ -1,7 +1,7 @@
 /* PR c/17308 - nonnull attribute not as useful as it could be
    PR c/78673 - sprintf missing attribute nonnull on destination argument
    { dg-do "compile" }
-   { dg-additional-options "-O2 -Wnonnull -ftrack-macro-expansion=0 -std=c99" } */
+   { dg-additional-options "-O2 -Wnonnull -ftrack-macro-expansion=0 -std=c99 -Wno-format-security" } */
 
 #define va_list __builtin_va_list
 
diff --git a/gcc/testsuite/gcc.dg/charset/builtin2.c b/gcc/testsuite/gcc.dg/charset/builtin2.c
index bfe9a20e2..8039d3584 100644
--- a/gcc/testsuite/gcc.dg/charset/builtin2.c
+++ b/gcc/testsuite/gcc.dg/charset/builtin2.c
@@ -3,7 +3,7 @@
 
 /* { dg-do compile } */
 /* { dg-require-iconv "IBM1047" } */
-/* { dg-options "-O2 -fexec-charset=IBM1047" } */
+/* { dg-options "-O2 -fexec-charset=IBM1047 -Wno-format" } */
 /* { dg-final { scan-assembler-not "printf" } } */
 /* { dg-final { scan-assembler-not "fprintf" } } */
 /* { dg-final { scan-assembler-not "sprintf" } } */
diff --git a/gcc/testsuite/gcc.dg/debug/debug-3.c b/gcc/testsuite/gcc.dg/debug/debug-3.c
index e2b7a4b18..fe6d0c5bf 100644
--- a/gcc/testsuite/gcc.dg/debug/debug-3.c
+++ b/gcc/testsuite/gcc.dg/debug/debug-3.c
@@ -1,6 +1,7 @@
 /* This testcase failed, because scope containing baz was deleted
    (spanned 0 basic blocks) and DWARF-2 couldn't find baz origin.  */
 /* { dg-do compile } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 struct A { char *a, *b, *c, *d; };
diff --git a/gcc/testsuite/gcc.dg/debug/debug-5.c b/gcc/testsuite/gcc.dg/debug/debug-5.c
index f66b861c8..485aeeab7 100644
--- a/gcc/testsuite/gcc.dg/debug/debug-5.c
+++ b/gcc/testsuite/gcc.dg/debug/debug-5.c
@@ -1,6 +1,7 @@
 /* This testcase failed, because scope containing baz was deleted
    (spanned 0 basic blocks) and DWARF-2 couldn't find baz origin.  */
 /* { dg-do compile } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 extern void abort (void);
diff --git a/gcc/testsuite/gcc.dg/format/opt-1.c b/gcc/testsuite/gcc.dg/format/opt-1.c
index f8f370448..ccbfc6dd7 100644
--- a/gcc/testsuite/gcc.dg/format/opt-1.c
+++ b/gcc/testsuite/gcc.dg/format/opt-1.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-extra-args.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-extra-args" } */
+/* { dg-options "-Wformat-extra-args -Wno-format" } */
 
 /* { dg-warning "-Wformat-extra-args ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-2.c b/gcc/testsuite/gcc.dg/format/opt-2.c
index 1ec9f0141..699626dc4 100644
--- a/gcc/testsuite/gcc.dg/format/opt-2.c
+++ b/gcc/testsuite/gcc.dg/format/opt-2.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-nonliteral.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-nonliteral" } */
+/* { dg-options "-Wformat-nonliteral -Wno-format" } */
 
 /* { dg-warning "-Wformat-nonliteral ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-3.c b/gcc/testsuite/gcc.dg/format/opt-3.c
index 03f55e436..b27848402 100644
--- a/gcc/testsuite/gcc.dg/format/opt-3.c
+++ b/gcc/testsuite/gcc.dg/format/opt-3.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-security.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-security" } */
+/* { dg-options "-Wformat-security -Wno-format" } */
 
 /* { dg-warning "-Wformat-security ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-4.c b/gcc/testsuite/gcc.dg/format/opt-4.c
index f02b6c094..2b5dd0a77 100644
--- a/gcc/testsuite/gcc.dg/format/opt-4.c
+++ b/gcc/testsuite/gcc.dg/format/opt-4.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-y2k.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-y2k" } */
+/* { dg-options "-Wformat-y2k -Wno-format" } */
 
 /* { dg-warning "-Wformat-y2k ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-5.c b/gcc/testsuite/gcc.dg/format/opt-5.c
index 3315e3358..47f63e86f 100644
--- a/gcc/testsuite/gcc.dg/format/opt-5.c
+++ b/gcc/testsuite/gcc.dg/format/opt-5.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-zero-length.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-zero-length" } */
+/* { dg-options "-Wformat-zero-length -Wno-format" } */
 
 /* { dg-warning "-Wformat-zero-length ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-6.c b/gcc/testsuite/gcc.dg/format/opt-6.c
index 29dedfae5..761de6358 100644
--- a/gcc/testsuite/gcc.dg/format/opt-6.c
+++ b/gcc/testsuite/gcc.dg/format/opt-6.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-contains-nul.  */
 /* Origin: Bruce Korb <bkorb@gnu.org> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-contains-nul" } */
+/* { dg-options "-Wformat-contains-nul -Wno-format" } */
 
 /* { dg-warning "-Wformat-contains-nul ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-1.c b/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
index 3260ac7d5..d8b05bd89 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
@@ -1,6 +1,6 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O1" } */
+/* { dg-options "-fopenmp -O1 -Wno-trampolines" } */
 
 void baz (int (*) ());
 
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-2.c b/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
index bc6c7c54c..b43622659 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
@@ -1,5 +1,5 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O0" } */
+/* { dg-options "-fopenmp -O0 -Wno-trampolines" } */
 
 #include "pr66633-1.c"
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-3.c b/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
index eaa3b0d8b..3facd55d8 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
@@ -1,6 +1,6 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O1" } */
+/* { dg-options "-fopenmp -O1 -Wno-trampolines" } */
 
 void baz (int (*) ());
 
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-4.c b/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
index 93cdcc2b9..9f92935bc 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
@@ -1,5 +1,5 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O0" } */
+/* { dg-options "-fopenmp -O0 -Wno-trampolines" } */
 
 #include "pr66633-3.c"
diff --git a/gcc/testsuite/gcc.dg/graphite/scop-19.c b/gcc/testsuite/gcc.dg/graphite/scop-19.c
index c89717bf4..602813283 100644
--- a/gcc/testsuite/gcc.dg/graphite/scop-19.c
+++ b/gcc/testsuite/gcc.dg/graphite/scop-19.c
@@ -31,6 +31,6 @@ d_growable_string_append_buffer (struct d_growable_string *dgs,
   if (need > dgs->alc)
     d_growable_string_resize (dgs, need);
 }
-/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 2 "graphite" { target nonpic } } } */
-/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 1 "graphite" { target { ! nonpic } } } } */
+/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 2 "graphite" { target { nonpic || pie_enabled } } } } */
+/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 1 "graphite" { target { ! { nonpic || pie_enabled } } } } } */
 
diff --git a/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c b/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
index 4db904b41..6b70694ca 100644
--- a/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
+++ b/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details"  } */
+/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details -Wno-format"  } */
 
 struct bovid
 {
diff --git a/gcc/testsuite/gcc.dg/nested-func-5.c b/gcc/testsuite/gcc.dg/nested-func-5.c
index 3545f37e5..1f6791534 100644
--- a/gcc/testsuite/gcc.dg/nested-func-5.c
+++ b/gcc/testsuite/gcc.dg/nested-func-5.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-fexceptions" } */
+/* { dg-options "-fexceptions -Wno-trampolines" } */
 /* PR28516: ICE generating ARM unwind directives for nested functions.  */
 /* { dg-require-effective-target trampolines } */
 
diff --git a/gcc/testsuite/gcc.dg/packed-vla.c b/gcc/testsuite/gcc.dg/packed-vla.c
index e673b729b..e4b268eec 100644
--- a/gcc/testsuite/gcc.dg/packed-vla.c
+++ b/gcc/testsuite/gcc.dg/packed-vla.c
@@ -1,6 +1,6 @@
 /* PR middle-end/27945 */
 /* { dg-do run } */
-/* { dg-options "" } */
+/* { dg-options "-Wno-format" } */
 /* { dg-require-effective-target alloca } */
 
 extern int printf (const char *, ...);
diff --git a/gcc/testsuite/gcc.dg/pch/inline-4.c b/gcc/testsuite/gcc.dg/pch/inline-4.c
deleted file mode 100644
index 60e35aa62..000000000
--- a/gcc/testsuite/gcc.dg/pch/inline-4.c
+++ /dev/null
@@ -1,6 +0,0 @@
-#include "inline-4.h"
-extern int printf (const char *, ...);
-int main(void) {
-  printf (getstring());
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/pch/inline-4.hs b/gcc/testsuite/gcc.dg/pch/inline-4.hs
deleted file mode 100644
index 31a5069ff..000000000
--- a/gcc/testsuite/gcc.dg/pch/inline-4.hs
+++ /dev/null
@@ -1,4 +0,0 @@
-static inline char *getstring(void)
-{
-  return "hello";
-}
diff --git a/gcc/testsuite/gcc.dg/pr30473.c b/gcc/testsuite/gcc.dg/pr30473.c
index f01c1cc4a..b0bcbc30b 100644
--- a/gcc/testsuite/gcc.dg/pr30473.c
+++ b/gcc/testsuite/gcc.dg/pr30473.c
@@ -1,7 +1,7 @@
 /* PR middle-end/30473 */
 /* Make sure this doesn't ICE.  */
 /* { dg-do compile } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-format" } */
 
 extern int sprintf (char *, const char *, ...);
 
diff --git a/gcc/testsuite/gcc.dg/pr34457-1.c b/gcc/testsuite/gcc.dg/pr34457-1.c
index 3dca13df0..5e69b2841 100644
--- a/gcc/testsuite/gcc.dg/pr34457-1.c
+++ b/gcc/testsuite/gcc.dg/pr34457-1.c
@@ -2,7 +2,7 @@
 /* { dg-do link } */
 /* { dg-require-effective-target trampolines } */
 /* { dg-require-effective-target lto } */
-/* { dg-options "-flto -O2" } */
+/* { dg-options "-flto -O2 -Wno-trampolines" } */
 /* { dg-additional-sources "pr34457-2.c" } */
    
 
diff --git a/gcc/testsuite/gcc.dg/pr38902.c b/gcc/testsuite/gcc.dg/pr38902.c
index d40652624..f6decfce5 100644
--- a/gcc/testsuite/gcc.dg/pr38902.c
+++ b/gcc/testsuite/gcc.dg/pr38902.c
@@ -1,6 +1,6 @@
 /* PR target/38902 */
 /* { dg-do run } */
-/* { dg-options "-O2 -fstack-protector" } */
+/* { dg-options "-O2 -fstack-protector -Wno-format-security" } */
 /* { dg-require-effective-target fstack_protector } */
 
 #ifdef DEBUG
diff --git a/gcc/testsuite/gcc.dg/sibcall-11.c b/gcc/testsuite/gcc.dg/sibcall-11.c
index ae5877082..12f6d9c9c 100644
--- a/gcc/testsuite/gcc.dg/sibcall-11.c
+++ b/gcc/testsuite/gcc.dg/sibcall-11.c
@@ -1,5 +1,6 @@
 // Test for sibcall optimization with empty struct.
 // { dg-options "-O2" }
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 // { dg-final { scan-assembler "jmp" { target i?86-*-* x86_64-*-* } } }
 
 struct A { };
diff --git a/gcc/testsuite/gcc.dg/torture/builtin-self.c b/gcc/testsuite/gcc.dg/torture/builtin-self.c
index 6d1719f75..56188fcc4 100644
--- a/gcc/testsuite/gcc.dg/torture/builtin-self.c
+++ b/gcc/testsuite/gcc.dg/torture/builtin-self.c
@@ -1,4 +1,5 @@
 /* { dg-do compile { target i?86-*-* x86_64-*-* } } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 /* Check that we can use this idiom to define out-of-line copies of built-in
    functions.  This is used by libgcc/sync.c, for example.  */
 void __sync_synchronize (void)
diff --git a/gcc/testsuite/gcc.dg/torture/matrix-2.c b/gcc/testsuite/gcc.dg/torture/matrix-2.c
index 8aaf7c60f..8a2cba61d 100644
--- a/gcc/testsuite/gcc.dg/torture/matrix-2.c
+++ b/gcc/testsuite/gcc.dg/torture/matrix-2.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-fwhole-program" } */
+/* { dg-options "-fwhole-program -Wno-format" } */
 
 
 #include <stdio.h>
diff --git a/gcc/testsuite/gcc.dg/torture/nested-fn-1.c b/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
index 99e852344..be2bc1bb1 100644
--- a/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
+++ b/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
@@ -1,7 +1,7 @@
 /* PR middle-end/15345, c/16450 */
 /* Test whether unused nested functions aren't emitted into the assembly.  */
 /* { dg-do compile } */
-/* { dg-options "-g0" } */
+/* { dg-options "-g0 -Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 int
diff --git a/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c b/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
index 95eba0482..f0f3849ab 100644
--- a/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
+++ b/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 extern void abort (void);
 extern void exit (int);
diff --git a/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c b/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
index d853825fe..9f1a754d9 100644
--- a/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
+++ b/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 #ifndef NO_TRAMPOLINES
 
diff --git a/gcc/testsuite/gcc.dg/torture/tls/tls-test.c b/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
index 8a23e77c1..43b78dbf8 100644
--- a/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
+++ b/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
@@ -1,7 +1,7 @@
 /* { dg-do run }  */
 /* { dg-require-effective-target tls  }  */
 /* { dg-require-effective-target pthread } */
-/* { dg-options "-pthread" } */
+/* { dg-options "-pthread -Wno-format" } */
 
 #include <pthread.h>
 extern int printf (char *,...);
diff --git a/gcc/testsuite/gcc.dg/trampoline-1.c b/gcc/testsuite/gcc.dg/trampoline-1.c
index 37a582c57..81552d915 100644
--- a/gcc/testsuite/gcc.dg/trampoline-1.c
+++ b/gcc/testsuite/gcc.dg/trampoline-1.c
@@ -3,7 +3,7 @@
 
 /* { dg-do run } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 
 #ifndef NO_TRAMPOLINES
 
diff --git a/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c b/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c
index 7870f5550..8e3d5e614 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c
@@ -1,7 +1,7 @@
 /* PR middle-end/78476 - snprintf(0, 0, ...) with known arguments not
    optimized away
    { dg-do compile }
-   { dg-options "-O2 -fdump-tree-optimized" }
+   { dg-options "-O2 -fdump-tree-optimized -Wno-format" }
    { dg-require-effective-target int32plus } */
 
 #define CAT(s, n)   s ## n
diff --git a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c
index b67ebf126..ac6bee898 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7-run.c
@@ -1,5 +1,5 @@
 /* { dg-do run { target trampolines } } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 /* { dg-additional-sources "tailcall-7.c" } */
 
 struct s { int x; };
diff --git a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c
index def8d137f..1378bf817 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/tailcall-7.c
@@ -1,5 +1,5 @@
 /* { dg-do compile { target trampolines } } */
-/* { dg-options "-O2 -fdump-tree-tailc-details" } */
+/* { dg-options "-O2 -fdump-tree-tailc-details -Wno-trampolines" } */
 
 struct s { int x; };
 struct s f (int);
diff --git a/gcc/testsuite/gcc.dg/uninit-19.c b/gcc/testsuite/gcc.dg/uninit-19.c
index 853863a64..a54e60d37 100644
--- a/gcc/testsuite/gcc.dg/uninit-19.c
+++ b/gcc/testsuite/gcc.dg/uninit-19.c
@@ -11,7 +11,8 @@ fn1 (int p1, float *f1, float *f2, float *f3, unsigned char *c1, float *f4,
      unsigned char *c2, float *p10)
 {
   if (p1 & 8)
-    b[3] = p10[a];  /* 14.  */
+    b[3] = p10[a];
+  /* { dg-warning "may be used uninitialized" "" { target { { nonpic || pie_enabled } || { hppa*64*-*-* *-*-darwin* } } } .-1 } */
 }
 
 void
@@ -20,8 +21,6 @@ fn2 ()
   float *n;
   if (l & 6)
     n = &c + m;
-  fn1 (l, &d, &e, &g, &i, &h, &k, n);  /* 23.  */
+  fn1 (l, &d, &e, &g, &i, &h, &k, n);
+  /* { dg-warning "may be used uninitialized" "" { target { ! { { nonpic || pie_enabled } || { hppa*64*-*-* *-*-darwin* } } } } .-1 } */
 }
-
-/* { dg-warning "may be used uninitialized" "" { target { { nonpic } || { hppa*64*-*-* *-*-darwin* } } } 14 } */
-/* { dg-warning "may be used uninitialized" "" { target { ! { { nonpic } || { hppa*64*-*-* *-*-darwin* } } } } 23 } */
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c
index a3210a94b..588fca055 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/p64_p128.c
@@ -2,6 +2,7 @@
    vreinterpret which have their own testcase.  */
 
 /* { dg-require-effective-target arm_crypto_ok { target { arm*-*-* } } } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_crypto } */
 /* { dg-additional-options "-march=armv8-a+crypto" { target { aarch64*-*-* } } }*/
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c
index a27871bbf..964a42db4 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c
index 2d197b4ea..b29b476c2 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c
index 27502c220..8edb8bc0b 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c
index cfc33c24e..5e57120e9 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c
index c7b3d1746..39fac65e2 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c
index a904e5e47..f662d3ed7 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c
index 7b5b16ff5..fdaeb38f4 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c
index cae69a347..3f4932d11 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c
index 0048b5bf1..f7fab3e67 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c
index 3b1b273b6..dc96c9ee9 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c
index 290c5b13a..00db4694f 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c
index 02290991a..30c404e12 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c
@@ -1,5 +1,6 @@
 /* { dg-do run } */
 /* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
+/* { dg-options "-Wno-format" } */
 /* { dg-add-options arm_v8_2a_fp16_scalar }  */
 /* { dg-skip-if "" { arm*-*-* } } */
 
diff --git a/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c b/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c
index e49aadaa6..d66fe3a4b 100644
--- a/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target aarch64_small } */
-/* { dg-options "-O3 -mcpu=cortex-a57" } */
+/* { dg-options "-O3 -mcpu=cortex-a57 -fno-pie" } */
 
 enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,
                  XGRF_REGS, ALL_REGS, LIM_REG_CLASSES };
diff --git a/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c b/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c
index 19082d73e..856e7a738 100644
--- a/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c
+++ b/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c
@@ -6,7 +6,8 @@
 
 #include "vect-abs.x"
 
-/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.16b" } } */
-/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.8h" } } */
+/* XFAIL due to PR tree-optimization/64946.  */
+/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.16b" { xfail *-*-* } } } */
+/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.8h" { xfail *-*-* } } } */
 /* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.4s" } } */
 /* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.2d" } } */
diff --git a/gcc/testsuite/gcc.target/arm/pr84826.c b/gcc/testsuite/gcc.target/arm/pr84826.c
index 563ce51b7..2fa7d5f15 100644
--- a/gcc/testsuite/gcc.target/arm/pr84826.c
+++ b/gcc/testsuite/gcc.target/arm/pr84826.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target arm_thumb2_ok } */
-/* { dg-options "-Ofast -fstack-check" } */
+/* { dg-options "-Ofast -fstack-check -Wno-trampolines" } */
 
 void d (void *);
 
diff --git a/gcc/testsuite/gcc.target/i386/avx512-check.h b/gcc/testsuite/gcc.target/i386/avx512-check.h
new file mode 100644
index 000000000..bfe149601
--- /dev/null
+++ b/gcc/testsuite/gcc.target/i386/avx512-check.h
@@ -0,0 +1,113 @@
+#include <stdlib.h>
+#include "cpuid.h"
+#include "m512-check.h"
+#include "avx512f-os-support.h"
+
+#ifndef DO_TEST
+#define DO_TEST do_test
+#ifdef AVX512VL
+static void test_256 (void);
+static void test_128 (void);
+#else
+static void test_512 (void);
+#endif
+
+__attribute__ ((noinline))
+static void
+do_test (void)
+{
+#ifdef AVX512VL
+  test_256 ();
+  test_128 ();
+#else
+  test_512 ();
+#endif
+}
+#endif
+
+int
+main ()
+{
+  unsigned int eax, ebx, ecx, edx;
+
+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
+    goto skipped;
+
+  /* Run AVX512F test only if host has AVX512F support.  */
+  if (!(ecx & bit_OSXSAVE))
+    goto skipped;
+
+  if (__get_cpuid_max (0, NULL) < 7)
+    goto skipped;
+
+  __cpuid_count (7, 0, eax, ebx, ecx, edx);
+
+  if (!(ebx & bit_AVX512F))
+    goto skipped;
+
+#ifdef AVX512VL
+  if (!(ebx & bit_AVX512VL))
+    goto skipped;
+#endif
+
+#ifdef AVX512ER
+  if (!(ebx & bit_AVX512ER))
+    goto skipped;
+#endif
+
+#ifdef AVX512CD
+  if (!(ebx & bit_AVX512CD))
+    goto skipped;
+#endif
+
+#ifdef AVX512DQ
+  if (!(ebx & bit_AVX512DQ))
+    goto skipped;
+#endif
+
+#ifdef AVX512BW
+  if (!(ebx & bit_AVX512BW))
+    goto skipped;
+#endif
+
+#ifdef AVX512IFMA
+  if (!(ebx & bit_AVX512IFMA))
+    goto skipped;
+#endif
+
+#ifdef AVX512VBMI
+  if (!(ecx & bit_AVX512VBMI))
+    goto skipped;
+#endif
+
+#ifdef AVX5124FMAPS
+  if (!(edx & bit_AVX5124FMAPS))
+    goto skipped;
+#endif
+
+#ifdef AVX5124VNNIW
+  if (!(edx & bit_AVX5124VNNIW))
+    goto skipped;
+#endif
+
+#ifdef AVX512VPOPCNTDQ
+  if (!(ecx & bit_AVX512VPOPCNTDQ))
+    goto skipped;
+#endif
+
+  if (!avx512f_os_support ())
+    goto skipped;
+
+  DO_TEST ();
+
+#ifdef DEBUG
+  printf ("PASSED\n");
+#endif
+  return 0;
+
+skipped:
+#ifdef DEBUG
+  printf ("SKIPPED\n");
+#endif
+  return 0;
+}
diff --git a/gcc/testsuite/gcc.target/i386/avx5124fmaps-check.h b/gcc/testsuite/gcc.target/i386/avx5124fmaps-check.h
deleted file mode 100644
index 13ea70b0a..000000000
--- a/gcc/testsuite/gcc.target/i386/avx5124fmaps-check.h
+++ /dev/null
@@ -1,47 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx5124fmaps_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx5124fmaps_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512_4FMAPS test only if host has the support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((edx & bit_AVX5124FMAPS) == bit_AVX5124FMAPS))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx5124vnniw-check.h b/gcc/testsuite/gcc.target/i386/avx5124vnniw-check.h
deleted file mode 100644
index 27d35a574..000000000
--- a/gcc/testsuite/gcc.target/i386/avx5124vnniw-check.h
+++ /dev/null
@@ -1,47 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx5124vnniw_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx5124vnniw_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512_4VNNIW test only if host has the support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((edx & bit_AVX5124VNNIW) == bit_AVX5124VNNIW))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512bw-check.h b/gcc/testsuite/gcc.target/i386/avx512bw-check.h
index d5288aaab..899a00636 100644
--- a/gcc/testsuite/gcc.target/i386/avx512bw-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512bw-check.h
@@ -1,47 +1,3 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512bw_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512bw_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512BW test only if host has AVX512BW support.  */
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512BW) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512BW
+#define avx512bw_test test_512
+#include "avx512-check.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512cd-check.h b/gcc/testsuite/gcc.target/i386/avx512cd-check.h
deleted file mode 100644
index fd0b9eb05..000000000
--- a/gcc/testsuite/gcc.target/i386/avx512cd-check.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512cd_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512cd_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512CD) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512dq-check.h b/gcc/testsuite/gcc.target/i386/avx512dq-check.h
index 7955f48e9..1b7288367 100644
--- a/gcc/testsuite/gcc.target/i386/avx512dq-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512dq-check.h
@@ -1,47 +1,3 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512dq_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512dq_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512DQ test only if host has AVX512DQ support.  */
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512DQ) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512DQ
+#define avx512dq_test test_512
+#include "avx512-check.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512er-check.h b/gcc/testsuite/gcc.target/i386/avx512er-check.h
index 06fc18a09..eb44c2f7a 100644
--- a/gcc/testsuite/gcc.target/i386/avx512er-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512er-check.h
@@ -1,46 +1,3 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512er_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512er_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512ER) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512ER
+#define avx512er_test test_512
+#include "avx512f-helper.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-check.h b/gcc/testsuite/gcc.target/i386/avx512f-check.h
index 811184b2f..b3bdd9a05 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512f-check.h
@@ -1,47 +1,2 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512f_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512f_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512F test only if host has AVX512F support.  */
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512F) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define avx512f_test test_512
+#include "avx512f-helper.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-helper.h b/gcc/testsuite/gcc.target/i386/avx512f-helper.h
index ef4661a34..72982f95a 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-helper.h
+++ b/gcc/testsuite/gcc.target/i386/avx512f-helper.h
@@ -8,29 +8,7 @@
 #ifndef AVX512F_HELPER_INCLUDED
 #define AVX512F_HELPER_INCLUDED
 
-#if defined (AVX512F) && !defined (AVX512VL)
-#include "avx512f-check.h"
-#elif defined (AVX512ER) && !defined (AVX512VL)
-#include "avx512er-check.h"
-#elif defined (AVX512CD) && !defined (AVX512VL)
-#include "avx512cd-check.h"
-#elif defined (AVX512DQ) && !defined (AVX512VL)
-#include "avx512dq-check.h"
-#elif defined (AVX512BW) && !defined (AVX512VL)
-#include "avx512bw-check.h"
-#elif defined (AVX512IFMA) && !defined (AVX512VL)
-#include "avx512ifma-check.h"
-#elif defined (AVX512VBMI) && !defined (AVX512VL)
-#include "avx512vbmi-check.h"
-#elif defined (AVX5124FMAPS) && !defined (AVX512VL)
-#include "avx5124fmaps-check.h"
-#elif defined (AVX5124VNNIW) && !defined (AVX512VL)
-#include "avx5124vnniw-check.h"
-#elif defined (AVX512VPOPCNTDQ) && !defined (AVX512VL)
-#include "avx512vpopcntdq-check.h"
-#elif defined (AVX512VL)
-#include "avx512vl-check.h"
-#endif
+#include "avx512-check.h"
 
 /* Macros expansion.  */
 #define CONCAT(a,b,c) a ## b ## c
@@ -112,46 +90,6 @@ MAKE_MASK_ZERO(i_uq, unsigned long long)
 #ifndef AVX512VL
 #define AVX512F_LEN 512
 #define AVX512F_LEN_HALF 256
-void test_512 ();
-#endif
-
-void test_512 ();
-void test_256 ();
-void test_128 ();
-
-#if defined (AVX512F) && !defined (AVX512VL)
-void
-avx512f_test (void) { test_512 (); }
-#elif defined (AVX512CD) && !defined (AVX512VL)
-void
-avx512cd_test (void) { test_512 (); }
-#elif defined (AVX512ER) && !defined (AVX512VL)
-void
-avx512er_test (void) { test_512 (); }
-#elif defined (AVX512DQ) && !defined (AVX512VL)
-void
-avx512dq_test (void) { test_512 (); }
-#elif defined (AVX512BW) && !defined (AVX512VL)
-void
-avx512bw_test (void) { test_512 (); }
-#elif defined (AVX512IFMA) && !defined (AVX512VL)
-void
-avx512ifma_test (void) { test_512 (); }
-#elif defined (AVX512VBMI) && !defined (AVX512VL)
-void
-avx512vbmi_test (void) { test_512 (); }
-#elif defined (AVX5124FMAPS) && !defined (AVX512VL)
-void
-avx5124fmaps_test (void) { test_512 (); }
-#elif defined (AVX5124VNNIW) && !defined (AVX512VL)
-void
-avx5124vnniw_test (void) { test_512 (); }
-#elif defined (AVX512VPOPCNTDQ) && !defined (AVX512VL)
-void
-avx512vpopcntdq_test (void) { test_512 (); }
-#elif defined (AVX512VL)
-void
-avx512vl_test (void) { test_256 (); test_128 (); }
 #endif
 
 #endif /* AVX512F_HELPER_INCLUDED */
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c b/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c
index d78d86ac2..43dc236c4 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c
+++ b/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c
@@ -3,6 +3,7 @@
 /* { dg-options "-O2 -ftree-vectorize -mavx512f" } */
 
 #include "avx512f-check.h"
+#undef TEST
 #define PR71559_TEST avx512f_test
 
 #include "sse2-pr71559.c"
diff --git a/gcc/testsuite/gcc.target/i386/avx512ifma-check.h b/gcc/testsuite/gcc.target/i386/avx512ifma-check.h
deleted file mode 100644
index b90a4d551..000000000
--- a/gcc/testsuite/gcc.target/i386/avx512ifma-check.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512ifma_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512ifma_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512IFMA) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512vbmi-check.h b/gcc/testsuite/gcc.target/i386/avx512vbmi-check.h
deleted file mode 100644
index 2c1f62594..000000000
--- a/gcc/testsuite/gcc.target/i386/avx512vbmi-check.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512vbmi_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512vbmi_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ecx & bit_AVX512VBMI) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512vl-check.h b/gcc/testsuite/gcc.target/i386/avx512vl-check.h
index 29d984d03..9d02cc82c 100644
--- a/gcc/testsuite/gcc.target/i386/avx512vl-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512vl-check.h
@@ -1,47 +1,4 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512vl_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512vl_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run avx512vl test only if host has avx512vl support.  */
-  if (ecx & bit_OSXSAVE)
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((ebx & bit_AVX512VL) && avx512f_os_support ())
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512VL
+#define DO_TEST avx512vl_test
+static void DO_TEST (void);
+#include "avx512-check.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-1.c b/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-1.c
index 775085dff..828bb5b4b 100644
--- a/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-1.c
+++ b/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-1.c
@@ -23,7 +23,7 @@ foo (struct s *restrict s1, struct s *restrict s2, int n)
 #define N 12
 
 static void
-avx512f_test (void)
+test_256 (void)
 {
   struct s s1[N], s2[N];
   for (unsigned int j = 0; j < N; ++j)
@@ -37,3 +37,8 @@ avx512f_test (void)
   if (s1[j].b != j * 5 + 2)
     __builtin_abort ();
 }
+
+static void
+test_128 (void)
+{
+}
diff --git a/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-2.c b/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-2.c
index 08ad44efa..816f41e73 100644
--- a/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-2.c
+++ b/gcc/testsuite/gcc.target/i386/avx512vl-pr87214-2.c
@@ -65,7 +65,7 @@ f8 (v16sf *p)
 }
 
 static void
-avx512f_test (void)
+test_256 (void)
 {
   v4di a[3] = { { 0, 0, 0, 0 }, { 10, 11, 12, 13 }, { 14, 15, 16, 17 } };
   f1 (a);
@@ -121,3 +121,8 @@ avx512f_test (void)
       || h[0][12] != 28.0f || h[0][13] != 29.0f || h[0][14] != 30.0f || h[0][15] != 31.0f)
     __builtin_abort ();
 }
+
+static void
+test_128 (void)
+{
+}
diff --git a/gcc/testsuite/gcc.target/i386/avx512vpopcntdq-check.h b/gcc/testsuite/gcc.target/i386/avx512vpopcntdq-check.h
deleted file mode 100644
index 179548bf8..000000000
--- a/gcc/testsuite/gcc.target/i386/avx512vpopcntdq-check.h
+++ /dev/null
@@ -1,47 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512vpopcntdq_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512vpopcntdq_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512_VPOPCNTDQ test only if host has the support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ecx & bit_AVX512VPOPCNTDQ) == bit_AVX512VPOPCNTDQ))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-11.c b/gcc/testsuite/gcc.target/i386/interrupt-11.c
index ded589e0c..4a119b974 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-11.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-11.c
@@ -15,7 +15,7 @@ foo (void *frame)
 /* { dg-final { scan-assembler-not "kmov.\[\\t \]*\[0-9\]*\\(%\[re\]?sp\\),\[\\t \]*%k\[0-7\]+" } } */
 /* { dg-final { scan-assembler-not "pushq\[\\t \]*%rbx" { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler-not "pushq\[\\t \]*%r1\[2-5\]+" { target { ! ia32 } } } } */
-/* { dg-final { scan-assembler-not "pushl\[\\t \]*%ebx" { target ia32 } } } */
+/* { dg-final { scan-assembler-not "pushl\[\\t \]*%ebx" { target { ia32 && nonpic } } } } */
 /* { dg-final { scan-assembler-not "pushl\[\\t \]*%edi" { target ia32 } } } */
 /* { dg-final { scan-assembler-not "pushl\[\\t \]*%esi" { target ia32 } } } */
 /* { dg-final { scan-assembler-times "push(?:l|q)\[\\t \]*%(?:e|r)ax" 1 } } */
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-12.c b/gcc/testsuite/gcc.target/i386/interrupt-12.c
index 078bbcf77..4e91a27de 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-12.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-12.c
@@ -12,7 +12,8 @@ fn1 (void *frame, uword_t error)
 }
 
 /* { dg-final { scan-assembler-not "movups\[\\t .\]*%(x|y|z)mm\[0-9\]+" } } */
-/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(b|c|d)x" } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)bx" { target { nonpic || { ! ia32 } } } } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(c|d)x" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)si" } } */
 /* { dg-final { scan-assembler-not "(push|pop)l\[\\t \]*%edi" { target ia32 } } } */
 /* { dg-final { scan-assembler-not "(push|pop)q\[\\t \]*%rax" { target { { ! ia32 } &&  nonpic } } } } */
@@ -20,7 +21,8 @@ fn1 (void *frame, uword_t error)
 /* { dg-final { scan-assembler-times "pushl\[\\t \]*%ebp" 1 { target ia32 } } } */
 /* { dg-final { scan-assembler-times "leave" 1 { target { ia32 && nonpic } } } } */
 /* { dg-final { scan-assembler-times "pushl\[\\t \]*%eax" 1 { target ia32 } } } */
-/* { dg-final { scan-assembler-times "movl\[\\t \]*-4\\(%ebp\\),\[\\t \]*%eax" 1 { target ia32 } } } */
+/* { dg-final { scan-assembler-times "movl\[\\t \]*-4\\(%ebp\\),\[\\t \]*%eax" 1 { target { ia32 && nonpic } } } } */
+/* { dg-final { scan-assembler-times "popl\[\\t \]*%eax" 1 { target { ia32 && { ! nonpic } } } } } */
 /* { dg-final { scan-assembler-times "pushq\[\\t \]*%rdi" 1 { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler-times "popq\[\\t \]*%rdi" 1 { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler "(addl|leal).*4.*%esp" { target ia32 } } } */
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-13.c b/gcc/testsuite/gcc.target/i386/interrupt-13.c
index 77ee3a510..4afd1b03d 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-13.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-13.c
@@ -12,7 +12,8 @@ fn1 (void *frame, uword_t error)
 }
 
 /* { dg-final { scan-assembler-not "movups\[\\t .\]*%(x|y|z)mm\[0-9\]+" } } */
-/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(b|c|d)x" } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)bx" { target { nonpic || { ! ia32 } } } } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(c|d)x" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)si" } } */
 /* { dg-final { scan-assembler-not "(push|pop)l\[\\t \]*%edi" { target ia32 } } } */
 /* { dg-final { scan-assembler-not "(push|pop)q\[\\t \]*%rax" { target { { ! ia32 } && nonpic } } } } */
@@ -20,7 +21,8 @@ fn1 (void *frame, uword_t error)
 /* { dg-final { scan-assembler-times "pushl\[\\t \]*%ebp" 1 { target ia32 } } } */
 /* { dg-final { scan-assembler-times "leave" 1 { target { ia32 && nonpic } } } } */
 /* { dg-final { scan-assembler-times "pushl\[\\t \]*%eax" 1 { target ia32 } } } */
-/* { dg-final { scan-assembler-times "movl\[\\t \]*-4\\(%ebp\\),\[\\t \]*%eax" 1 { target ia32 } } } */
+/* { dg-final { scan-assembler-times "movl\[\\t \]*-4\\(%ebp\\),\[\\t \]*%eax" 1 { target { ia32 && nonpic } } } } */
+/* { dg-final { scan-assembler-times "popl\[\\t \]*%eax" 1 { target { ia32 && { ! nonpic } } } } } */
 /* { dg-final { scan-assembler-times "pushq\[\\t \]*%rdi" 1 { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler-times "popq\[\\t \]*%rdi" 1 { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler "(addl|leal).*4.*%esp" { target ia32 } } } */
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-15.c b/gcc/testsuite/gcc.target/i386/interrupt-15.c
index 2a0d260cf..f43aabc90 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-15.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-15.c
@@ -19,7 +19,8 @@ fn2 (void *frame, uword_t error)
 }
 
 /* { dg-final { scan-assembler-not "movups\[\\t .\]*%(x|y|z)mm\[0-9\]+" } } */
-/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(b|c|d)x" } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)ax" { target { ! ia32 } } } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(c|d)x" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)si" } } */
 /* { dg-final { scan-assembler-not "(push|pop)l\[\\t \]*%edi" { target ia32 } } } */
 /* { dg-final { scan-assembler-not "(push|pop)q\[\\t \]*%rax" { target { { ! ia32 } && nonpic } } } } */
@@ -27,7 +28,7 @@ fn2 (void *frame, uword_t error)
 /* { dg-final { scan-assembler-times "pushl\[\\t \]*%ebp" 2 { target ia32 } } } */
 /* { dg-final { scan-assembler-times "leave" 2 { target { ia32 && nonpic } } } } */
 /* { dg-final { scan-assembler-times "pushl\[\\t \]*%eax" 2 { target ia32 } } } */
-/* { dg-final { scan-assembler-times "movl\[\\t \]*-4\\(%ebp\\),\[\\t \]*%eax" 2 { target ia32 } } } */
+/* { dg-final { scan-assembler-times "movl\[\\t \]*-4\\(%ebp\\),\[\\t \]*%eax" 2 { target { ia32 && nonpic } } } } */
 /* { dg-final { scan-assembler-times "pushq\[\\t \]*%rdi" 2 { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler-times "popq\[\\t \]*%rdi" 2 { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler "(addl|leal).*4.*%esp" { target ia32 } } } */
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-16.c b/gcc/testsuite/gcc.target/i386/interrupt-16.c
index bc929c657..cb45ba54e 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-16.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-16.c
@@ -12,7 +12,8 @@ foo (int i)
 
 /* { dg-final { scan-assembler-not "movups\[\\t \]*%(x|y|z)mm\[0-9\]+,\[\\t \]-*\[0-9\]*\\(%\[re\]?bp\\)" } } */
 /* { dg-final { scan-assembler-not "movups\[\\t \]*-\[0-9\]*\\(%\[re\]?bp\\),\[\\t \]*%(x|y|z)mm\[0-9\]+" } } */
-/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(a|b|c|d)x" } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)bx" { target { nonpic || { ! ia32 } } } } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(a|c|d)x" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)si" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)bp" } } */
 /* { dg-final { scan-assembler-not "(push|pop)l\[\\t \]*%edi" { target ia32 } } } */
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-17.c b/gcc/testsuite/gcc.target/i386/interrupt-17.c
index 5d5b59e28..218ed6085 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-17.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-17.c
@@ -11,7 +11,8 @@ foo (int i)
 }
 
 /* { dg-final { scan-assembler-not "movups\[\\t \]*%(x|y|z)mm\[0-9\]+" } } */
-/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(a|b|c|d)x" } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)bx" { target { nonpic || { ! ia32 } } } } } */
+/* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)(a|c|d)x" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)si" } } */
 /* { dg-final { scan-assembler-not "(push|pop)(l|q)\[\\t \]*%(r|e)bp" } } */
 /* { dg-final { scan-assembler-not "(push|pop)l\[\\t \]*%edi" { target ia32 } } } */
diff --git a/gcc/testsuite/gcc.target/i386/interrupt-8.c b/gcc/testsuite/gcc.target/i386/interrupt-8.c
index 34536d135..039ccd57f 100644
--- a/gcc/testsuite/gcc.target/i386/interrupt-8.c
+++ b/gcc/testsuite/gcc.target/i386/interrupt-8.c
@@ -15,7 +15,7 @@ foo (void *frame)
 /* { dg-final { scan-assembler-not "kmov.\[\\t \]*\[0-9\]*\\(%\[re\]?sp\\),\[\\t \]*%k\[0-7\]+" } } */
 /* { dg-final { scan-assembler-not "pushq\[\\t \]*%rbx" { target { ! ia32 } } } } */
 /* { dg-final { scan-assembler-not "pushq\[\\t \]*%r1\[2-5\]+" { target { ! ia32 } } } } */
-/* { dg-final { scan-assembler-not "pushl\[\\t \]*%ebx" { target ia32 } } } */
+/* { dg-final { scan-assembler-not "pushl\[\\t \]*%ebx" { target { ia32 && nonpic } } } } */
 /* { dg-final { scan-assembler-not "pushl\[\\t \]*%e(s|d)i" { target ia32 } } } */
 /* { dg-final { scan-assembler-times "push(?:l|q)\[\\t \]*%(?:e|r)ax" 1 } } */
 /* { dg-final { scan-assembler-times "push(?:l|q)\[\\t \]*%(?:e|r)cx" 1 } } */
diff --git a/gcc/testsuite/gcc.target/i386/pad-10.c b/gcc/testsuite/gcc.target/i386/pad-10.c
index 3d003a8a8..ac015f222 100644
--- a/gcc/testsuite/gcc.target/i386/pad-10.c
+++ b/gcc/testsuite/gcc.target/i386/pad-10.c
@@ -1,7 +1,7 @@
 /* { dg-do compile } */
 /* { dg-skip-if "" { *-*-* } { "-march=*" } { "-march=atom" } } */
 /* { dg-options "-O2 -fomit-frame-pointer -march=atom" } */
-/* { dg-final { scan-assembler-not "nop" } } */
+/* { dg-final { scan-assembler-not "nop" { target { nonpic || { ! ia32 } } } } } */
 /* { dg-final { scan-assembler-not "rep" } } */
 
 extern void bar ();
diff --git a/gcc/testsuite/gcc.target/i386/pr15184-1.c b/gcc/testsuite/gcc.target/i386/pr15184-1.c
index 8c19e4758..756183de9 100644
--- a/gcc/testsuite/gcc.target/i386/pr15184-1.c
+++ b/gcc/testsuite/gcc.target/i386/pr15184-1.c
@@ -1,6 +1,7 @@
 /* PR 15184 first two tests, plus two addition ones.  */
 /* { dg-do compile { target ia32 } } */
 /* { dg-options "-O2 -march=pentiumpro" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 #define regparm __attribute__((__regparm__(1)))
 
diff --git a/gcc/testsuite/gcc.target/i386/pr15184-2.c b/gcc/testsuite/gcc.target/i386/pr15184-2.c
index a6cb9ebc2..cb8201f97 100644
--- a/gcc/testsuite/gcc.target/i386/pr15184-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr15184-2.c
@@ -1,6 +1,7 @@
 /* PR 15184 second two tests
 /* { dg-do compile { target ia32 } } */
 /* { dg-options "-O2 -march=pentiumpro" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 #define regparm __attribute__((__regparm__(1)))
 
diff --git a/gcc/testsuite/gcc.target/i386/pr22076.c b/gcc/testsuite/gcc.target/i386/pr22076.c
index d31ffa584..766b732c6 100644
--- a/gcc/testsuite/gcc.target/i386/pr22076.c
+++ b/gcc/testsuite/gcc.target/i386/pr22076.c
@@ -1,21 +1,19 @@
 /* { dg-do compile } */
-/* { dg-options "-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx" } */
-/* { dg-additional-options "-mno-vect8-ret-in-mem" { target *-*-vxworks* } } */
+/* { dg-options "-O2 -fomit-frame-pointer -mmmx -msse -mno-sse2" } */
 /* { dg-additional-options "-fno-common" { target *-*-darwin* } } */
 /* { dg-additional-options "-mdynamic-no-pic" { target { ia32 && *-*-darwin* } } } */
 
-#include <mmintrin.h>
+#include <xmmintrin.h>
 
-__v8qi test ()
-{
-  __v8qi mm0 = {1,2,3,4,5,6,7,8};
-  __v8qi mm1 = {11,22,33,44,55,66,77,88};
-  volatile __m64 x;
+__m64 x;
 
-  x = _mm_add_pi8 (mm0, mm1);
+void test ()
+{
+  __m64 mm0 = (__m64)(__v8qi) {1,2,3,4,5,6,7,8};
+  __m64 mm1 = (__m64)(__v8qi) {11,22,33,44,55,66,77,88};
 
-  return x;
+  x = _mm_sad_pu8 (mm0, mm1);
 }
 
-/* { dg-final { scan-assembler-times "movq" 3 } } */
+/* { dg-final { scan-assembler-times "movq" 2 } } */
 /* { dg-final { scan-assembler-not "movl" { target nonpic } } } */
diff --git a/gcc/testsuite/gcc.target/i386/pr24414.c b/gcc/testsuite/gcc.target/i386/pr24414.c
index 0acaa001a..6f77fa93c 100644
--- a/gcc/testsuite/gcc.target/i386/pr24414.c
+++ b/gcc/testsuite/gcc.target/i386/pr24414.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-require-effective-target nonpic } */
 /* { dg-options "-O2" } */
 /* { dg-skip-if "asm insert mismatches ABI for Darwin" { *-*-darwin* } } */
 int test;
diff --git a/gcc/testsuite/gcc.target/i386/pr27971.c b/gcc/testsuite/gcc.target/i386/pr27971.c
index 149bf2b8e..19eb3548d 100644
--- a/gcc/testsuite/gcc.target/i386/pr27971.c
+++ b/gcc/testsuite/gcc.target/i386/pr27971.c
@@ -1,5 +1,7 @@
 /* { dg-do compile } */
 /* { dg-options "-O2 -mno-tbm" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
+/* { dg-additional-options "-mdynamic-no-pic" { target { *-*-darwin* && ia32 } } } */
 
 unsigned array[4];
 
diff --git a/gcc/testsuite/gcc.target/i386/pr34256.c b/gcc/testsuite/gcc.target/i386/pr34256.c
index 992312a4f..698745765 100644
--- a/gcc/testsuite/gcc.target/i386/pr34256.c
+++ b/gcc/testsuite/gcc.target/i386/pr34256.c
@@ -10,5 +10,5 @@ unsigned long long  foo(__m64 m) {
   return _mm_cvtm64_si64(_mm_add_pi32(x, y));
 }
 
-/* { dg-final { scan-assembler-times "mov" 2 { target nonpic } } } */
-/* { dg-final { scan-assembler-times "mov" 4 { target { ! nonpic } } } } */
+/* { dg-final { scan-assembler-times "mov" 2 { target { nonpic || pie_enabled } } } } */
+/* { dg-final { scan-assembler-times "mov" 4 { target { { ! nonpic } && { ! pie_enabled } } } } } */
diff --git a/gcc/testsuite/gcc.target/i386/pr67770.c b/gcc/testsuite/gcc.target/i386/pr67770.c
index 3826aff45..2d2c30243 100644
--- a/gcc/testsuite/gcc.target/i386/pr67770.c
+++ b/gcc/testsuite/gcc.target/i386/pr67770.c
@@ -1,7 +1,7 @@
 /* PR target/67770 */
 /* { dg-do run { target ia32 } } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 
 #ifndef NO_TRAMPOLINES
 __attribute__ ((noinline)) void
diff --git a/gcc/testsuite/gcc.target/i386/pr70263-2.c b/gcc/testsuite/gcc.target/i386/pr70263-2.c
index 18ebbf05f..9a6f5633a 100644
--- a/gcc/testsuite/gcc.target/i386/pr70263-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr70263-2.c
@@ -1,5 +1,8 @@
 /* { dg-do compile } */
 /* { dg-options "-O2 -fdump-rtl-ira" } */
+/* ia32 PIC prevents tail-calling, which forces bar's arg to be pushed, which
+   drops the equivalence.  */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 /* { dg-final { scan-rtl-dump "Adding REG_EQUIV to insn \[0-9\]+ for source of insn \[0-9\]+" "ira" } } */
 
diff --git a/gcc/testsuite/gcc.target/i386/pr71245-1.c b/gcc/testsuite/gcc.target/i386/pr71245-1.c
index be0b7602a..02c0dcb80 100644
--- a/gcc/testsuite/gcc.target/i386/pr71245-1.c
+++ b/gcc/testsuite/gcc.target/i386/pr71245-1.c
@@ -19,4 +19,4 @@ void foo_d (void)
   __atomic_store_n (&d.ll, tmp.ll, __ATOMIC_SEQ_CST);
 }
 
-/* { dg-final { scan-assembler-not "(fistp|fild)" } } */
+/* { dg-final { scan-assembler-not "(fistp|fild)" { xfail *-*-* } } } */
diff --git a/gcc/testsuite/gcc.target/i386/pr71245-2.c b/gcc/testsuite/gcc.target/i386/pr71245-2.c
index 65c139849..bf37a8cbb 100644
--- a/gcc/testsuite/gcc.target/i386/pr71245-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr71245-2.c
@@ -19,4 +19,4 @@ void foo_d (void)
   __atomic_store_n (&d.ll, tmp.ll, __ATOMIC_SEQ_CST);
 }
 
-/* { dg-final { scan-assembler-not "movlps" } } */
+/* { dg-final { scan-assembler-not "movlps" { xfail *-*-* } } } */
diff --git a/gcc/testsuite/gcc.target/i386/pr78035.c b/gcc/testsuite/gcc.target/i386/pr78035.c
index 2e673a8ce..7d3a983b2 100644
--- a/gcc/testsuite/gcc.target/i386/pr78035.c
+++ b/gcc/testsuite/gcc.target/i386/pr78035.c
@@ -1,5 +1,6 @@
 /* { dg-do compile } */
 /* { dg-options "-O2" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 extern int a;
 extern int b;
diff --git a/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90 b/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
index 79dd7ceff..0d09a283b 100644
--- a/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
+++ b/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! { dg-additional-options "-fdump-tree-original" }
 ! { dg-require-visibility "" }
 !
diff --git a/gcc/testsuite/gfortran.dg/gomp/pr66633.f90 b/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
index 60e47b394..7ccd55b65 100644
--- a/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
+++ b/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
@@ -2,7 +2,7 @@
 ! Testcase by Andrew Benson <abensonca@gmail.com>
 
 ! { dg-do compile }
-! { dg-options "-O0 -fopenmp" }
+! { dg-options "-O0 -fopenmp -Wno-trampolines" }
 
 module spls
 contains
diff --git a/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90 b/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90
index 43aa3bfe0..6fffa173a 100644
--- a/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90
+++ b/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-skip-if "PR libfortran/78314" { aarch64*-*-gnu* arm*-*-gnueabi arm*-*-gnueabihf } }
 !
 ! This test will fail on older x86_64 glibc (< 2.20), due to this bug:
 ! https://sourceware.org/bugzilla/show_bug.cgi?id=16198
diff --git a/gcc/testsuite/gfortran.dg/ieee/ieee_8.f90 b/gcc/testsuite/gfortran.dg/ieee/ieee_8.f90
index 7d0cdfd0e..9eed7a358 100644
--- a/gcc/testsuite/gfortran.dg/ieee/ieee_8.f90
+++ b/gcc/testsuite/gfortran.dg/ieee/ieee_8.f90
@@ -1,5 +1,5 @@
-! { dg-do run { xfail aarch64*-*-gnu arm*-*-gnueabi arm*-*-gnueabihf } }
-! XFAIL because of PR libfortran/78449.
+! { dg-do run }
+! { dg-skip-if "PR libfortran/78314" { aarch64*-*-gnu* arm*-*-gnueabi arm*-*-gnueabihf } }
 
 module foo
   use :: ieee_exceptions
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_2.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
index 2d2ec6837..8ba229711 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-std=f2008 -fall-intrinsics" }
+! { dg-options "-std=f2008 -fall-intrinsics -Wno-trampolines" }
 
 ! PR fortran/34162
 ! Internal procedures as actual arguments (like restricted closures).
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_3.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
index ff8dd822e..e76fb6a20 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-std=f2008 -fall-intrinsics" }
+! { dg-options "-std=f2008 -fall-intrinsics -Wno-trampolines" }
 
 ! PR fortran/34162
 ! Internal procedures as actual arguments (like restricted closures).
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_4.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
index 8ade99efb..111cd0d91 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! PR fortran/34133
 ! PR fortran/34162
 !
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_1.f90 b/gcc/testsuite/gfortran.dg/pointer_check_1.f90
index 6d43bf302..4f4e56c42 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_1.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_1.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 53 .*Allocatable actual argument 'alloc2' is not allocated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_2.f90 b/gcc/testsuite/gfortran.dg/pointer_check_2.f90
index 2359b4ae8..daffb3f2b 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_2.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_2.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 60.*Pointer actual argument 'ptr1' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_3.f90 b/gcc/testsuite/gfortran.dg/pointer_check_3.f90
index 23596e44e..9e7ebf13a 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_3.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_3.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 61.*Pointer actual argument 'ptr2' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_4.f90 b/gcc/testsuite/gfortran.dg/pointer_check_4.f90
index 97eb6fad5..6e0e9e0d5 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_4.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_4.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 66.*Proc-pointer actual argument 'pptr' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_5.f90 b/gcc/testsuite/gfortran.dg/pointer_check_5.f90
index 440d9a879..0d56abe4d 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_5.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_5.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 ! 
 ! { dg-output ".*At line 46 .*Pointer actual argument 'getptr' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_18.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
index 79cd68a51..950abc366 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_19.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
index a78a8d464..84bde2c53 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_20.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
index 5aead5b5d..6027e0d9d 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40450: [F03] procedure pointer as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_21.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
index 875173fd3..38ae6082b 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
@@ -1,33 +1,34 @@
-! { dg-do run }
-! Tests the fix for PR40591 in which the interface 'sub2'
-! for 'pptr2' was not resolved.
-!
-! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>
-!
-program main
-  call test
-contains
+! { dg-do run }
+! { dg-options "-Wno-trampolines" }
+! Tests the fix for PR40591 in which the interface 'sub2'
+! for 'pptr2' was not resolved.
+!
+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>
+!
+program main
+  call test
+contains
   subroutine sub1(arg)
     integer arg
-    arg = arg + 1
-  end subroutine sub1
-  subroutine test()
-    procedure(sub1), pointer :: pptr1
+    arg = arg + 1
+  end subroutine sub1
+  subroutine test()
+    procedure(sub1), pointer :: pptr1
     procedure(sub2), pointer :: pptr2
-    integer i
-    i = 0
+    integer i
+    i = 0
     pptr1 => sub1
-    call pptr1 (i)
+    call pptr1 (i)
     pptr1 => sub2
-    call pptr1 (i)
+    call pptr1 (i)
     pptr2 => sub1
-    call pptr2 (i)
+    call pptr2 (i)
     pptr2 => sub2
     call pptr2 (i)
-    if (i .ne. 22) call abort
-  end subroutine test
+    if (i .ne. 22) call abort
+  end subroutine test
   subroutine sub2(arg)
     integer arg
-    arg = arg + 10
-  end subroutine sub2
-end program main
+    arg = arg + 10
+  end subroutine sub2
+end program main
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_23.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
index ee947122f..cf2a16ebe 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41106: [F03] Procedure Pointers with CHARACTER results
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_25.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
index cfa0d4434..319cb7d0e 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_47.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
index 43084f67e..485fb055b 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! Tests the fix for PR68196
 !
 ! Contributed by Damian Rouson  <damian@sourceryinstitute.org>
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_48.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
index deed63535..215c63d7d 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! Checks the fix for PR68196, comment #8
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_5.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
index 61cf8a35d..6b6abc0e3 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! NULL() initialization for PROCEDURE POINTERS
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_7.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
index 8b1ea0a44..5d04a230f 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! { dg-additional-sources proc_ptr_7.c }
 !
 ! PR fortran/32580
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
index cbb69f1d5..09f2d0610 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
index 7e487fbb2..a3893670e 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40427: Procedure Pointer Components with OPTIONAL arguments
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
index afc8f55b5..83e6809a0 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40882: [F03] infinite recursion in gfc_get_derived_type with PPC returning derived type.
 ! At the same time, check that a formal argument does not cause infinite recursion (PR 40870).
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
index 811223ee2..f4ca9e6a6 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41022: [F03] procedure pointer components as actual arguments
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
index 4b849b64e..1fdda5f93 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
index 8027c82d3..4a9dae52b 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
index 33e32aaf6..d0c3f7402 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
index 94c59cd1a..aa51efcd0 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 47240: [F03] segfault with procedure pointer component
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
index 031f74418..77efb6ae1 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 51082: [F03] Wrong result for a pointer to a proc-pointer component
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
index 216cb4e9b..26a035ea6 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
index ed06c2bc6..68e1c3bbd 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40164: Fortran 2003: "Arrays of procedure pointers" (using PPCs)
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
index 951db485f..caa2ff866 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
index add025cb0..41df4f767 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 39630: [F03] Procedure Pointer Components with PASS
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
index b77e40b7b..8afa9036e 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 54285: [F03] Calling a PPC with proc-ptr result
 !
diff --git a/gcc/testsuite/gfortran.dg/structure_constructor_11.f90 b/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
index 6ee6a162f..8551d58e9 100644
--- a/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
+++ b/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fdump-tree-original" }
+! { dg-options "-fdump-tree-original -Wno-trampolines" }
 !
 ! PR fortran/54603
 !
diff --git a/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90 b/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
index 51359d146..989433357 100644
--- a/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
+++ b/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 64209: [OOP] runtime segfault with CLASS(*), INTENT(OUT) dummy argument
 !
diff --git a/gcc/testsuite/gfortran.dg/vect/fast-math-mgrid-resid.f b/gcc/testsuite/gfortran.dg/vect/fast-math-mgrid-resid.f
index 54f1e9eac..b7b6c1224 100644
--- a/gcc/testsuite/gfortran.dg/vect/fast-math-mgrid-resid.f
+++ b/gcc/testsuite/gfortran.dg/vect/fast-math-mgrid-resid.f
@@ -1,7 +1,8 @@
 ! { dg-do compile }
 ! { dg-require-effective-target vect_double }
-! { dg-options "-O3 --param vect-max-peeling-for-alignment=0 -fpredictive-commoning -fdump-tree-pcom-details" }
+! { dg-additional-options "-O3 --param vect-max-peeling-for-alignment=0 -fpredictive-commoning -fdump-tree-pcom-details -std=legacy" }
 ! { dg-additional-options "-mprefer-avx128" { target { i?86-*-* x86_64-*-* } } }
+! { dg-additional-options "-mzarch" { target { s390*-*-* } } }
 
 ******* RESID COMPUTES THE RESIDUAL:  R = V - AU
 *
diff --git a/gcc/testsuite/lib/target-supports.exp b/gcc/testsuite/lib/target-supports.exp
index d33136f7a..6d1da44f0 100644
--- a/gcc/testsuite/lib/target-supports.exp
+++ b/gcc/testsuite/lib/target-supports.exp
@@ -2926,10 +2926,12 @@ proc check_effective_target_vect_int { } {
 	     || [istarget alpha*-*-*]
 	     || [istarget ia64-*-*] 
 	     || [istarget aarch64*-*-*]
-	     || [check_effective_target_arm32]
+	     || [is-effective-target arm_neon]
 	     || ([istarget mips*-*-*]
 		 && ([et-is-effective-target mips_loongson]
-		     || [et-is-effective-target mips_msa])) } {
+		     || [et-is-effective-target mips_msa]))
+	     || ([istarget s390*-*-*]
+		 && [check_effective_target_s390_vx]) } {
 	    set et_vect_int_saved($et_index) 1
 	}
     }
@@ -4959,10 +4961,12 @@ proc check_effective_target_vect_shift { } {
 	     || [istarget ia64-*-*]
 	     || [istarget i?86-*-*] || [istarget x86_64-*-*]
 	     || [istarget aarch64*-*-*]
-	     || [check_effective_target_arm32]
+	     || [is-effective-target arm_neon]
 	     || ([istarget mips*-*-*]
 		 && ([et-is-effective-target mips_msa]
-		     || [et-is-effective-target mips_loongson])) } {
+		     || [et-is-effective-target mips_loongson]))
+	     || ([istarget s390*-*-*]
+		 && [check_effective_target_s390_vx]) } {
 	   set et_vect_shift_saved($et_index) 1
 	}
     }
@@ -4977,10 +4981,12 @@ proc check_effective_target_whole_vector_shift { } {
 	 || [istarget ia64-*-*]
 	 || [istarget aarch64*-*-*]
 	 || [istarget powerpc64*-*-*]
-	 || ([check_effective_target_arm32]
+	 || ([is-effective-target arm_neon]
 	     && [check_effective_target_arm_little_endian])
 	 || ([istarget mips*-*-*]
-	     && [et-is-effective-target mips_loongson]) } {
+	     && [et-is-effective-target mips_loongson])
+	 || ([istarget s390*-*-*]
+	     && [check_effective_target_s390_vx]) } {
 	set answer 1
     } else {
 	set answer 0
@@ -5025,9 +5031,11 @@ proc check_effective_target_vect_shift_char { } {
 	set et_vect_shift_char_saved($et_index) 0
 	if { ([istarget powerpc*-*-*]
              && ![istarget powerpc-*-linux*paired*])
-	     || [check_effective_target_arm32]
+	     || [is-effective-target arm_neon]
 	     || ([istarget mips*-*-*]
-		 && [et-is-effective-target mips_msa]) } {
+		 && [et-is-effective-target mips_msa])
+	     || ([istarget s390*-*-*]
+		 && [check_effective_target_s390_vx]) } {
 	   set et_vect_shift_char_saved($et_index) 1
 	}
     }
@@ -5043,14 +5051,16 @@ proc check_effective_target_vect_shift_char { } {
 
 proc check_effective_target_vect_long { } {
     if { [istarget i?86-*-*] || [istarget x86_64-*-*]
-	 || (([istarget powerpc*-*-*] 
-              && ![istarget powerpc-*-linux*paired*]) 
+	 || (([istarget powerpc*-*-*]
+              && ![istarget powerpc-*-linux*paired*])
               && [check_effective_target_ilp32])
-	 || [check_effective_target_arm32]
+	 || [is-effective-target arm_neon]
 	 || ([istarget sparc*-*-*] && [check_effective_target_ilp32])
 	 || [istarget aarch64*-*-*]
 	 || ([istarget mips*-*-*]
-	      && [et-is-effective-target mips_msa]) } {
+	      && [et-is-effective-target mips_msa])
+	 || ([istarget s390*-*-*]
+	     && [check_effective_target_s390_vx]) } {
 	set answer 1
     } else {
 	set answer 0
@@ -5081,7 +5091,9 @@ proc check_effective_target_vect_float { } {
 	     || [istarget aarch64*-*-*]
 	     || ([istarget mips*-*-*]
 		 && [et-is-effective-target mips_msa])
-	     || [check_effective_target_arm32] } {
+	     || [is-effective-target arm_neon]
+	     || ([istarget s390*-*-*]
+		 && [check_effective_target_s390_vxe]) } {
 	    set et_vect_float_saved($et_index) 1
 	}
     }
diff --git a/gcc/testsuite/objc.dg/torture/strings/const-str-3.m b/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
index 0eb2d6a01..785352592 100644
--- a/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
+++ b/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
@@ -2,7 +2,7 @@
 /* Developed by Markus Hitter <mah@jump-ing.de>.  */
 /* { dg-do run } */
 /* { dg-xfail-run-if "Needs OBJC2 ABI" { *-*-darwin* && { lp64 && { ! objc2 } } } { "-fnext-runtime" } { "" } } */
-/* { dg-options "-fconstant-string-class=Foo" } */
+/* { dg-options "-fconstant-string-class=Foo -Wno-format-security" } */
 /* { dg-options "-mno-constant-cfstrings -fconstant-string-class=Foo" { target *-*-darwin* } } */
 
 #include "../../../objc-obj-c++-shared/objc-test-suite-types.h"
diff --git a/libgomp/testsuite/libgomp.c/pr52547.c b/libgomp/testsuite/libgomp.c/pr52547.c
index f746e2ec4..0416cc2ae 100644
--- a/libgomp/testsuite/libgomp.c/pr52547.c
+++ b/libgomp/testsuite/libgomp.c/pr52547.c
@@ -1,5 +1,6 @@
 /* PR middle-end/52547 */
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 extern void abort (void);
 
