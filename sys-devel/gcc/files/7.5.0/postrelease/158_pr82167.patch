diff --git a/gcc/c/c-typeck.c b/gcc/c/c-typeck.c
index fd9fa2d5a..8d34771da 100644
--- a/gcc/c/c-typeck.c
+++ b/gcc/c/c-typeck.c
@@ -2902,7 +2902,7 @@ c_expr_sizeof_expr (location_t loc, struct c_expr expr)
 	  if (warning_at (loc, OPT_Wsizeof_array_argument,
 			  "%<sizeof%> on array function parameter %qE will "
 			  "return size of %qT", expr.value,
-			  expr.original_type))
+			  TREE_TYPE (expr.value)))
 	    inform (DECL_SOURCE_LOCATION (expr.value), "declared here");
 	}
       tree folded_expr = c_fully_fold (expr.value, require_constant_value,
diff --git a/gcc/testsuite/gcc.dg/pr82167.c b/gcc/testsuite/gcc.dg/pr82167.c
new file mode 100644
index 000000000..7ebcf9f8a
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr82167.c
@@ -0,0 +1,15 @@
+/* PR c/82167 */
+/* { dg-do compile } */
+/* { dg-options "-Wno-format" } */
+
+void
+fn1 (int a[])
+{
+  __builtin_printf ("%zu\n", sizeof (*&a)); /* { dg-warning ".sizeof. on array function parameter .a. will return size of .int \\*." } */
+}
+
+void
+fn2 (int *a[])
+{
+  __builtin_printf ("%zu\n", sizeof (*&a)); /* { dg-warning ".sizeof. on array function parameter .a. will return size of .int \\*\\*." } */
+}
