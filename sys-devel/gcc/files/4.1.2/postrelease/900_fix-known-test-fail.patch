diff --git a/gcc/testsuite/g++.dg/ext/packed8.C b/gcc/testsuite/g++.dg/ext/packed8.C
index 1f86cfc0..91ee8b3e 100644
--- a/gcc/testsuite/g++.dg/ext/packed8.C
+++ b/gcc/testsuite/g++.dg/ext/packed8.C
@@ -2,7 +2,7 @@
 // NOTE: This test assumes packed structure layout differs from unpacked
 //       structure layout.  This isn't true, e.g., with the default
 //       arm-none-elf options.
-// { dg-options "-mstructure-size-boundary=8" { target arm-*-* } }
+// { dg-options "-mstructure-size-boundary=8" { target arm*-*-* } }
 
 class A
 {
diff --git a/gcc/testsuite/g++.dg/init/array16.C b/gcc/testsuite/g++.dg/init/array16.C
index be652190..188d1a84 100644
--- a/gcc/testsuite/g++.dg/init/array16.C
+++ b/gcc/testsuite/g++.dg/init/array16.C
@@ -1,7 +1,7 @@
 // Causes timeout for the MMIX simulator on a 3GHz P4 and we can't
 // have "compile" for some targets and "run" for others.
 // { dg-do run { target { ! mmix-*-* } } }
-// { dg-options "-mstructure-size-boundary=8" { target arm-*-* } }
+// { dg-options "-mstructure-size-boundary=8" { target arm*-*-* } }
 
 // Copyright (C) 2004 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 8 Dec 2004 <nathan@codesourcery.com>
diff --git a/gcc/testsuite/g++.dg/other/crash-4.C b/gcc/testsuite/g++.dg/other/crash-4.C
index a37b8b2f..ee30f016 100644
--- a/gcc/testsuite/g++.dg/other/crash-4.C
+++ b/gcc/testsuite/g++.dg/other/crash-4.C
@@ -7,7 +7,7 @@
 // NOTE: This test assumes packed structure layout differs from unpacked
 //       structure layout.  This isn't true, e.g., with the default
 //       arm-none-elf options.
-// { dg-options "-mstructure-size-boundary=8" { target arm-*-* } }
+// { dg-options "-mstructure-size-boundary=8" { target arm*-*-* } }
 
 struct a
 {
diff --git a/gcc/testsuite/g++.dg/other/packed1.C b/gcc/testsuite/g++.dg/other/packed1.C
index 5d19eb0e..0b14653b 100644
--- a/gcc/testsuite/g++.dg/other/packed1.C
+++ b/gcc/testsuite/g++.dg/other/packed1.C
@@ -1,4 +1,4 @@
-// { dg-do run { xfail arm-*-* sh-*-* ia64-hp-hpux* } }
+// { dg-do run { xfail sh-*-* ia64-hp-hpux* } }
 
 // NMS:2003-04-21 this fails on strict aligned architectures again,
 // the patch was reverted because it broke something more important.
diff --git a/gcc/testsuite/g++.old-deja/g++.law/weak.C b/gcc/testsuite/g++.old-deja/g++.law/weak.C
index ea07afe4..c4173b02 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/weak.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/weak.C
@@ -1,5 +1,5 @@
 // { dg-do link { target i?86-*-linux* x86_64-*-linux* } }
-// { dg-options "-static" }
+// { dg-options "-static-libstdc++ -static-libgcc" }
 // Bug: g++ fails to instantiate operator<<.
 
 // libc-5.4.xx has __IO_putc in its static C library, which can conflict
diff --git a/gcc/testsuite/g++.old-deja/g++.other/init5.C b/gcc/testsuite/g++.old-deja/g++.other/init5.C
index 89b8cd3f..27765dc1 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/init5.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/init5.C
@@ -1,4 +1,4 @@
-// { dg-do run { xfail { ! "powerpc*-*-linux*" } } }
+// { dg-do run }
 // Objects must be destructed in decreasing cnt order
 // Original test attributed to James Kanze <jkanze@otelo.ibmmail.com>
 
diff --git a/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c b/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c
index f401d39c..e9fb7db5 100644
--- a/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c
+++ b/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c
@@ -2,7 +2,7 @@
    are emitted properly.  */
 /* { dg-do compile } */
 /* { dg-options "-O2 -std=gnu99" } */
-/* { dg-options "-mstructure-size-boundary=8 -O2 -std=gnu99" { target arm-*-* } } */
+/* { dg-options "-mstructure-size-boundary=8 -O2 -std=gnu99" { target arm*-*-* } } */
 
 extern void abort (void);
 
diff --git a/gcc/testsuite/gcc.dg/cpp/trad/include.c b/gcc/testsuite/gcc.dg/cpp/trad/include.c
deleted file mode 100644
index 9ca184b5..00000000
--- a/gcc/testsuite/gcc.dg/cpp/trad/include.c
+++ /dev/null
@@ -1,9 +0,0 @@
-/* Copyright (c) 2002 Free Software Foundation Inc.  */
-
-/* Test that macros are not expanded in the <> quotes of #inlcude.  */
-
-/* { dg-do preprocess } */
-
-#define __STDC__ 1	/* Stop complaints about non-ISO compilers.  */
-#define stdio 1
-#include <stdio.h>		/* { dg-bogus "o such file or directory" } */
diff --git a/gcc/testsuite/gcc.dg/special/gcsec-1.c b/gcc/testsuite/gcc.dg/special/gcsec-1.c
index 68d4066f..c96e7497 100644
--- a/gcc/testsuite/gcc.dg/special/gcsec-1.c
+++ b/gcc/testsuite/gcc.dg/special/gcsec-1.c
@@ -3,8 +3,8 @@
 /* { dg-do run { xfail rs6000-*-aix* powerpc*-*-aix* } } */
 /* { dg-require-gc-sections "" } */
 
-/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static" } */
-/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static" { target native } } */
+/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static-libgcc" } */
+/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static-libgcc" { target native } } */
 /* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections" { target *-*-netware* } } */
 
 #include <stdlib.h>
diff --git a/gcc/testsuite/gcc.misc-tests/arm-isr.exp b/gcc/testsuite/gcc.misc-tests/arm-isr.exp
index c3613263..22f5477f 100644
--- a/gcc/testsuite/gcc.misc-tests/arm-isr.exp
+++ b/gcc/testsuite/gcc.misc-tests/arm-isr.exp
@@ -21,7 +21,7 @@
 load_lib gcc-dg.exp
 
 dg-init
-if {[istarget "*arm-*-*"] || [istarget "xscale-*-*"]} {
+if {[istarget "*arm*-*-*"] || [istarget "xscale-*-*"]} {
   dg-runtest "$srcdir/$subdir/arm-isr.c" "" ""
 }
 dg-finish
diff --git a/gcc/testsuite/gfortran.dg/csqrt_2.f b/gcc/testsuite/gfortran.dg/csqrt_2.f
index 66e08424..dc3d9a80 100644
--- a/gcc/testsuite/gfortran.dg/csqrt_2.f
+++ b/gcc/testsuite/gfortran.dg/csqrt_2.f
@@ -1,4 +1,4 @@
-c { dg-do run { xfail *-*-linux-gnu } }
+c { dg-do run }
 c Fix PR libgfortran/24313
       complex x, y
       complex z
diff --git a/gcc/testsuite/gfortran.dg/vect/vect-5.f90 b/gcc/testsuite/gfortran.dg/vect/vect-5.f90
index db7b3f9e..7a33fc48 100644
--- a/gcc/testsuite/gfortran.dg/vect/vect-5.f90
+++ b/gcc/testsuite/gfortran.dg/vect/vect-5.f90
@@ -35,15 +35,13 @@
         stop
         end
 
-! { dg-final { scan-tree-dump-times "vectorized 2 loops" 1 "vect" { xfail { lp64 } } } }
-! { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 1 "vect" { xfail { vect_no_align || lp64 } } } }
-! { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 2 "vect" { xfail { vect_no_align || lp64 } } } }
+! { dg-final { scan-tree-dump-times "vectorized 2 loops" 1 "vect"  } }
+! { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 2 "vect" { xfail { vect_no_align } } } }
 ! { dg-final { scan-tree-dump-times "Alignment of access forced using versioning." 3 "vect" { target { ilp32 && vect_no_align } } } }
 
 ! We also expect to vectorize one loop for lp64 targets that support 
 ! misaligned access:
 !   scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target { lp64 && !vect_no_align } }
-!   scan-tree-dump-times "Alignment of access forced using peeling" 1 "vect" { target { lp64 && !vect_no_align } }
 !   scan-tree-dump-times "Vectorizing an unaligned access" 1 "vect" { target { lp64 && !vect_no_align } }
 ! but we currently can't combine logical operators. (Could define 
 ! a keyword for "not_vect_no_align" if desired). 
diff --git a/gcc/testsuite/lib/target-supports.exp b/gcc/testsuite/lib/target-supports.exp
index c473826b..c842fda6 100644
--- a/gcc/testsuite/lib/target-supports.exp
+++ b/gcc/testsuite/lib/target-supports.exp
@@ -1196,7 +1196,7 @@ proc check_effective_target_arm32 { } {
 	verbose "check-effective_target_arm32: using cached result" 2
     } else {
 	set et_arm32_saved 0
-	if { [istarget arm-*-*]
+	if { [istarget arm*-*-*]
 	      || [istarget strongarm*-*-*]
 	      || [istarget xscale-*-*] } {
 	    if ![string match "*-mthumb *" $compiler_flags] {
diff --git a/libiberty/testsuite/test-demangle.c b/libiberty/testsuite/test-demangle.c
index dcb27d25..c498d97a 100644
--- a/libiberty/testsuite/test-demangle.c
+++ b/libiberty/testsuite/test-demangle.c
@@ -46,7 +46,7 @@ static unsigned int lineno;
 #define LINELEN 80
 
 static void
-getline(buf)
+get_line(buf)
      struct line *buf;
 {
   char *data = buf->data;
@@ -148,12 +148,12 @@ main(argc, argv)
 
   for (;;)
     {
-      getline (&format);
+      get_line (&format);
       if (feof (stdin))
 	break;
 
-      getline (&input);
-      getline (&expect);
+      get_line (&input);
+      get_line (&expect);
 
       tests++;
 
@@ -268,7 +268,7 @@ main(argc, argv)
 
       if (no_params)
 	{
-	  getline (&expect);
+	  get_line (&expect);
 	  result = cplus_demangle (input.data, DMGL_ANSI|DMGL_TYPES);
 
 	  if (result
