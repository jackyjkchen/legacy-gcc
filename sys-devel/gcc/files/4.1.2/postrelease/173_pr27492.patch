diff --git a/gcc/cp/decl.c b/gcc/cp/decl.c
index b612543f..29b8aefc 100644
--- a/gcc/cp/decl.c
+++ b/gcc/cp/decl.c
@@ -1521,6 +1521,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)
       DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);
       DECL_PURE_VIRTUAL_P (newdecl) |= DECL_PURE_VIRTUAL_P (olddecl);
       DECL_VIRTUAL_P (newdecl) |= DECL_VIRTUAL_P (olddecl);
+      DECL_INVALID_OVERRIDER_P (newdecl) |= DECL_INVALID_OVERRIDER_P (olddecl);
       DECL_THIS_STATIC (newdecl) |= DECL_THIS_STATIC (olddecl);
       if (DECL_OVERLOADED_OPERATOR_P (olddecl) != ERROR_MARK)
 	SET_OVERLOADED_OPERATOR_CODE
diff --git a/gcc/testsuite/g++.dg/inherit/covariant15.C b/gcc/testsuite/g++.dg/inherit/covariant15.C
new file mode 100644
index 00000000..4696cc63
--- /dev/null
+++ b/gcc/testsuite/g++.dg/inherit/covariant15.C
@@ -0,0 +1,18 @@
+/* This used to ICE (PR c++/27492) */
+/* { dg-do "compile" } */
+
+struct A {};
+
+class B : A
+{
+    virtual A* foo(); /* { dg-error "overriding" } */
+};
+
+struct C : virtual B
+{
+    virtual C* foo(); /* { dg-error "invalid covariant return type" } */
+};
+
+C* C::foo() { return 0; }
+
+struct D : C {};
