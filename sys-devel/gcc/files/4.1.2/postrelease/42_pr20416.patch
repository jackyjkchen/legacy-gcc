diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index 508982d3..04dc822f 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -6626,7 +6626,11 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)
 	      if (at_function_scope_p ())
 		{
 		  add_decl_expr (var);
-		  *cleanup = cxx_maybe_build_cleanup (var);
+
+		  if (TREE_STATIC (var))
+		    init = add_stmt_to_compound (init, register_dtor_fn (var));
+		  else
+		    *cleanup = cxx_maybe_build_cleanup (var);
 
 		  /* We must be careful to destroy the temporary only
 		     after its initialization has taken place.  If the
diff --git a/gcc/testsuite/g++.dg/init/ref15.C b/gcc/testsuite/g++.dg/init/ref15.C
new file mode 100644
index 00000000..d3a94227
--- /dev/null
+++ b/gcc/testsuite/g++.dg/init/ref15.C
@@ -0,0 +1,32 @@
+// PR c++/20416.  We correctly constructed the temporary S in foo(),
+// but incorrectly destroyed it every time foo() was called.
+// { dg-do run }
+extern "C" void abort (void);
+extern "C" void _exit (int);
+
+int c, exiting;
+struct S {
+  S() { ++c; }
+  S(const S &) { ++c; }
+  ~S()
+  {
+    if (!exiting) abort ();
+    _exit (0);
+  }
+};
+void
+foo (void)
+{
+  static const S &s = S();
+}
+int main ()
+{
+  if (c != 0)
+    abort ();
+  foo ();
+  foo ();
+  if (c != 1)
+    abort ();
+  exiting = 1;
+  return 1;
+}
