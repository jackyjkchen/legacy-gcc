diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index 04dc822f..dac3e05b 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -1131,7 +1131,12 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)
 
       return conv;
     }
-  else if (CLASS_TYPE_P (from) && !(flags & LOOKUP_NO_CONVERSION))
+  /* [class.conv.fct] A conversion function is never used to convert a
+     (possibly cv-qualified) object to the (possibly cv-qualified) same
+     object type (or a reference to it), to a (possibly cv-qualified) base
+     class of that type (or a reference to it).... */
+  else if (CLASS_TYPE_P (from) && !related_p
+	   && !(flags & LOOKUP_NO_CONVERSION))
     {
       /* [dcl.init.ref]
 
diff --git a/gcc/testsuite/g++.dg/conversion/self1.C b/gcc/testsuite/g++.dg/conversion/self1.C
new file mode 100644
index 00000000..f36500a9
--- /dev/null
+++ b/gcc/testsuite/g++.dg/conversion/self1.C
@@ -0,0 +1,15 @@
+// PR c++/31419
+
+struct B
+{
+  template<typename T>
+  operator T const& () const
+  {
+    return 42;
+  }
+};
+
+B f()
+{
+  return B();
+}
