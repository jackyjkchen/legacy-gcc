diff --git a/gcc/testsuite/gfortran.dg/unf_io_convert_3.f90 b/gcc/testsuite/gfortran.dg/unf_io_convert_3.f90
index 40ace2a0..86010735 100644
--- a/gcc/testsuite/gfortran.dg/unf_io_convert_3.f90
+++ b/gcc/testsuite/gfortran.dg/unf_io_convert_3.f90
@@ -1,4 +1,4 @@
-! { dg-do run}
+! { dg-do run }
 ! { dg-require-effective-target fortran_large_real }
 program main
   integer,parameter :: k = selected_real_kind (precision (0.0_8) + 1)
diff --git a/libgfortran/io/transfer.c b/libgfortran/io/transfer.c
index 124c33df..583a06d4 100644
--- a/libgfortran/io/transfer.c
+++ b/libgfortran/io/transfer.c
@@ -472,7 +472,11 @@ unformatted_read (st_parameter_dt *dtp, bt type,
 	 of the padding.  If we hit a short record, then sz is
 	 adjusted accordingly, making later reads no-ops.  */
       
-      sz = kind;
+      if (type == BT_REAL || type == BT_COMPLEX)
+	sz = size_from_real_kind (kind);
+      else
+	sz = kind;
+
       for (i=0; i<nelems; i++)
 	{
  	  read_block_direct (dtp, buffer, &sz);
@@ -517,7 +521,11 @@ unformatted_write (st_parameter_dt *dtp, bt type,
 	 read kind bytes.  We don't care about the contents
 	 of the padding.  */
 
-      sz = kind;
+      if (type == BT_REAL || type == BT_COMPLEX)
+	sz = size_from_real_kind (kind);
+      else
+	sz = kind;
+
       for (i=0; i<nelems; i++)
 	{
 	  reverse_memcpy(buffer, p, size);
