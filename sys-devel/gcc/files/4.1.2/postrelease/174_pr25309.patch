diff --git a/gcc/c-common.c b/gcc/c-common.c
index 3b54c215..4f278932 100644
--- a/gcc/c-common.c
+++ b/gcc/c-common.c
@@ -6148,6 +6148,16 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)
   else
     type = c_build_qualified_type (main_type, quals);
 
+  if (COMPLETE_TYPE_P (type)
+      && TREE_CODE (TYPE_SIZE_UNIT (type)) == INTEGER_CST
+      && TREE_OVERFLOW (TYPE_SIZE_UNIT (type)))
+    {
+      error ("size of array is too large");
+      /* If we proceed with the array type as it is, we'll eventually
+	 crash in tree_low_cst().  */
+      type = error_mark_node;
+    }
+
   *ptype = type;
   return failure;
 }
diff --git a/gcc/testsuite/gcc.dg/large-size-array-2.c b/gcc/testsuite/gcc.dg/large-size-array-2.c
index 6ac31d11..5411b838 100644
--- a/gcc/testsuite/gcc.dg/large-size-array-2.c
+++ b/gcc/testsuite/gcc.dg/large-size-array-2.c
@@ -4,4 +4,4 @@
 static char * name[] = {
     [0x80000000]  = "bar"
   };
-
+/* { dg-error "too large" "" { target { ! lp64 } } 6 } */
diff --git a/gcc/testsuite/gcc.dg/large-size-array-4.c b/gcc/testsuite/gcc.dg/large-size-array-4.c
new file mode 100644
index 00000000..020d57e2
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/large-size-array-4.c
@@ -0,0 +1,7 @@
+/* PR c/25309 */
+/* { dg-do compile } */
+/* { dg-options "" } */
+static char * name[] = {
+    [0x80000000]  = "bar"
+  };
+/* { dg-error "too large" "" { target { ! lp64 } } 6 } */
