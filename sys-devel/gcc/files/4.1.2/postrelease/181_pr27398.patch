diff --git a/gcc/cp/decl.c b/gcc/cp/decl.c
index 89873fb2..52acfa60 100644
--- a/gcc/cp/decl.c
+++ b/gcc/cp/decl.c
@@ -7297,7 +7297,7 @@ grokdeclarator (const cp_declarator *declarator,
   if (dependant_name && !friendp)
     {
       error ("%<%T::%D%> is not a valid declarator", ctype, dependant_name);
-      return void_type_node;
+      return error_mark_node;
     }
 
   /* Issue errors about use of storage classes for parameters.  */
@@ -7539,7 +7539,7 @@ grokdeclarator (const cp_declarator *declarator,
 			if (! member_function_or_else (ctype,
 						       current_class_type,
 						       flags))
-			  return void_type_node;
+			  return error_mark_node;
 		      }
 		  }
 		else /* It's a constructor.  */
@@ -7567,10 +7567,10 @@ grokdeclarator (const cp_declarator *declarator,
 			if (! member_function_or_else (ctype,
 						       current_class_type,
 						       flags))
-			  return void_type_node;
+			  return error_mark_node;
 			TYPE_HAS_CONSTRUCTOR (ctype) = 1;
 			if (sfk != sfk_constructor)
-			  return NULL_TREE;
+			  return error_mark_node;
 		      }
 		  }
 		if (decl_context == FIELD)
@@ -8230,7 +8230,7 @@ grokdeclarator (const cp_declarator *declarator,
 		  {
 		    error ("can't make %qD into a method -- not in a class",
 			   unqualified_id);
-		    return void_type_node;
+		    return error_mark_node;
 		  }
 
 		/* ``A union may [ ... ] not [ have ] virtual functions.''
@@ -8239,7 +8239,7 @@ grokdeclarator (const cp_declarator *declarator,
 		  {
 		    error ("function %qD declared virtual inside a union",
 			   unqualified_id);
-		    return void_type_node;
+		    return error_mark_node;
 		  }
 
 		if (NEW_DELETE_OPNAME_P (unqualified_id))
@@ -8343,7 +8343,7 @@ grokdeclarator (const cp_declarator *declarator,
 			       funcdef_flag, template_count, in_namespace,
 			       attrlist);
 	    if (decl == NULL_TREE)
-	      return NULL_TREE;
+	      return error_mark_node;
 	  }
 	else if (!staticp && !dependent_type_p (type)
 		 && !COMPLETE_TYPE_P (complete_type (type))
@@ -8399,7 +8399,7 @@ grokdeclarator (const cp_declarator *declarator,
 		return decl;
 	      }
 	    else
-	      return void_type_node;
+	      return error_mark_node;
 	  }
 
 	/* Structure field.  It may not be a function, except for C++.  */
@@ -8438,7 +8438,7 @@ grokdeclarator (const cp_declarator *declarator,
 		     void_type_node, as if this was a friend
 		     declaration, to cause callers to completely
 		     ignore this declaration.  */
-		  return void_type_node;
+		  return error_mark_node;
 	      }
 
 	    if (staticp)
@@ -8485,7 +8485,7 @@ grokdeclarator (const cp_declarator *declarator,
 	int publicp = 0;
 
 	if (!unqualified_id)
-	  return NULL_TREE;
+	  return error_mark_node;
 
 	if (TREE_CODE (unqualified_id) == TEMPLATE_ID_EXPR)
 	  original_name = dname;
@@ -8540,7 +8540,7 @@ grokdeclarator (const cp_declarator *declarator,
 			   publicp, inlinep, sfk, funcdef_flag,
 			   template_count, in_namespace, attrlist);
 	if (decl == NULL_TREE)
-	  return NULL_TREE;
+	  return error_mark_node;
 
 	if (staticp == 1)
 	  {
diff --git a/gcc/testsuite/g++.dg/template/crash50.C b/gcc/testsuite/g++.dg/template/crash50.C
new file mode 100644
index 00000000..00605612
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/crash50.C
@@ -0,0 +1,7 @@
+// PR c++/27398
+// { dg-do compile }
+
+struct A
+{
+  template<int> void* foo(; // { dg-error "primary-expression|initialization|static" }
+};
