diff --git a/gcc/cp/semantics.c b/gcc/cp/semantics.c
index 11f7ab9a..5dae20d8 100644
--- a/gcc/cp/semantics.c
+++ b/gcc/cp/semantics.c
@@ -1908,7 +1908,9 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p)
     {
       result = build3 (CALL_EXPR, TREE_TYPE (result), orig_fn,
 		       orig_args, NULL_TREE);
-      KOENIG_LOOKUP_P (result) = koenig_p;
+      /* Don't repeat arg-dependent lookup at instantiation time if this call
+         is not type-dependent.  */
+      KOENIG_LOOKUP_P (result) = 0;
     }
   return result;
 }
diff --git a/gcc/testsuite/g++.dg/template/lookup8.C b/gcc/testsuite/g++.dg/template/lookup8.C
new file mode 100644
index 00000000..981c283e
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/lookup8.C
@@ -0,0 +1,19 @@
+// PR c++/38030
+// The call to f should be resolved at template definition time.
+// { dg-do link }
+
+struct B { };
+struct D : public B { };
+D d;
+void f (B &) { }
+template < class T >
+void g ()
+{
+  return f (d);
+}
+void f (D &);
+int main ()
+{
+  g<int> ();
+  return 0;
+}
