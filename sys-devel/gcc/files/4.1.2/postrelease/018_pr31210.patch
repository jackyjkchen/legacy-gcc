diff --git a/gcc/testsuite/gfortran.dg/zero_length_1.f90 b/gcc/testsuite/gfortran.dg/zero_length_1.f90
new file mode 100644
index 00000000..c76d079e
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/zero_length_1.f90
@@ -0,0 +1,18 @@
+! { dg-do run }
+! PR libfortran/31210
+program test
+  implicit none
+  integer :: l = 0
+  character(len=20) :: s
+  
+  write(s,'(A,I1)') foo(), 0
+  if (trim(s) /= "0") call abort
+
+contains
+
+  function foo()
+    character(len=l) :: foo
+    foo = "XXXX"
+  end function
+
+end program test
diff --git a/libgfortran/io/transfer.c b/libgfortran/io/transfer.c
index 583a06d4..99a87e15 100644
--- a/libgfortran/io/transfer.c
+++ b/libgfortran/io/transfer.c
@@ -1139,8 +1139,17 @@ transfer_logical (st_parameter_dt *dtp, void *p, int kind)
 void
 transfer_character (st_parameter_dt *dtp, void *p, int len)
 {
+  static char *empty_string[0];
+
   if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)
     return;
+
+  /* Strings of zero length can have p == NULL, which confuses the
+     transfer routines into thinking we need more data elements.  To avoid
+     this, we give them a nice pointer.  */
+  if (len == 0 && p == NULL)
+    p = empty_string;
+
   /* Currently we support only 1 byte chars, and the library is a bit
      confused of character kind vs. length, so we kludge it by setting
      kind = length.  */
