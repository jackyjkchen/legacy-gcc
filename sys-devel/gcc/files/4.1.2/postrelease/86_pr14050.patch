diff --git a/gcc/c-decl.c b/gcc/c-decl.c
index 1c071658..ff69d8d5 100644
--- a/gcc/c-decl.c
+++ b/gcc/c-decl.c
@@ -3041,20 +3041,13 @@ build_array_declarator (tree expr, struct c_declspecs *quals, bool static_p,
 
 /* Set the contained declarator of an array declarator.  DECL is the
    declarator, as constructed by build_array_declarator; INNER is what
-   appears on the left of the [].  ABSTRACT_P is true if it is an
-   abstract declarator, false otherwise; this is used to reject static
-   and type qualifiers in abstract declarators, where they are not in
-   the C99 grammar (subject to possible change in DR#289).  */
+   appears on the left of the [].  */
 
 struct c_declarator *
 set_array_declarator_inner (struct c_declarator *decl,
-			    struct c_declarator *inner, bool abstract_p)
+			    struct c_declarator *inner)
 {
   decl->declarator = inner;
-  if (abstract_p && (decl->u.array.quals != TYPE_UNQUALIFIED
-		     || decl->u.array.attrs != NULL_TREE
-		     || decl->u.array.static_p))
-    error ("static or type qualifiers in abstract declarator");
   return decl;
 }
 
diff --git a/gcc/c-parser.c b/gcc/c-parser.c
index 407e9041..94c725d0 100644
--- a/gcc/c-parser.c
+++ b/gcc/c-parser.c
@@ -2318,7 +2318,7 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,
 	}
       declarator = build_array_declarator (dimen, quals_attrs, static_seen,
 					   star_seen);
-      inner = set_array_declarator_inner (declarator, inner, !id_present);
+      inner = set_array_declarator_inner (declarator, inner);
       return c_parser_direct_declarator_inner (parser, id_present, inner);
     }
   else if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))
diff --git a/gcc/c-tree.h b/gcc/c-tree.h
index f8679637..a0f7f92d 100644
--- a/gcc/c-tree.h
+++ b/gcc/c-tree.h
@@ -461,8 +461,7 @@ extern void c_pop_function_context (struct function *);
 extern void push_parm_decl (const struct c_parm *);
 extern tree pushdecl_top_level (tree);
 extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,
-							struct c_declarator *,
-							bool);
+							struct c_declarator *);
 extern tree builtin_function (const char *, tree, int, enum built_in_class,
 			      const char *, tree);
 extern void shadow_tag (const struct c_declspecs *);
diff --git a/gcc/doc/standards.texi b/gcc/doc/standards.texi
index bc8c1d80..e5205461 100644
--- a/gcc/doc/standards.texi
+++ b/gcc/doc/standards.texi
@@ -31,6 +31,8 @@
 @cindex Technical Corrigendum 1
 @cindex TC2
 @cindex Technical Corrigendum 2
+@cindex TC3
+@cindex Technical Corrigendum 3
 @cindex AMD1
 @cindex freestanding implementation
 @cindex freestanding environment
@@ -84,9 +86,9 @@ standard, use @option{-std=c99} or @option{-std=iso9899:1999}.  (While in
 development, drafts of this standard version were referred to as
 @dfn{C9X}.)
 
-Errors in the 1999 ISO C standard were corrected in two Technical
-Corrigenda published in 2001 and 2004.  GCC does not support the uncorrected
-version.
+Errors in the 1999 ISO C standard were corrected in three Technical
+Corrigenda published in 2001, 2004 and 2007.  GCC does not support the
+uncorrected version.
 
 By default, GCC provides some extensions to the C language that on
 rare occasions conflict with the C standard.  @xref{C
diff --git a/gcc/testsuite/gcc.dg/c99-arraydecl-1.c b/gcc/testsuite/gcc.dg/c99-arraydecl-1.c
index 24ddd657..2036d82f 100644
--- a/gcc/testsuite/gcc.dg/c99-arraydecl-1.c
+++ b/gcc/testsuite/gcc.dg/c99-arraydecl-1.c
@@ -9,8 +9,8 @@
    [quals static expr].  Not yet: [quals *].  */
 
 void f00 (int a[const]);
-void f01 (int [const]); /* { dg-bogus "warning" "warning in place of error" } */
-/* { dg-error "abstract" "\[quals\] in abstract declarator" { target *-*-* } 12 } */
+void f01 (int [const]);
+
 void
 f02 (int a[const])
 {
@@ -28,8 +28,8 @@ f03 (a)
 }
 
 void f10 (int a[const 2]);
-void f11 (int [const 2]); /* { dg-bogus "warning" "warning in place of error" } */
-/* { dg-error "abstract" "\[quals expr\] in abstract declarator" { target *-*-* } 31 } */
+void f11 (int [const 2]);
+
 void
 f12 (int a[const 2])
 {
@@ -47,8 +47,8 @@ f13 (a)
 }
 
 void f20 (int a[static 2]);
-void f21 (int [static 2]); /* { dg-bogus "warning" "warning in place of error" } */
-/* { dg-error "abstract" "\[static expr\] in abstract declarator" { target *-*-* } 50 } */
+void f21 (int [static 2]);
+
 void
 f22 (int a[static 2])
 {
@@ -64,8 +64,8 @@ f23 (a)
 }
 
 void f30 (int a[static const 2]);
-void f31 (int [static const 2]); /* { dg-bogus "warning" "warning in place of error" } */
-/* { dg-error "abstract" "\[static quals expr\] in abstract declarator" { target *-*-* } 67 } */
+void f31 (int [static const 2]);
+
 void
 f32 (int a[static const 2])
 {
@@ -83,8 +83,8 @@ f33 (a)
 }
 
 void f40 (int a[const static 2]);
-void f41 (int [const static 2]); /* { dg-bogus "warning" "warning in place of error" } */
-/* { dg-error "abstract" "\[quals static expr\] in abstract declarator" { target *-*-* } 86 } */
+void f41 (int [const static 2]);
+
 void
 f42 (int a[const static 2])
 {
