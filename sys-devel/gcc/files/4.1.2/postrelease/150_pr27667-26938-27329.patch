diff --git a/gcc/cp/cp-tree.h b/gcc/cp/cp-tree.h
index c706557e..cc882f2b 100644
--- a/gcc/cp/cp-tree.h
+++ b/gcc/cp/cp-tree.h
@@ -4070,7 +4070,7 @@ extern void maybe_begin_member_template_processing (tree);
 extern void maybe_end_member_template_processing (void);
 extern tree finish_member_template_decl		(tree);
 extern void begin_template_parm_list		(void);
-extern void begin_specialization		(void);
+extern bool begin_specialization		(void);
 extern void reset_specialization		(void);
 extern void end_specialization			(void);
 extern void begin_explicit_instantiation	(void);
@@ -4082,7 +4082,7 @@ extern void end_template_decl			(void);
 extern tree current_template_args		(void);
 extern tree push_template_decl			(tree);
 extern tree push_template_decl_real		(tree, bool);
-extern void redeclare_class_template		(tree, tree);
+extern bool redeclare_class_template		(tree, tree);
 extern tree lookup_template_class		(tree, tree, tree, tree,
 						 int, tsubst_flags_t);
 extern tree lookup_template_function		(tree, tree);
diff --git a/gcc/cp/decl.c b/gcc/cp/decl.c
index 32c01e72..15e9ddd8 100644
--- a/gcc/cp/decl.c
+++ b/gcc/cp/decl.c
@@ -9677,7 +9677,10 @@ xref_tag (enum tag_types tag_code, tree name,
   else
     {
       if (template_header_p && IS_AGGR_TYPE (t))
-	redeclare_class_template (t, current_template_parms);
+        {
+	  if (!redeclare_class_template (t, current_template_parms))
+            POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);
+        }
       else if (!processing_template_decl
 	       && CLASS_TYPE_P (t)
 	       && CLASSTYPE_IS_TEMPLATE (t))
diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 4ce6c18d..85c63f06 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -9529,7 +9529,13 @@ cp_parser_explicit_specialization (cp_parser* parser)
   else
     need_lang_pop = false;
   /* Let the front end know that we are beginning a specialization.  */
-  begin_specialization ();
+  if (!begin_specialization ())
+    {
+      end_specialization ();
+      cp_parser_skip_to_end_of_block_or_statement (parser);
+      return;
+    }
+
   /* If the next keyword is `template', we need to figure out whether
      or not we're looking a template-declaration.  */
   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 2f3f3a9c..04228e59 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -141,7 +141,7 @@ static int template_class_depth_real (tree, int);
 static tree tsubst_aggr_type (tree, tree, tsubst_flags_t, tree, int);
 static tree tsubst_arg_types (tree, tree, tsubst_flags_t, tree);
 static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);
-static void check_specialization_scope (void);
+static bool check_specialization_scope (void);
 static tree process_partial_specialization (tree);
 static void set_current_access_from_decl (tree);
 static void check_default_tmpl_args (tree, tree, int, int);
@@ -571,9 +571,10 @@ begin_template_parm_list (void)
 }
 
 /* This routine is called when a specialization is declared.  If it is
-   invalid to declare a specialization here, an error is reported.  */
+   invalid to declare a specialization here, an error is reported and
+   false is returned, otherwise this routine will return true.  */
 
-static void
+static bool
 check_specialization_scope (void)
 {
   tree scope = current_scope ();
@@ -588,7 +589,10 @@ check_specialization_scope (void)
      shall be declared in the namespace of which the class template
      is a member.  */
   if (scope && TREE_CODE (scope) != NAMESPACE_DECL)
-    error ("explicit specialization in non-namespace scope %qD", scope);
+    {
+      error ("explicit specialization in non-namespace scope %qD", scope);
+      return false;
+    }
 
   /* [temp.expl.spec]
 
@@ -599,17 +603,22 @@ check_specialization_scope (void)
      explicitly specialize a class member template if its enclosing
      class templates are not explicitly specialized as well.  */
   if (current_template_parms)
-    error ("enclosing class templates are not explicitly specialized");
+    {
+      error ("enclosing class templates are not explicitly specialized");
+      return false;
+    }
+
+  return true;
 }
 
 /* We've just seen template <>.  */
 
-void
+bool
 begin_specialization (void)
 {
   begin_scope (sk_template_spec, NULL);
   note_template_header (1);
-  check_specialization_scope ();
+  return check_specialization_scope ();
 }
 
 /* Called at then end of processing a declaration preceded by
@@ -3352,7 +3361,7 @@ push_template_decl (tree decl)
      template <class T> struct S;
      template <class T> struct S {};  */
 
-void
+bool
 redeclare_class_template (tree type, tree parms)
 {
   tree tmpl;
@@ -3362,7 +3371,7 @@ redeclare_class_template (tree type, tree parms)
   if (!TYPE_TEMPLATE_INFO (type))
     {
       error ("%qT is not a template type", type);
-      return;
+      return false;
     }
 
   tmpl = TYPE_TI_TEMPLATE (type);
@@ -3370,13 +3379,13 @@ redeclare_class_template (tree type, tree parms)
     /* The type is nested in some template class.  Nothing to worry
        about here; there are no new template parameters for the nested
        type.  */
-    return;
+    return true;
 
   if (!parms)
     {
       error ("template specifiers not specified in declaration of %qD",
 	     tmpl);
-      return;
+      return false;
     }
 
   parms = INNERMOST_TEMPLATE_PARMS (parms);
@@ -3388,7 +3397,7 @@ redeclare_class_template (tree type, tree parms)
       error ("used %d template parameter(s) instead of %d",
 	     TREE_VEC_LENGTH (tmpl_parms),
 	     TREE_VEC_LENGTH (parms));
-      return;
+      return false;
     }
 
   for (i = 0; i < TREE_VEC_LENGTH (tmpl_parms); ++i)
@@ -3406,7 +3415,7 @@ redeclare_class_template (tree type, tree parms)
 	{
 	  error ("template parameter %q+#D", tmpl_parm);
 	  error ("redeclared here as %q#D", parm);
-	  return;
+	  return false;
 	}
 
       if (tmpl_default != NULL_TREE && parm_default != NULL_TREE)
@@ -3417,7 +3426,7 @@ redeclare_class_template (tree type, tree parms)
 	     by two different declarations in the same scope.  */
 	  error ("redefinition of default argument for %q#D", parm);
 	  error ("%J  original definition appeared here", tmpl_parm);
-	  return;
+	  return false;
 	}
 
       if (parm_default != NULL_TREE)
@@ -3429,6 +3438,8 @@ redeclare_class_template (tree type, tree parms)
 	   parameters for any members.  */
 	TREE_PURPOSE (TREE_VEC_ELT (parms, i)) = tmpl_default;
     }
+
+    return true;
 }
 
 /* Simplify EXPR if it is a non-dependent expression.  Returns the
diff --git a/gcc/testsuite/g++.dg/parse/crash28.C b/gcc/testsuite/g++.dg/parse/crash28.C
index bc491655..67d78d6b 100644
--- a/gcc/testsuite/g++.dg/parse/crash28.C
+++ b/gcc/testsuite/g++.dg/parse/crash28.C
@@ -7,7 +7,7 @@
 
 template <class _Tp> class insert_iterator<slist<_Tp> > {}; // { dg-error "not a template|not declared in this scope|expected unqualified-id|extra" }
 template <class _Value> class insert_iterator<int > { // { dg-error "template" }
-  hash_set<_Value>; // { dg-error "no type|expected" }
+  hash_set<_Value>;
 };
 
 template<int> struct A<X<> > {}; // { dg-error "not a template|not declared in this scope|expected unqualified-id|extra" }
diff --git a/gcc/testsuite/g++.dg/template/crash32.C b/gcc/testsuite/g++.dg/template/crash32.C
index a8363512..4c7af8a3 100644
--- a/gcc/testsuite/g++.dg/template/crash32.C
+++ b/gcc/testsuite/g++.dg/template/crash32.C
@@ -3,7 +3,7 @@
 struct integral_constant { };
 
 template<typename _Tp>
-struct is_function : public integral_constant { }; // { dg-error "previous" }
+struct is_function : public integral_constant { };
 
 template<>
 struct is_function : public integral_constant { }; // { dg-error "" }
diff --git a/gcc/testsuite/g++.dg/template/crash34.C b/gcc/testsuite/g++.dg/template/crash34.C
index 9cca62f0..ef4d21b6 100644
--- a/gcc/testsuite/g++.dg/template/crash34.C
+++ b/gcc/testsuite/g++.dg/template/crash34.C
@@ -9,4 +9,4 @@ class Foo;
 
 template <typename T> class Foo { }; // { dg-error "not a template type" }
 
-Foo<int> x; // { dg-error "not a template" }
+Foo<int> x; // { dg-error "not a template|incomplete type" }
diff --git a/gcc/testsuite/g++.dg/template/crash58.C b/gcc/testsuite/g++.dg/template/crash58.C
new file mode 100644
index 00000000..af2172c6
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/crash58.C
@@ -0,0 +1,10 @@
+//PR 26938
+
+template<int, int = 0> struct A;  // { dg-error "previous declaration" }
+
+template<int> struct A            // { dg-error "template" }
+{
+  A();
+};
+
+A<0> a;                           // { dg-error "incomplete type" }
diff --git a/gcc/testsuite/g++.dg/template/crash59.C b/gcc/testsuite/g++.dg/template/crash59.C
new file mode 100644
index 00000000..61d2188f
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/crash59.C
@@ -0,0 +1,19 @@
+//PR c++/27329
+
+template<int> struct A                          // { dg-error "forward declaration" }
+!                                               // { dg-error "expected unqualified-id" }
+  ;
+
+template<int> struct A { int foo(); };          // { dg-error "not a template" }
+
+int i = A<0>().foo();                           // { dg-error "not a template|invalid use" }
+
+
+template<int> struct B        
+!                                               // { dg-error "expected unqualified-id" }
+  ;
+
+template<int> struct B { static int bar(); };   // { dg-error "not a template" }
+
+int j = B<0>::bar();                            // { dg-error "not a template|incomplete type" }
+ 
diff --git a/gcc/testsuite/g++.dg/template/friend31.C b/gcc/testsuite/g++.dg/template/friend31.C
index 2d62f878..222ce238 100644
--- a/gcc/testsuite/g++.dg/template/friend31.C
+++ b/gcc/testsuite/g++.dg/template/friend31.C
@@ -10,12 +10,12 @@ template <typename T, typename U> struct F; // { dg-error "previous declaration"
 class W
 {
   template<int i> friend class F;	// { dg-error "template parameter" }
-  int x;
+  int x;                                // { dg-error "private" }
 };
 
 template <typename T, typename U> struct F
 {
-  void Look(W& w) { w.x = 3; }
+  void Look(W& w) { w.x = 3; }          // { dg-error "within this context" }
 };
 
 int main()
diff --git a/gcc/testsuite/g++.dg/template/spec33.C b/gcc/testsuite/g++.dg/template/spec33.C
new file mode 100644
index 00000000..809d4f01
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/spec33.C
@@ -0,0 +1,7 @@
+//PR c++/27667
+
+struct A
+{
+    template<int> static void foo   () {}
+    template<>    static void foo<0>() {}  // { dg-error "explicit" }
+}; 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/spec20.C b/gcc/testsuite/g++.old-deja/g++.pt/spec20.C
index 064ce142..b6148e5d 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/spec20.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/spec20.C
@@ -10,7 +10,7 @@ struct S {
   template <class U> void f(U);
   template <> void f<int>(int); // { dg-error "" } invalid specialization
 
-  template <class V> struct I {};
-  template <class V> struct I<V*> {};
+  template <class V> struct I {};      // { dg-error "template" }
+  template <class V> struct I<V*> {};  // { dg-error "template" }
   template <> struct I<int>; // { dg-error "" } invalid specialization
 };
