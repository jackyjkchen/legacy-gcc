diff --git a/gcc/gimplify.c b/gcc/gimplify.c
index e854eec1..eecaf114 100644
--- a/gcc/gimplify.c
+++ b/gcc/gimplify.c
@@ -1238,20 +1238,34 @@ gimplify_switch_expr (tree *expr_p, tree *pre_p)
       labels = gimplify_ctxp->case_labels;
       gimplify_ctxp->case_labels = saved_labels;
 
-      len = VEC_length (tree, labels);
-
-      for (i = 0; i < len; ++i)
+      i = 0;
+      while (i < VEC_length (tree, labels))
 	{
-	  tree t = VEC_index (tree, labels, i);
-	  if (!CASE_LOW (t))
+	  tree elt = VEC_index (tree, labels, i);
+	  tree low = CASE_LOW (elt);
+	  bool remove_element = FALSE;
+
+	  if (low)
+	    {
+	      /* Discard empty ranges.  */
+	      tree high = CASE_HIGH (elt);
+	      if (high && tree_int_cst_lt (high, low))
+	        remove_element = TRUE;
+	    }
+	  else
 	    {
 	      /* The default case must be the last label in the list.  */
-	      default_case = t;
-	      VEC_replace (tree, labels, i, VEC_index (tree, labels, len - 1));
-	      len--;
-	      break;
+	      gcc_assert (!default_case);
+	      default_case = elt;
+	      remove_element = TRUE;
 	    }
+
+	  if (remove_element)
+	    VEC_ordered_remove (tree, labels, i);
+	  else
+	    i++;
 	}
+      len = i;
 
       label_vec = make_tree_vec (len + 1);
       SWITCH_LABELS (*expr_p) = label_vec;
diff --git a/gcc/stmt.c b/gcc/stmt.c
index e08eab05..47ab59fd 100644
--- a/gcc/stmt.c
+++ b/gcc/stmt.c
@@ -2359,7 +2359,7 @@ expand_case (tree exp)
 	  high = CASE_HIGH (elt);
 
 	  /* Discard empty ranges.  */
-	  if (high && INT_CST_LT (high, low))
+	  if (high && tree_int_cst_lt (high, low))
 	    continue;
 
 	  case_list = add_case_node (case_list, index_type, low, high,
@@ -2396,9 +2396,9 @@ expand_case (tree exp)
 	    }
 	  else
 	    {
-	      if (INT_CST_LT (n->low, minval))
+	      if (tree_int_cst_lt (n->low, minval))
 		minval = n->low;
-	      if (INT_CST_LT (maxval, n->high))
+	      if (tree_int_cst_lt (maxval, n->high))
 		maxval = n->high;
 	    }
 	  /* A range counts double, since it requires two compares.  */
@@ -2680,7 +2680,8 @@ estimate_case_costs (case_node_ptr node)
 
   for (n = node; n; n = n->right)
     {
-      if ((INT_CST_LT (n->low, min_ascii)) || INT_CST_LT (max_ascii, n->high))
+      if (tree_int_cst_lt (n->low, min_ascii)
+	  || tree_int_cst_lt (max_ascii, n->high))
 	return 0;
 
       for (i = (HOST_WIDE_INT) TREE_INT_CST_LOW (n->low);
diff --git a/gcc/testsuite/gcc.c-torture/execute/pr34154.c b/gcc/testsuite/gcc.c-torture/execute/pr34154.c
new file mode 100644
index 00000000..cd7bfc6b
--- /dev/null
+++ b/gcc/testsuite/gcc.c-torture/execute/pr34154.c
@@ -0,0 +1,16 @@
+int foo( unsigned long long aLL )
+{
+    switch( aLL )
+    {
+        case 1000000000000000000ULL ... 9999999999999999999ULL : return 19 ; 
+        default                                 : return 20 ;
+    };
+};
+extern void abort (void);
+int main()
+{
+    unsigned long long aLL = 1000000000000000000ULL;
+    if (foo (aLL) != 19)
+	abort ();
+    return 0;
+}
