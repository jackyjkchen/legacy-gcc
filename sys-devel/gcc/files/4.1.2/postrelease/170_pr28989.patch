diff --git a/gcc/cp/tree.c b/gcc/cp/tree.c
index 1c56e54d..b6b73339 100644
--- a/gcc/cp/tree.c
+++ b/gcc/cp/tree.c
@@ -72,11 +72,12 @@ lvalue_p_1 (tree ref,
 
   switch (TREE_CODE (ref))
     {
+    case SAVE_EXPR:
+      return clk_none;
       /* preincrements and predecrements are valid lvals, provided
 	 what they refer to are valid lvals.  */
     case PREINCREMENT_EXPR:
     case PREDECREMENT_EXPR:
-    case SAVE_EXPR:
     case TRY_CATCH_EXPR:
     case WITH_CLEANUP_EXPR:
     case REALPART_EXPR:
diff --git a/gcc/testsuite/g++.dg/expr/lval3.C b/gcc/testsuite/g++.dg/expr/lval3.C
new file mode 100644
index 00000000..f106e696
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/lval3.C
@@ -0,0 +1,9 @@
+// i++ is never an lvalue
+void
+f()
+{
+  bool i = 0;
+  i++ = 3; // { dg-error "" }
+}
+
+
diff --git a/gcc/testsuite/g++.dg/expr/lval4.C b/gcc/testsuite/g++.dg/expr/lval4.C
new file mode 100644
index 00000000..c66e2f6a
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/lval4.C
@@ -0,0 +1,9 @@
+// ++i is always an lvalue
+void
+f()
+{
+  bool i = 0;
+  ++i = 3;
+}
+
+
