diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index ee6c41cf4..f9be00e6b 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -7317,9 +7317,10 @@ convert_template_argument (tree parm,
           /* Reject template arguments that are references to built-in
              functions with no library fallbacks.  */
           const_tree inner = TREE_OPERAND (val, 0);
-          if (TREE_CODE (TREE_TYPE (inner)) == REFERENCE_TYPE
-              && TREE_CODE (TREE_TYPE (TREE_TYPE (inner))) == FUNCTION_TYPE
-              && TREE_CODE (TREE_TYPE (inner)) == REFERENCE_TYPE
+	  const_tree innertype = TREE_TYPE (inner);
+	  if (innertype
+	      && TREE_CODE (innertype) == REFERENCE_TYPE
+	      && TREE_CODE (TREE_TYPE (innertype)) == FUNCTION_TYPE
               && 0 < TREE_OPERAND_LENGTH (inner)
               && reject_gcc_builtin (TREE_OPERAND (inner, 0)))
               return error_mark_node;
diff --git a/gcc/testsuite/g++.dg/cpp1y/pr78774.C b/gcc/testsuite/g++.dg/cpp1y/pr78774.C
new file mode 100644
index 000000000..c77032ddb
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp1y/pr78774.C
@@ -0,0 +1,9 @@
+// PR c++/78774 - [6/7 Regression] ICE in constexpr string literals and
+// templates
+// { dg-do compile { target c++14 } }
+
+template <int> struct ops {
+  template <int> struct A;
+  template <int *Ptr> using explode = typename A<*Ptr>::join;
+};
+template <typename Ts> typename ops<'\0'>::explode<Ts::join>::type a;
