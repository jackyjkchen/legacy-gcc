diff --git a/gcc/cp/class.c b/gcc/cp/class.c
index 6de0421d6..cf51231e3 100644
--- a/gcc/cp/class.c
+++ b/gcc/cp/class.c
@@ -5649,6 +5649,8 @@ finalize_literal_type_property (tree t)
   if (cxx_dialect < cxx11
       || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))
     CLASSTYPE_LITERAL_P (t) = false;
+  else if (CLASSTYPE_LITERAL_P (t) && LAMBDA_TYPE_P (t))
+    CLASSTYPE_LITERAL_P (t) = (cxx_dialect >= cxx1z);
   else if (CLASSTYPE_LITERAL_P (t) && !TYPE_HAS_TRIVIAL_DFLT (t)
 	   && CLASSTYPE_NON_AGGREGATE (t)
 	   && !TYPE_HAS_CONSTEXPR_CTOR (t))
@@ -5690,10 +5692,14 @@ explain_non_literal_class (tree t)
     return;
 
   inform (0, "%q+T is not literal because:", t);
-  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))
+  if (cxx_dialect < cxx1z && LAMBDA_TYPE_P (t))
+    inform (0, "  %qT is a closure type, which is only literal in "
+	    "C++1z and later", t);
+  else if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))
     inform (0, "  %q+T has a non-trivial destructor", t);
   else if (CLASSTYPE_NON_AGGREGATE (t)
 	   && !TYPE_HAS_TRIVIAL_DFLT (t)
+	   && !LAMBDA_TYPE_P (t)
 	   && !TYPE_HAS_CONSTEXPR_CTOR (t))
     {
       inform (0, "  %q+T is not an aggregate, does not have a trivial "
diff --git a/gcc/testsuite/g++.dg/cpp1z/constexpr-lambda15.C b/gcc/testsuite/g++.dg/cpp1z/constexpr-lambda15.C
index fc363cc65..54fc13a92 100644
--- a/gcc/testsuite/g++.dg/cpp1z/constexpr-lambda15.C
+++ b/gcc/testsuite/g++.dg/cpp1z/constexpr-lambda15.C
@@ -1,9 +1,9 @@
 // PR c++/79461
-// { dg-options -std=c++1z }
+// { dg-do compile { target c++14 } }
 
 struct S {
   constexpr S(int i) {
-    auto f = [i]{};
+    auto f = [i]{};		// { dg-error "literal" "" { target c++14_only } }
   }
 };
 int main() {}
