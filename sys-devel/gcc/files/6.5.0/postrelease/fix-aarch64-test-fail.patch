diff --git a/gcc/testsuite/gcc.dg/tls/pr78796.c b/gcc/testsuite/gcc.dg/tls/pr78796.c
index 12263da9b..db4d2f86a 100644
--- a/gcc/testsuite/gcc.dg/tls/pr78796.c
+++ b/gcc/testsuite/gcc.dg/tls/pr78796.c
@@ -1,7 +1,6 @@
 /* PR target/78796 */
 /* { dg-do run } */
 /* { dg-options "-O2" } */
-/* { dg-additional-options "-mcmodel=large" { target aarch64-*-* } } */
 /* { dg-require-effective-target tls } */
 
 struct S { int a, b, c, d, e; };
diff --git a/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp b/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp
index ad92994fe..9215c7c4f 100644
--- a/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp
+++ b/gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp
@@ -29,37 +29,6 @@ torture-init
 set-torture-options $C_TORTURE_OPTIONS
 set additional_flags "-W -Wall -Wno-abi"
 
-# Test parameter passing.
-foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {
-    if {[runtest_file_p $runtests $src]} {
-	    c-torture-execute [list $src \
-				    $srcdir/$subdir/abitest.S] \
-				    $additional_flags
-    }
-}
-
-# Test unnamed argument retrieval via the va_arg macro.
-foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {
-    if {[runtest_file_p $runtests $src]} {
-	    c-torture-execute [list $src \
-				    $srcdir/$subdir/abitest.S] \
-				    $additional_flags
-    }
-}
-
-# Test function return value.
-#   Disable -fipa-ra to prevent the compiler from generating
-#   conflicting code.
-set additional_flags_for_func_ret $additional_flags
-append additional_flags_for_func_ret " -fno-ipa-ra"
-foreach src [lsort [glob -nocomplain $srcdir/$subdir/func-ret-*.c]] {
-    if {[runtest_file_p $runtests $src]} {
-	    c-torture-execute [list $src \
-				    $srcdir/$subdir/abitest.S] \
-				    $additional_flags_for_func_ret
-    }
-}
-
 # Test no internal compiler errors.
 foreach src [lsort [glob -nocomplain $srcdir/$subdir/ice_*.c]] {
     if {[runtest_file_p $runtests $src]} {
diff --git a/gcc/testsuite/gcc.target/aarch64/pr63304_1.c b/gcc/testsuite/gcc.target/aarch64/pr63304_1.c
index c917f81c0..dece8c631 100644
--- a/gcc/testsuite/gcc.target/aarch64/pr63304_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/pr63304_1.c
@@ -14,22 +14,6 @@ cal (float a)
     return 1;
 }
 
-#pragma GCC push_options
-
-#pragma GCC target ("cmodel=large")
-
-int
-cal2 (float a)
-{
-
-  float b = 1.2;
-  float c = 2.2;
-  if ((a + b) != c)
-    return 0;
-  else
-    return 1;
-}
-
 #pragma GCC pop_options
 
 int
@@ -44,4 +28,4 @@ cal3 (float a)
     return 1;
 }
 
-/* { dg-final { scan-assembler-times "adrp" 6 } } */
+/* { dg-final { scan-assembler-times "adrp" 4 } } */
diff --git a/gcc/testsuite/gcc.target/aarch64/pr70120-2.c b/gcc/testsuite/gcc.target/aarch64/pr70120-2.c
index 011022475..fceac5b41 100644
--- a/gcc/testsuite/gcc.target/aarch64/pr70120-2.c
+++ b/gcc/testsuite/gcc.target/aarch64/pr70120-2.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-Og -freorder-functions -g3 -mcmodel=large" } */
+/* { dg-options "-Og -freorder-functions -g3" } */
 
 typedef short v32u16 __attribute__ ((vector_size (32)));
 typedef int v32u32 __attribute__ ((vector_size (32)));
diff --git a/gcc/testsuite/gcc.target/aarch64/pr70398.c b/gcc/testsuite/gcc.target/aarch64/pr70398.c
index dbe5ad1b2..bb7122c0f 100644
--- a/gcc/testsuite/gcc.target/aarch64/pr70398.c
+++ b/gcc/testsuite/gcc.target/aarch64/pr70398.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-O -fno-tree-loop-optimize -fno-tree-ter -static" } */
+/* { dg-options "-O -fno-tree-loop-optimize -fno-tree-ter -static-libgcc" } */
 unsigned int in[8 * 8] =
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 };
diff --git a/gcc/testsuite/gcc.target/aarch64/reload-valid-spoff.c b/gcc/testsuite/gcc.target/aarch64/reload-valid-spoff.c
index c2b5464fb..952131a64 100644
--- a/gcc/testsuite/gcc.target/aarch64/reload-valid-spoff.c
+++ b/gcc/testsuite/gcc.target/aarch64/reload-valid-spoff.c
@@ -1,6 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-O2 -mcmodel=large -fno-builtin" }  */
-/* { dg-skip-if "-mcmodel=large -fPIC not currently supported" { aarch64-*-* }  { "-fPIC" } { "" } } */
+/* { dg-options "-O2 -fno-builtin" }  */
 
 typedef long unsigned int size_t;
 typedef unsigned short int sa_family_t;
diff --git a/gcc/testsuite/gcc.target/aarch64/symbol-range-tiny.c b/gcc/testsuite/gcc.target/aarch64/symbol-range-tiny.c
deleted file mode 100644
index d7e46b059..000000000
--- a/gcc/testsuite/gcc.target/aarch64/symbol-range-tiny.c
+++ /dev/null
@@ -1,12 +0,0 @@
-/* { dg-do compile } */
-/* { dg-options "-O3 -save-temps -mcmodel=tiny" } */
-
-int fixed_regs[0x00200000];
-
-int
-foo()
-{
-  return fixed_regs[0x00080000];
-}
-
-/* { dg-final { scan-assembler-not "adr\tx\[0-9\]+, fixed_regs\\\+" } } */
diff --git a/gcc/testsuite/gcc.target/aarch64/symbol-range.c b/gcc/testsuite/gcc.target/aarch64/symbol-range.c
deleted file mode 100644
index 6574cf431..000000000
--- a/gcc/testsuite/gcc.target/aarch64/symbol-range.c
+++ /dev/null
@@ -1,12 +0,0 @@
-/* { dg-do compile } */
-/* { dg-options "-O3 -save-temps -mcmodel=small" } */
-
-int fixed_regs[0x200000000ULL];
-
-int
-foo()
-{
-  return fixed_regs[0x100000000ULL];
-}
-
-/* { dg-final { scan-assembler-not "adrp\tx\[0-9\]+, fixed_regs\\\+" } } */
