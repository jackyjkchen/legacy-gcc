diff --git a/gcc/testsuite/c-c++-common/asan/pr59063-2.c b/gcc/testsuite/c-c++-common/asan/pr59063-2.c
index 759b7f2..a22db6a 100644
--- a/gcc/testsuite/c-c++-common/asan/pr59063-2.c
+++ b/gcc/testsuite/c-c++-common/asan/pr59063-2.c
@@ -1,5 +1,4 @@
 /* { dg-do run { target { *-*-linux* } } } */
-/* { dg-options "-static-libasan" } */
 
 #include <time.h>
 static int weak_gettime (clockid_t clk_id, struct timespec *tp)
diff --git a/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c b/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
index 45759ae..a8ba6f9 100644
--- a/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
+++ b/gcc/testsuite/c-c++-common/asan/strncpy-overflow-1.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-fno-builtin-malloc -fno-builtin-strncpy" } */
+/* { dg-options "-fno-builtin-malloc -fno-builtin-strncpy -Wno-stringop-overflow" } */
 /* { dg-shouldfail "asan" } */
 
 #include <string.h>
diff --git a/gcc/testsuite/c-c++-common/torture/vector-compare-1.c b/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
index 4cdfcf7..a1bf213 100644
--- a/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
+++ b/gcc/testsuite/c-c++-common/torture/vector-compare-1.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-format" } */
 #define vector(elcount, type)  \
 __attribute__((vector_size((elcount)*sizeof(type)))) type
 
diff --git a/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c b/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
index e2176da..175efea 100644
--- a/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
+++ b/gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c
@@ -1,4 +1,5 @@
 /* { dg-shouldfail "tsan" } */
+/* { dg-options "-Wno-unused-result" } */
 /* { dg-additional-options "-ldl" } */
 
 #include <pthread.h>
diff --git a/gcc/testsuite/g++.dg/abi/anon1.C b/gcc/testsuite/g++.dg/abi/anon1.C
index 0fb4ae8..52018c3 100644
--- a/gcc/testsuite/g++.dg/abi/anon1.C
+++ b/gcc/testsuite/g++.dg/abi/anon1.C
@@ -1,4 +1,5 @@
 // PR c++/54883
+// { dg-additional-options "-fno-pie" { target ia32 } }
 
 namespace { enum E { E1 }; } void f(E e) { }
 
diff --git a/gcc/testsuite/g++.dg/abi/anon4.C b/gcc/testsuite/g++.dg/abi/anon4.C
index 088ba99..517cc52 100644
--- a/gcc/testsuite/g++.dg/abi/anon4.C
+++ b/gcc/testsuite/g++.dg/abi/anon4.C
@@ -1,4 +1,5 @@
 // PR c++/65209
+// { dg-additional-options "-fno-pie" { target { ia32 || sparc*-*-* } } }
 // { dg-final { scan-assembler-not "comdat" } }
 
 // Everything involving the anonymous namespace bits should be private, not
diff --git a/gcc/testsuite/g++.dg/abi/pragma-pack1.C b/gcc/testsuite/g++.dg/abi/pragma-pack1.C
index 9b76071..689807c 100644
--- a/gcc/testsuite/g++.dg/abi/pragma-pack1.C
+++ b/gcc/testsuite/g++.dg/abi/pragma-pack1.C
@@ -1,4 +1,5 @@
 // PR c++/7046
+// { dg-options "-Wno-format" }
 
 extern "C" int printf (const char *, ...);
 
diff --git a/gcc/testsuite/g++.dg/abi/regparm1.C b/gcc/testsuite/g++.dg/abi/regparm1.C
index c471046..63a40bf 100644
--- a/gcc/testsuite/g++.dg/abi/regparm1.C
+++ b/gcc/testsuite/g++.dg/abi/regparm1.C
@@ -1,5 +1,6 @@
 // PR c++/29911 (9381)
 // { dg-do run { target i?86-*-* x86_64-*-* } }
+// { dg-options "-Wno-format" }
 // { dg-require-effective-target c++11 }
 
 extern "C" int printf(const char *, ...);
diff --git a/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C b/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
index e64c184..4c53b1c 100644
--- a/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
+++ b/gcc/testsuite/g++.dg/asan/interception-malloc-test-1.C
@@ -1,7 +1,7 @@
 // ASan interceptor can be accessed with __interceptor_ prefix.
 
 // { dg-do run { target *-*-linux* } }
-// { dg-options "-fno-builtin-free" }
+// { dg-options "-fno-builtin-free -Wno-unused-result" }
 // { dg-additional-options "-D__NO_INLINE__" { target { *-*-linux-gnu } } }
 // { dg-shouldfail "asan" }
 
diff --git a/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C b/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
index f59cd84..886b244 100644
--- a/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
+++ b/gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C
@@ -1,5 +1,6 @@
 // PR c++/53202
 // { dg-do run { target c++11 } }
+// { dg-options "-Wno-format" }
 
 #include <tuple>
 
diff --git a/gcc/testsuite/g++.dg/ext/align1.C b/gcc/testsuite/g++.dg/ext/align1.C
index 6c960c3..4484e3b 100644
--- a/gcc/testsuite/g++.dg/ext/align1.C
+++ b/gcc/testsuite/g++.dg/ext/align1.C
@@ -2,6 +2,7 @@
 // The alignment used to be 64 but Cygwin does not
 // support an alignment greater than 16 and COFF 
 // not support an alignment greater than 4.
+// { dg-options "-Wno-format" }
 
 extern "C" int printf (const char *, ...);
 
diff --git a/gcc/testsuite/g++.dg/init/elide3.C b/gcc/testsuite/g++.dg/init/elide3.C
index 7eb0389..22a01c7 100644
--- a/gcc/testsuite/g++.dg/init/elide3.C
+++ b/gcc/testsuite/g++.dg/init/elide3.C
@@ -1,5 +1,6 @@
 // PR c++/67557
 // { dg-do run }
+// { dg-options "-Wno-format" }
 
 namespace std
 {
diff --git a/gcc/testsuite/g++.dg/opt/alias2.C b/gcc/testsuite/g++.dg/opt/alias2.C
index 0b41224..e75e52e 100644
--- a/gcc/testsuite/g++.dg/opt/alias2.C
+++ b/gcc/testsuite/g++.dg/opt/alias2.C
@@ -1,5 +1,5 @@
 // { dg-do run }
-// { dg-options "-O2" }
+// { dg-options "-O2 -Wno-format" }
 
 extern "C" int printf (const char*, ...);
 
diff --git a/gcc/testsuite/g++.dg/other/anon5.C b/gcc/testsuite/g++.dg/other/anon5.C
index ee4601e..dadd92e 100644
--- a/gcc/testsuite/g++.dg/other/anon5.C
+++ b/gcc/testsuite/g++.dg/other/anon5.C
@@ -1,5 +1,6 @@
 // PR c++/34094
 // { dg-do link { target { ! { *-*-darwin* *-*-hpux* *-*-solaris2.* } } } }
+// { dg-require-effective-target nonpic }
 // { dg-options "-gdwarf-2" }
 // Ignore additional message on powerpc-ibm-aix
 // { dg-prune-output "obtain more information" } */
diff --git a/gcc/testsuite/g++.dg/stackprotectexplicit2.C b/gcc/testsuite/g++.dg/stackprotectexplicit2.C
index 9cf9ab9..90b7695 100644
--- a/gcc/testsuite/g++.dg/stackprotectexplicit2.C
+++ b/gcc/testsuite/g++.dg/stackprotectexplicit2.C
@@ -2,6 +2,7 @@
 
 /* { dg-do compile { target i?86-*-* x86_64-*-* } } */
 /* { dg-options "-O2 -fstack-protector-explicit" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 int A()
 {
diff --git a/gcc/testsuite/g++.dg/tc1/dr20.C b/gcc/testsuite/g++.dg/tc1/dr20.C
index fe58621..26e6d3d 100644
--- a/gcc/testsuite/g++.dg/tc1/dr20.C
+++ b/gcc/testsuite/g++.dg/tc1/dr20.C
@@ -1,4 +1,5 @@
 // { dg-do run }
+// { dg-options "-Wno-format" }
 // Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>
 // DR20: Some clarifications needed for 12.8 para 15 
 
diff --git a/gcc/testsuite/g++.dg/tls/thread_local-order2.C b/gcc/testsuite/g++.dg/tls/thread_local-order2.C
index f8df917..d274e8c 100644
--- a/gcc/testsuite/g++.dg/tls/thread_local-order2.C
+++ b/gcc/testsuite/g++.dg/tls/thread_local-order2.C
@@ -2,10 +2,11 @@
 // that isn't reverse order of construction.  We need to move
 // __cxa_thread_atexit into glibc to get this right.
 
-// { dg-do run { xfail *-*-* } }
+// { dg-do run }
 // { dg-require-effective-target c++11 }
 // { dg-add-options tls }
 // { dg-require-effective-target tls_runtime }
+// { dg-xfail-run-if "" { { hppa*-*-hpux* *-*-solaris* } || { newlib } } }
 
 extern "C" void abort();
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C b/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
index 680bec7..97610b1 100644
--- a/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
+++ b/gcc/testsuite/g++.old-deja/g++.abi/vbase1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Copyright (C) 2000 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 16 Jan 2001 <nathan@codesourcery.com>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.brendan/template8.C b/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
index 66ba0d8..03f7c3f 100644
--- a/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
+++ b/gcc/testsuite/g++.old-deja/g++.brendan/template8.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates
 #include <stdio.h>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C b/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
index aefe5cc..50aa6a6 100644
--- a/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
+++ b/gcc/testsuite/g++.old-deja/g++.eh/ptr1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Bug: catching pointers by reference doesn't work right.
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.jason/access23.C b/gcc/testsuite/g++.old-deja/g++.jason/access23.C
index aec2819..f41801e 100644
--- a/gcc/testsuite/g++.old-deja/g++.jason/access23.C
+++ b/gcc/testsuite/g++.old-deja/g++.jason/access23.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // PRMS Id: 9127
 // Bug: members of anonymous unions are not access-controlled.
 
diff --git a/gcc/testsuite/g++.old-deja/g++.law/cvt8.C b/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
index cecec9c..373b0d8 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/cvt8.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed conversions
 // cvt file
 // From: solomon@cs.wisc.edu (Marvin Solomon)
diff --git a/gcc/testsuite/g++.old-deja/g++.law/operators28.C b/gcc/testsuite/g++.old-deja/g++.law/operators28.C
index 7d16647..005a354 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/operators28.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/operators28.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed operators
 #include <sys/types.h>
 #include <stdio.h>
diff --git a/gcc/testsuite/g++.old-deja/g++.law/weak.C b/gcc/testsuite/g++.old-deja/g++.law/weak.C
index 49132ad..ab06074 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/weak.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/weak.C
@@ -1,6 +1,6 @@
 // { dg-do link { target i?86-*-linux* i?86-*-gnu* x86_64-*-linux* } }
 // { dg-require-effective-target static }
-// { dg-options "-static" }
+// { dg-options "-static-libstdc++ -static-libgcc" }
 // Bug: g++ fails to instantiate operator<<.
 
 // libc-5.4.xx has __IO_putc in its static C library, which can conflict
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/net35.C b/gcc/testsuite/g++.old-deja/g++.mike/net35.C
index bded913..9140e7b 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/net35.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/net35.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 
 class A {
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/offset1.C b/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
index b0ddc7b..5e3ca77 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/offset1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 void *vp;
 int fail = 0;
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p12306.C b/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
index 6309016..923e5ff 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p12306.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 12306
 
 void *ptr1, *ptr2;
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3579.C b/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
index 90a1344..3298872 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3579.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3579
 
 extern "C" int printf(const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
index 56e4bcb..42de2bd 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
index dff53b5..858b2b7 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708a.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C b/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
index 2cccc46..7883c47 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p3708b.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // prms-id: 3708
 
 extern "C" int printf (const char *, ...);
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p646.C b/gcc/testsuite/g++.old-deja/g++.mike/p646.C
index 4f7807d..d7bc1bc 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p646.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p646.C
@@ -1,5 +1,5 @@
 // { dg-do assemble  }
-// { dg-options "-Wno-deprecated -Wreturn-type" }
+// { dg-options "-Wno-deprecated -Wreturn-type -Wno-format" }
 // GROUPS passed i960
 /*
   Bug Id: bnr
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p710.C b/gcc/testsuite/g++.old-deja/g++.mike/p710.C
index 7fdd5b0..c16bbfc 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p710.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p710.C
@@ -1,4 +1,5 @@
 // { dg-do assemble  }
+// { dg-options "-Wno-format" }
 // GROUPS passed delete
 /*
   Bug Id: 
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/p789a.C b/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
index bee0228..725aa7d 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/p789a.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // global and local multidimensional array objects are not getting
 // constructors called on any dimension, other than the first.  Also,
 // the destructors are not being called.  Seems odd, they probably
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C b/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
index 209c5eb..2839b4f 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/pmf2.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 
 class A_table {
diff --git a/gcc/testsuite/g++.old-deja/g++.mike/temp.C b/gcc/testsuite/g++.old-deja/g++.mike/temp.C
index 0a5ce58..dc64f13 100644
--- a/gcc/testsuite/g++.old-deja/g++.mike/temp.C
+++ b/gcc/testsuite/g++.old-deja/g++.mike/temp.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf(const char *, ...);
 extern "C" const char *getenv(const char *);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.other/temporary1.C b/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
index b1c8cd6..d940ecb 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/temporary1.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char *, ...);
 
 int c, d;
diff --git a/gcc/testsuite/g++.old-deja/g++.other/vbase5.C b/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
index 10c2f31..fe85a4d 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/vbase5.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 // Copyright (C) 2000 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 19 Jan 2001 <nathan@codesourcery.com>
 
diff --git a/gcc/testsuite/g++.old-deja/g++.other/virtual8.C b/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
index f1ec9ad..4229c1d 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/virtual8.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char*, ...);
 
 struct A
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
index 3111f41..1587cb8 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp23.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
index 4e81d01..be214f4 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp24.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
index 6c196f5..157ed94 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp25.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C b/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
index 3eb5f28..098d124 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/memtemp26.C
@@ -1,4 +1,5 @@
 // { dg-do link  }
+// { dg-options "-Wno-format" }
 // GROUPS passed templates membertemplates
 extern "C" int printf(const char*, ...);
 
diff --git a/gcc/testsuite/g++.old-deja/g++.pt/t39.C b/gcc/testsuite/g++.old-deja/g++.pt/t39.C
index 8f9bead..f8569a0 100644
--- a/gcc/testsuite/g++.old-deja/g++.pt/t39.C
+++ b/gcc/testsuite/g++.old-deja/g++.pt/t39.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 extern "C" int printf (const char *, ...);
 
 template <class T>
diff --git a/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C b/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
index 4163399..efd291a 100644
--- a/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
+++ b/gcc/testsuite/g++.old-deja/g++.robertl/eb17.C
@@ -1,4 +1,5 @@
 // { dg-do run  }
+// { dg-options "-Wno-format" }
 #include <stdio.h>
 
 class A {
diff --git a/gcc/testsuite/gcc.dg/20020312-2.c b/gcc/testsuite/gcc.dg/20020312-2.c
index 5fce50d..5c5cb09 100644
--- a/gcc/testsuite/gcc.dg/20020312-2.c
+++ b/gcc/testsuite/gcc.dg/20020312-2.c
@@ -7,6 +7,7 @@
 
 /* { dg-do run } */
 /* { dg-options "-O -fno-pic" } */
+/* { dg-additional-options "-no-pie" { target pie_enabled } } */
 /* { dg-require-effective-target nonlocal_goto } */
 
 extern void abort (void);
diff --git a/gcc/testsuite/gcc.dg/20050607-1.c b/gcc/testsuite/gcc.dg/20050607-1.c
index 83c0967..b678114 100644
--- a/gcc/testsuite/gcc.dg/20050607-1.c
+++ b/gcc/testsuite/gcc.dg/20050607-1.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-Wpadded" }
+/* { dg-options "-Wpadded -Wno-trampolines" }
 /* The struct internally constructed for the nested function should
    not result in a warning from -Wpadded. */
 extern int baz(int (*) (int));
diff --git a/gcc/testsuite/gcc.dg/charset/builtin2.c b/gcc/testsuite/gcc.dg/charset/builtin2.c
index bfe9a20..8039d35 100644
--- a/gcc/testsuite/gcc.dg/charset/builtin2.c
+++ b/gcc/testsuite/gcc.dg/charset/builtin2.c
@@ -3,7 +3,7 @@
 
 /* { dg-do compile } */
 /* { dg-require-iconv "IBM1047" } */
-/* { dg-options "-O2 -fexec-charset=IBM1047" } */
+/* { dg-options "-O2 -fexec-charset=IBM1047 -Wno-format" } */
 /* { dg-final { scan-assembler-not "printf" } } */
 /* { dg-final { scan-assembler-not "fprintf" } } */
 /* { dg-final { scan-assembler-not "sprintf" } } */
diff --git a/gcc/testsuite/gcc.dg/cpp/trad/include.c b/gcc/testsuite/gcc.dg/cpp/trad/include.c
deleted file mode 100644
index 94d25f8..0000000
--- a/gcc/testsuite/gcc.dg/cpp/trad/include.c
+++ /dev/null
@@ -1,12 +0,0 @@
-/* Copyright (c) 2002 Free Software Foundation Inc.  */
-
-/* Test that macros are not expanded in the <> quotes of #inlcude.  */
-
-/* vxWorksCommon.h uses the "#" operator to construct the name of an
-   include file, thus making the file incompatible with -traditional-cpp.
-   Newlib uses ## when including stdlib.h as of 2007-09-07.  */
-/* { dg-do preprocess { target { { ! vxworks_kernel } && { ! newlib } } } } */
-
-#define __STDC__ 1		/* Stop complaints about non-ISO compilers.  */
-#define stdlib 1
-#include <stdlib.h>		/* { dg-bogus "o such file or directory" } */
diff --git a/gcc/testsuite/gcc.dg/debug/debug-3.c b/gcc/testsuite/gcc.dg/debug/debug-3.c
index e2b7a4b..fe6d0c5 100644
--- a/gcc/testsuite/gcc.dg/debug/debug-3.c
+++ b/gcc/testsuite/gcc.dg/debug/debug-3.c
@@ -1,6 +1,7 @@
 /* This testcase failed, because scope containing baz was deleted
    (spanned 0 basic blocks) and DWARF-2 couldn't find baz origin.  */
 /* { dg-do compile } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 struct A { char *a, *b, *c, *d; };
diff --git a/gcc/testsuite/gcc.dg/debug/debug-5.c b/gcc/testsuite/gcc.dg/debug/debug-5.c
index f66b861..485aeea 100644
--- a/gcc/testsuite/gcc.dg/debug/debug-5.c
+++ b/gcc/testsuite/gcc.dg/debug/debug-5.c
@@ -1,6 +1,7 @@
 /* This testcase failed, because scope containing baz was deleted
    (spanned 0 basic blocks) and DWARF-2 couldn't find baz origin.  */
 /* { dg-do compile } */
+/* { dg-options "-Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 extern void abort (void);
diff --git a/gcc/testsuite/gcc.dg/format/opt-1.c b/gcc/testsuite/gcc.dg/format/opt-1.c
index f8f3704..ccbfc6d 100644
--- a/gcc/testsuite/gcc.dg/format/opt-1.c
+++ b/gcc/testsuite/gcc.dg/format/opt-1.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-extra-args.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-extra-args" } */
+/* { dg-options "-Wformat-extra-args -Wno-format" } */
 
 /* { dg-warning "-Wformat-extra-args ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-2.c b/gcc/testsuite/gcc.dg/format/opt-2.c
index 1ec9f01..699626d 100644
--- a/gcc/testsuite/gcc.dg/format/opt-2.c
+++ b/gcc/testsuite/gcc.dg/format/opt-2.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-nonliteral.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-nonliteral" } */
+/* { dg-options "-Wformat-nonliteral -Wno-format" } */
 
 /* { dg-warning "-Wformat-nonliteral ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-3.c b/gcc/testsuite/gcc.dg/format/opt-3.c
index 03f55e4..b278484 100644
--- a/gcc/testsuite/gcc.dg/format/opt-3.c
+++ b/gcc/testsuite/gcc.dg/format/opt-3.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-security.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-security" } */
+/* { dg-options "-Wformat-security -Wno-format" } */
 
 /* { dg-warning "-Wformat-security ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-4.c b/gcc/testsuite/gcc.dg/format/opt-4.c
index f02b6c0..2b5dd0a 100644
--- a/gcc/testsuite/gcc.dg/format/opt-4.c
+++ b/gcc/testsuite/gcc.dg/format/opt-4.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-y2k.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-y2k" } */
+/* { dg-options "-Wformat-y2k -Wno-format" } */
 
 /* { dg-warning "-Wformat-y2k ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-5.c b/gcc/testsuite/gcc.dg/format/opt-5.c
index 3315e33..47f63e8 100644
--- a/gcc/testsuite/gcc.dg/format/opt-5.c
+++ b/gcc/testsuite/gcc.dg/format/opt-5.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-zero-length.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-zero-length" } */
+/* { dg-options "-Wformat-zero-length -Wno-format" } */
 
 /* { dg-warning "-Wformat-zero-length ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/format/opt-6.c b/gcc/testsuite/gcc.dg/format/opt-6.c
index 29dedfa..761de63 100644
--- a/gcc/testsuite/gcc.dg/format/opt-6.c
+++ b/gcc/testsuite/gcc.dg/format/opt-6.c
@@ -2,6 +2,6 @@
    -Wformat.  -Wformat-contains-nul.  */
 /* Origin: Bruce Korb <bkorb@gnu.org> */
 /* { dg-do compile } */
-/* { dg-options "-Wformat-contains-nul" } */
+/* { dg-options "-Wformat-contains-nul -Wno-format" } */
 
 /* { dg-warning "-Wformat-contains-nul ignored without -Wformat" "ignored" { target *-*-* } 0 } */
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-1.c b/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
index 3260ac7..d8b05bd 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-1.c
@@ -1,6 +1,6 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O1" } */
+/* { dg-options "-fopenmp -O1 -Wno-trampolines" } */
 
 void baz (int (*) ());
 
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-2.c b/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
index bc6c7c5..b436226 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-2.c
@@ -1,5 +1,5 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O0" } */
+/* { dg-options "-fopenmp -O0 -Wno-trampolines" } */
 
 #include "pr66633-1.c"
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-3.c b/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
index eaa3b0d..3facd55 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-3.c
@@ -1,6 +1,6 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O1" } */
+/* { dg-options "-fopenmp -O1 -Wno-trampolines" } */
 
 void baz (int (*) ());
 
diff --git a/gcc/testsuite/gcc.dg/gomp/pr66633-4.c b/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
index 93cdcc2..9f92935 100644
--- a/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
+++ b/gcc/testsuite/gcc.dg/gomp/pr66633-4.c
@@ -1,5 +1,5 @@
 /* PR middle-end/66633 */
 /* { dg-do compile } */
-/* { dg-options "-fopenmp -O0" } */
+/* { dg-options "-fopenmp -O0 -Wno-trampolines" } */
 
 #include "pr66633-3.c"
diff --git a/gcc/testsuite/gcc.dg/graphite/run-id-pr67700-1.c b/gcc/testsuite/gcc.dg/graphite/run-id-pr67700-1.c
index e0db256..f1fae71 100644
--- a/gcc/testsuite/gcc.dg/graphite/run-id-pr67700-1.c
+++ b/gcc/testsuite/gcc.dg/graphite/run-id-pr67700-1.c
@@ -45,4 +45,3 @@ int main()
   assert (obj->elem1[8] == 45);
   return 0;
 }
-
diff --git a/gcc/testsuite/gcc.dg/graphite/scop-19.c b/gcc/testsuite/gcc.dg/graphite/scop-19.c
index c89717b..6028132 100644
--- a/gcc/testsuite/gcc.dg/graphite/scop-19.c
+++ b/gcc/testsuite/gcc.dg/graphite/scop-19.c
@@ -31,6 +31,6 @@ d_growable_string_append_buffer (struct d_growable_string *dgs,
   if (need > dgs->alc)
     d_growable_string_resize (dgs, need);
 }
-/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 2 "graphite" { target nonpic } } } */
-/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 1 "graphite" { target { ! nonpic } } } } */
+/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 2 "graphite" { target { nonpic || pie_enabled } } } } */
+/* { dg-final { scan-tree-dump-times "number of SCoPs: 0" 1 "graphite" { target { ! { nonpic || pie_enabled } } } } } */
 
diff --git a/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c b/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
index 4db904b..6b70694 100644
--- a/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
+++ b/gcc/testsuite/gcc.dg/ipa/ipa-sra-1.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details"  } */
+/* { dg-options "-O2 -fipa-sra -fdump-tree-eipa_sra-details -Wno-format"  } */
 
 struct bovid
 {
diff --git a/gcc/testsuite/gcc.dg/nested-func-5.c b/gcc/testsuite/gcc.dg/nested-func-5.c
index 3545f37..1f67915 100644
--- a/gcc/testsuite/gcc.dg/nested-func-5.c
+++ b/gcc/testsuite/gcc.dg/nested-func-5.c
@@ -1,5 +1,5 @@
 /* { dg-do compile } */
-/* { dg-options "-fexceptions" } */
+/* { dg-options "-fexceptions -Wno-trampolines" } */
 /* PR28516: ICE generating ARM unwind directives for nested functions.  */
 /* { dg-require-effective-target trampolines } */
 
diff --git a/gcc/testsuite/gcc.dg/packed-vla.c b/gcc/testsuite/gcc.dg/packed-vla.c
index e673b72..e4b268e 100644
--- a/gcc/testsuite/gcc.dg/packed-vla.c
+++ b/gcc/testsuite/gcc.dg/packed-vla.c
@@ -1,6 +1,6 @@
 /* PR middle-end/27945 */
 /* { dg-do run } */
-/* { dg-options "" } */
+/* { dg-options "-Wno-format" } */
 /* { dg-require-effective-target alloca } */
 
 extern int printf (const char *, ...);
diff --git a/gcc/testsuite/gcc.dg/pch/inline-4.c b/gcc/testsuite/gcc.dg/pch/inline-4.c
deleted file mode 100644
index 60e35aa..0000000
--- a/gcc/testsuite/gcc.dg/pch/inline-4.c
+++ /dev/null
@@ -1,6 +0,0 @@
-#include "inline-4.h"
-extern int printf (const char *, ...);
-int main(void) {
-  printf (getstring());
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/pch/inline-4.hs b/gcc/testsuite/gcc.dg/pch/inline-4.hs
deleted file mode 100644
index 31a5069..0000000
--- a/gcc/testsuite/gcc.dg/pch/inline-4.hs
+++ /dev/null
@@ -1,4 +0,0 @@
-static inline char *getstring(void)
-{
-  return "hello";
-}
diff --git a/gcc/testsuite/gcc.dg/pr30473.c b/gcc/testsuite/gcc.dg/pr30473.c
index f01c1cc..b0bcbc3 100644
--- a/gcc/testsuite/gcc.dg/pr30473.c
+++ b/gcc/testsuite/gcc.dg/pr30473.c
@@ -1,7 +1,7 @@
 /* PR middle-end/30473 */
 /* Make sure this doesn't ICE.  */
 /* { dg-do compile } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-format" } */
 
 extern int sprintf (char *, const char *, ...);
 
diff --git a/gcc/testsuite/gcc.dg/pr34457-1.c b/gcc/testsuite/gcc.dg/pr34457-1.c
index 3dca13d..5e69b28 100644
--- a/gcc/testsuite/gcc.dg/pr34457-1.c
+++ b/gcc/testsuite/gcc.dg/pr34457-1.c
@@ -2,7 +2,7 @@
 /* { dg-do link } */
 /* { dg-require-effective-target trampolines } */
 /* { dg-require-effective-target lto } */
-/* { dg-options "-flto -O2" } */
+/* { dg-options "-flto -O2 -Wno-trampolines" } */
 /* { dg-additional-sources "pr34457-2.c" } */
    
 
diff --git a/gcc/testsuite/gcc.dg/pr38902.c b/gcc/testsuite/gcc.dg/pr38902.c
index d406526..f6decfc 100644
--- a/gcc/testsuite/gcc.dg/pr38902.c
+++ b/gcc/testsuite/gcc.dg/pr38902.c
@@ -1,6 +1,6 @@
 /* PR target/38902 */
 /* { dg-do run } */
-/* { dg-options "-O2 -fstack-protector" } */
+/* { dg-options "-O2 -fstack-protector -Wno-format-security" } */
 /* { dg-require-effective-target fstack_protector } */
 
 #ifdef DEBUG
diff --git a/gcc/testsuite/gcc.dg/sibcall-11.c b/gcc/testsuite/gcc.dg/sibcall-11.c
index ae58770..12f6d9c 100644
--- a/gcc/testsuite/gcc.dg/sibcall-11.c
+++ b/gcc/testsuite/gcc.dg/sibcall-11.c
@@ -1,5 +1,6 @@
 // Test for sibcall optimization with empty struct.
 // { dg-options "-O2" }
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 // { dg-final { scan-assembler "jmp" { target i?86-*-* x86_64-*-* } } }
 
 struct A { };
diff --git a/gcc/testsuite/gcc.dg/torture/builtin-self.c b/gcc/testsuite/gcc.dg/torture/builtin-self.c
index 6d1719f..56188fc 100644
--- a/gcc/testsuite/gcc.dg/torture/builtin-self.c
+++ b/gcc/testsuite/gcc.dg/torture/builtin-self.c
@@ -1,4 +1,5 @@
 /* { dg-do compile { target i?86-*-* x86_64-*-* } } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 /* Check that we can use this idiom to define out-of-line copies of built-in
    functions.  This is used by libgcc/sync.c, for example.  */
 void __sync_synchronize (void)
diff --git a/gcc/testsuite/gcc.dg/torture/matrix-2.c b/gcc/testsuite/gcc.dg/torture/matrix-2.c
index 8aaf7c6..8a2cba6 100644
--- a/gcc/testsuite/gcc.dg/torture/matrix-2.c
+++ b/gcc/testsuite/gcc.dg/torture/matrix-2.c
@@ -1,5 +1,5 @@
 /* { dg-do run } */
-/* { dg-options "-fwhole-program" } */
+/* { dg-options "-fwhole-program -Wno-format" } */
 
 
 #include <stdio.h>
diff --git a/gcc/testsuite/gcc.dg/torture/nested-fn-1.c b/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
index 99e8523..be2bc1b 100644
--- a/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
+++ b/gcc/testsuite/gcc.dg/torture/nested-fn-1.c
@@ -1,7 +1,7 @@
 /* PR middle-end/15345, c/16450 */
 /* Test whether unused nested functions aren't emitted into the assembly.  */
 /* { dg-do compile } */
-/* { dg-options "-g0" } */
+/* { dg-options "-g0 -Wno-trampolines" } */
 /* { dg-require-effective-target trampolines } */
 
 int
diff --git a/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c b/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
index 95eba04..f0f3849 100644
--- a/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
+++ b/gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 extern void abort (void);
 extern void exit (int);
diff --git a/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c b/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
index d853825..9f1a754 100644
--- a/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
+++ b/gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c
@@ -1,4 +1,5 @@
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 #ifndef NO_TRAMPOLINES
 
diff --git a/gcc/testsuite/gcc.dg/torture/tls/tls-test.c b/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
index 8a23e77..43b78db 100644
--- a/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
+++ b/gcc/testsuite/gcc.dg/torture/tls/tls-test.c
@@ -1,7 +1,7 @@
 /* { dg-do run }  */
 /* { dg-require-effective-target tls  }  */
 /* { dg-require-effective-target pthread } */
-/* { dg-options "-pthread" } */
+/* { dg-options "-pthread -Wno-format" } */
 
 #include <pthread.h>
 extern int printf (char *,...);
diff --git a/gcc/testsuite/gcc.dg/trampoline-1.c b/gcc/testsuite/gcc.dg/trampoline-1.c
index 37a582c..81552d9 100644
--- a/gcc/testsuite/gcc.dg/trampoline-1.c
+++ b/gcc/testsuite/gcc.dg/trampoline-1.c
@@ -3,7 +3,7 @@
 
 /* { dg-do run } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 
 #ifndef NO_TRAMPOLINES
 
diff --git a/gcc/testsuite/gcc.dg/uninit-19.c b/gcc/testsuite/gcc.dg/uninit-19.c
index b138a2c..a54e60d 100644
--- a/gcc/testsuite/gcc.dg/uninit-19.c
+++ b/gcc/testsuite/gcc.dg/uninit-19.c
@@ -1,5 +1,6 @@
 /* { dg-do compile } */
 /* { dg-options "-O -Wuninitialized" } */
+/* { dg-additional-options "-finline-small-functions" { target avr-*-* } } */
 
 int a, l, m;
 float *b;
@@ -10,7 +11,8 @@ fn1 (int p1, float *f1, float *f2, float *f3, unsigned char *c1, float *f4,
      unsigned char *c2, float *p10)
 {
   if (p1 & 8)
-    b[3] = p10[a];  /* 13.  */
+    b[3] = p10[a];
+  /* { dg-warning "may be used uninitialized" "" { target { { nonpic || pie_enabled } || { hppa*64*-*-* *-*-darwin* } } } .-1 } */
 }
 
 void
@@ -19,8 +21,6 @@ fn2 ()
   float *n;
   if (l & 6)
     n = &c + m;
-  fn1 (l, &d, &e, &g, &i, &h, &k, n);  /* 22.  */
+  fn1 (l, &d, &e, &g, &i, &h, &k, n);
+  /* { dg-warning "may be used uninitialized" "" { target { ! { { nonpic || pie_enabled } || { hppa*64*-*-* *-*-darwin* } } } } .-1 } */
 }
-
-/* { dg-warning "may be used uninitialized" "" { target { { nonpic } || { hppa*64*-*-* } } } 13 } */
-/* { dg-warning "may be used uninitialized" "" { target { ! { { nonpic } || { hppa*64*-*-* } } } } 22 } */
diff --git a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp
index ff39973..f504fb0 100644
--- a/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp
+++ b/gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp
@@ -54,9 +54,9 @@ set-torture-options $C_TORTURE_OPTIONS {{}} $LTO_TORTURE_OPTIONS
 
 # Make sure Neon flags are provided, if necessary.  Use fp16 if we can.
 if {[check_effective_target_arm_neon_fp16_ok]} then {
-  set additional_flags [add_options_for_arm_neon_fp16 ""]
+  set additional_flags [add_options_for_arm_neon_fp16 "-Wno-format"]
 } else {
-  set additional_flags [add_options_for_arm_neon ""]
+  set additional_flags [add_options_for_arm_neon "-Wno-format"]
 }
 
 # Main loop.
diff --git a/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c b/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c
index e49aada..d66fe3a 100644
--- a/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c
+++ b/gcc/testsuite/gcc.target/aarch64/fuse_adrp_add_1.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target aarch64_small } */
-/* { dg-options "-O3 -mcpu=cortex-a57" } */
+/* { dg-options "-O3 -mcpu=cortex-a57 -fno-pie" } */
 
 enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,
                  XGRF_REGS, ALL_REGS, LIM_REG_CLASSES };
diff --git a/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c b/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c
index 27146b8..8f31895 100644
--- a/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c
+++ b/gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c
@@ -6,7 +6,8 @@
 
 #include "vect-abs.x"
 
-/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.16b" } } */
-/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.8h" } } */
+/* XFAIL due to PR tree-optimization/64946.  */
+/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.16b" { xfail *-*-* } } } */
+/* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.8h" { xfail *-*-* } } } */
 /* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.4s" } } */
 /* { dg-final { scan-assembler "abs\\tv\[0-9\]+\.2d" } } */
diff --git a/gcc/testsuite/gcc.target/arm/pr84826.c b/gcc/testsuite/gcc.target/arm/pr84826.c
index 563ce51..2fa7d5f 100644
--- a/gcc/testsuite/gcc.target/arm/pr84826.c
+++ b/gcc/testsuite/gcc.target/arm/pr84826.c
@@ -1,6 +1,6 @@
 /* { dg-do compile } */
 /* { dg-require-effective-target arm_thumb2_ok } */
-/* { dg-options "-Ofast -fstack-check" } */
+/* { dg-options "-Ofast -fstack-check -Wno-trampolines" } */
 
 void d (void *);
 
diff --git a/gcc/testsuite/gcc.target/i386/avx512-check.h b/gcc/testsuite/gcc.target/i386/avx512-check.h
new file mode 100644
index 0000000..bfe1496
--- /dev/null
+++ b/gcc/testsuite/gcc.target/i386/avx512-check.h
@@ -0,0 +1,113 @@
+#include <stdlib.h>
+#include "cpuid.h"
+#include "m512-check.h"
+#include "avx512f-os-support.h"
+
+#ifndef DO_TEST
+#define DO_TEST do_test
+#ifdef AVX512VL
+static void test_256 (void);
+static void test_128 (void);
+#else
+static void test_512 (void);
+#endif
+
+__attribute__ ((noinline))
+static void
+do_test (void)
+{
+#ifdef AVX512VL
+  test_256 ();
+  test_128 ();
+#else
+  test_512 ();
+#endif
+}
+#endif
+
+int
+main ()
+{
+  unsigned int eax, ebx, ecx, edx;
+
+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
+    goto skipped;
+
+  /* Run AVX512F test only if host has AVX512F support.  */
+  if (!(ecx & bit_OSXSAVE))
+    goto skipped;
+
+  if (__get_cpuid_max (0, NULL) < 7)
+    goto skipped;
+
+  __cpuid_count (7, 0, eax, ebx, ecx, edx);
+
+  if (!(ebx & bit_AVX512F))
+    goto skipped;
+
+#ifdef AVX512VL
+  if (!(ebx & bit_AVX512VL))
+    goto skipped;
+#endif
+
+#ifdef AVX512ER
+  if (!(ebx & bit_AVX512ER))
+    goto skipped;
+#endif
+
+#ifdef AVX512CD
+  if (!(ebx & bit_AVX512CD))
+    goto skipped;
+#endif
+
+#ifdef AVX512DQ
+  if (!(ebx & bit_AVX512DQ))
+    goto skipped;
+#endif
+
+#ifdef AVX512BW
+  if (!(ebx & bit_AVX512BW))
+    goto skipped;
+#endif
+
+#ifdef AVX512IFMA
+  if (!(ebx & bit_AVX512IFMA))
+    goto skipped;
+#endif
+
+#ifdef AVX512VBMI
+  if (!(ecx & bit_AVX512VBMI))
+    goto skipped;
+#endif
+
+#ifdef AVX5124FMAPS
+  if (!(edx & bit_AVX5124FMAPS))
+    goto skipped;
+#endif
+
+#ifdef AVX5124VNNIW
+  if (!(edx & bit_AVX5124VNNIW))
+    goto skipped;
+#endif
+
+#ifdef AVX512VPOPCNTDQ
+  if (!(ecx & bit_AVX512VPOPCNTDQ))
+    goto skipped;
+#endif
+
+  if (!avx512f_os_support ())
+    goto skipped;
+
+  DO_TEST ();
+
+#ifdef DEBUG
+  printf ("PASSED\n");
+#endif
+  return 0;
+
+skipped:
+#ifdef DEBUG
+  printf ("SKIPPED\n");
+#endif
+  return 0;
+}
diff --git a/gcc/testsuite/gcc.target/i386/avx512bw-check.h b/gcc/testsuite/gcc.target/i386/avx512bw-check.h
index 4cae309..899a006 100644
--- a/gcc/testsuite/gcc.target/i386/avx512bw-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512bw-check.h
@@ -1,47 +1,3 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512bw_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512bw_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512BW test only if host has AVX512BW support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ebx & bit_AVX512BW) == bit_AVX512BW))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512BW
+#define avx512bw_test test_512
+#include "avx512-check.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512cd-check.h b/gcc/testsuite/gcc.target/i386/avx512cd-check.h
deleted file mode 100644
index bccf8b4..0000000
--- a/gcc/testsuite/gcc.target/i386/avx512cd-check.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512cd_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512cd_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ebx & (bit_AVX512CD)) == (bit_AVX512CD)))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512dq-check.h b/gcc/testsuite/gcc.target/i386/avx512dq-check.h
index e8dcf4b..1b72883 100644
--- a/gcc/testsuite/gcc.target/i386/avx512dq-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512dq-check.h
@@ -1,47 +1,3 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512dq_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512dq_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512DQ test only if host has AVX512DQ support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ebx & bit_AVX512DQ) == bit_AVX512DQ))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512DQ
+#define avx512dq_test test_512
+#include "avx512-check.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512er-check.h b/gcc/testsuite/gcc.target/i386/avx512er-check.h
index 34440d3..eb44c2f 100644
--- a/gcc/testsuite/gcc.target/i386/avx512er-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512er-check.h
@@ -1,46 +1,3 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512er_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512er_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ebx & bit_AVX512ER) == bit_AVX512ER))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512ER
+#define avx512er_test test_512
+#include "avx512f-helper.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-check.h b/gcc/testsuite/gcc.target/i386/avx512f-check.h
index 9e01367..b3bdd9a 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512f-check.h
@@ -1,47 +1,2 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512f_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512f_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run AVX512F test only if host has AVX512F support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ebx & bit_AVX512F) == bit_AVX512F))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define avx512f_test test_512
+#include "avx512f-helper.h"
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-helper.h b/gcc/testsuite/gcc.target/i386/avx512f-helper.h
index 5923085..72982f9 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-helper.h
+++ b/gcc/testsuite/gcc.target/i386/avx512f-helper.h
@@ -8,23 +8,7 @@
 #ifndef AVX512F_HELPER_INCLUDED
 #define AVX512F_HELPER_INCLUDED
 
-#if defined (AVX512F) && !defined (AVX512VL)
-#include "avx512f-check.h"
-#elif defined (AVX512ER) && !defined (AVX512VL)
-#include "avx512er-check.h"
-#elif defined (AVX512CD) && !defined (AVX512VL)
-#include "avx512cd-check.h"
-#elif defined (AVX512DQ) && !defined (AVX512VL)
-#include "avx512dq-check.h"
-#elif defined (AVX512BW) && !defined (AVX512VL)
-#include "avx512bw-check.h"
-#elif defined (AVX512IFMA) && !defined (AVX512VL)
-#include "avx512ifma-check.h"
-#elif defined (AVX512VBMI) && !defined (AVX512VL)
-#include "avx512vbmi-check.h"
-#elif defined (AVX512VL)
-#include "avx512vl-check.h"
-#endif
+#include "avx512-check.h"
 
 /* Macros expansion.  */
 #define CONCAT(a,b,c) a ## b ## c
@@ -33,7 +17,9 @@
 /* Value to be written into destination.
    We have one value for all types so it must be small enough
    to fit into signed char.  */
+#ifndef DEFAULT_VALUE
 #define DEFAULT_VALUE 117
+#endif
 
 #define MAKE_MASK_MERGE(NAME, TYPE)				      \
 static void							      \
@@ -104,37 +90,6 @@ MAKE_MASK_ZERO(i_uq, unsigned long long)
 #ifndef AVX512VL
 #define AVX512F_LEN 512
 #define AVX512F_LEN_HALF 256
-void test_512 ();
-#endif
-
-void test_512 ();
-void test_256 ();
-void test_128 ();
-
-#if defined (AVX512F) && !defined (AVX512VL)
-void
-avx512f_test (void) { test_512 (); }
-#elif defined (AVX512CD) && !defined (AVX512VL)
-void
-avx512cd_test (void) { test_512 (); }
-#elif defined (AVX512ER) && !defined (AVX512VL)
-void
-avx512er_test (void) { test_512 (); }
-#elif defined (AVX512DQ) && !defined (AVX512VL)
-void
-avx512dq_test (void) { test_512 (); }
-#elif defined (AVX512BW) && !defined (AVX512VL)
-void
-avx512bw_test (void) { test_512 (); }
-#elif defined (AVX512IFMA) && !defined (AVX512VL)
-void
-avx512ifma_test (void) { test_512 (); }
-#elif defined (AVX512VBMI) && !defined (AVX512VL)
-void
-avx512vbmi_test (void) { test_512 (); }
-#elif defined (AVX512VL)
-void
-avx512vl_test (void) { test_256 (); test_128 (); }
 #endif
 
 #endif /* AVX512F_HELPER_INCLUDED */
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-klogic-2.c b/gcc/testsuite/gcc.target/i386/avx512f-klogic-2.c
index feff955..ec09e4c 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-klogic-2.c
+++ b/gcc/testsuite/gcc.target/i386/avx512f-klogic-2.c
@@ -51,7 +51,7 @@ avx512f_test (void)
 
   dst = _mm512_kunpackb (src1, src2);
   x = _mm512_mask_add_ps (x, dst, x, x);
-  dst_ref = ((src2 << 8) | src1) & 0xFFFF;
+  dst_ref = ((src1 << 8) | src2) & 0xFFFF;
 
   if (dst != dst_ref)
     abort ();
diff --git a/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c b/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c
index d78d86a..43dc236 100644
--- a/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c
+++ b/gcc/testsuite/gcc.target/i386/avx512f-pr71559.c
@@ -3,6 +3,7 @@
 /* { dg-options "-O2 -ftree-vectorize -mavx512f" } */
 
 #include "avx512f-check.h"
+#undef TEST
 #define PR71559_TEST avx512f_test
 
 #include "sse2-pr71559.c"
diff --git a/gcc/testsuite/gcc.target/i386/avx512ifma-check.h b/gcc/testsuite/gcc.target/i386/avx512ifma-check.h
deleted file mode 100644
index 9c17a54..0000000
--- a/gcc/testsuite/gcc.target/i386/avx512ifma-check.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512ifma_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512ifma_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ebx & bit_AVX512IFMA) == bit_AVX512IFMA))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512vbmi-check.h b/gcc/testsuite/gcc.target/i386/avx512vbmi-check.h
deleted file mode 100644
index 97aca27..0000000
--- a/gcc/testsuite/gcc.target/i386/avx512vbmi-check.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512vbmi_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512vbmi_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ()) && ((ecx & bit_AVX512VBMI) == bit_AVX512VBMI))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.target/i386/avx512vl-check.h b/gcc/testsuite/gcc.target/i386/avx512vl-check.h
index c017ee2..9d02cc8 100644
--- a/gcc/testsuite/gcc.target/i386/avx512vl-check.h
+++ b/gcc/testsuite/gcc.target/i386/avx512vl-check.h
@@ -1,49 +1,4 @@
-#include <stdlib.h>
-#include "cpuid.h"
-#include "m512-check.h"
-#include "avx512f-os-support.h"
-
-static void avx512vl_test (void);
-
-static void __attribute__ ((noinline)) do_test (void)
-{
-  avx512vl_test ();
-}
-
-int
-main ()
-{
-  unsigned int eax, ebx, ecx, edx;
-
-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
-    return 0;
-
-  /* Run avx512vl test only if host has avx512vl support.  */
-  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))
-    {
-      if (__get_cpuid_max (0, NULL) < 7)
-	return 0;
-
-      __cpuid_count (7, 0, eax, ebx, ecx, edx);
-
-      if ((avx512f_os_support ())
-	  && ((ebx & bit_AVX512F) == bit_AVX512F)
-	  && ((ebx & bit_AVX512VL) == bit_AVX512VL))
-	{
-	  do_test ();
-#ifdef DEBUG
-	  printf ("PASSED\n");
-#endif
-	  return 0;
-	}
-#ifdef DEBUG
-      printf ("SKIPPED\n");
-#endif
-    }
-#ifdef DEBUG
-  else
-    printf ("SKIPPED\n");
-#endif
-
-  return 0;
-}
+#define AVX512VL
+#define DO_TEST avx512vl_test
+static void DO_TEST (void);
+#include "avx512-check.h"
diff --git a/gcc/testsuite/gcc.target/i386/bmi-6.c b/gcc/testsuite/gcc.target/i386/bmi-6.c
index e8d4646..a4489e0 100644
--- a/gcc/testsuite/gcc.target/i386/bmi-6.c
+++ b/gcc/testsuite/gcc.target/i386/bmi-6.c
@@ -1,5 +1,4 @@
 /* { dg-do link } */
-/* { dg-xfail-if "PR 78057" { "*-*-*" } { "*" } { "" } } */
 /* { dg-options "-O2 -mbmi" } */
 
 #include <x86intrin.h>
diff --git a/gcc/testsuite/gcc.target/i386/pad-10.c b/gcc/testsuite/gcc.target/i386/pad-10.c
index 3d003a8..ac015f2 100644
--- a/gcc/testsuite/gcc.target/i386/pad-10.c
+++ b/gcc/testsuite/gcc.target/i386/pad-10.c
@@ -1,7 +1,7 @@
 /* { dg-do compile } */
 /* { dg-skip-if "" { *-*-* } { "-march=*" } { "-march=atom" } } */
 /* { dg-options "-O2 -fomit-frame-pointer -march=atom" } */
-/* { dg-final { scan-assembler-not "nop" } } */
+/* { dg-final { scan-assembler-not "nop" { target { nonpic || { ! ia32 } } } } } */
 /* { dg-final { scan-assembler-not "rep" } } */
 
 extern void bar ();
diff --git a/gcc/testsuite/gcc.target/i386/pr15184-1.c b/gcc/testsuite/gcc.target/i386/pr15184-1.c
index 8c19e47..756183d 100644
--- a/gcc/testsuite/gcc.target/i386/pr15184-1.c
+++ b/gcc/testsuite/gcc.target/i386/pr15184-1.c
@@ -1,6 +1,7 @@
 /* PR 15184 first two tests, plus two addition ones.  */
 /* { dg-do compile { target ia32 } } */
 /* { dg-options "-O2 -march=pentiumpro" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 #define regparm __attribute__((__regparm__(1)))
 
diff --git a/gcc/testsuite/gcc.target/i386/pr15184-2.c b/gcc/testsuite/gcc.target/i386/pr15184-2.c
index a6cb9eb..cb8201f 100644
--- a/gcc/testsuite/gcc.target/i386/pr15184-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr15184-2.c
@@ -1,6 +1,7 @@
 /* PR 15184 second two tests
 /* { dg-do compile { target ia32 } } */
 /* { dg-options "-O2 -march=pentiumpro" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 #define regparm __attribute__((__regparm__(1)))
 
diff --git a/gcc/testsuite/gcc.target/i386/pr22076.c b/gcc/testsuite/gcc.target/i386/pr22076.c
index e9916c9..766b732 100644
--- a/gcc/testsuite/gcc.target/i386/pr22076.c
+++ b/gcc/testsuite/gcc.target/i386/pr22076.c
@@ -1,19 +1,19 @@
 /* { dg-do compile } */
-/* { dg-options "-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx" } */
-/* { dg-options "-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem" { target *-*-vxworks* } } */
+/* { dg-options "-O2 -fomit-frame-pointer -mmmx -msse -mno-sse2" } */
+/* { dg-additional-options "-fno-common" { target *-*-darwin* } } */
+/* { dg-additional-options "-mdynamic-no-pic" { target { ia32 && *-*-darwin* } } } */
 
-#include <mmintrin.h>
+#include <xmmintrin.h>
 
-__v8qi test ()
-{
-  __v8qi mm0 = {1,2,3,4,5,6,7,8};
-  __v8qi mm1 = {11,22,33,44,55,66,77,88};
-  volatile __m64 x;
+__m64 x;
 
-  x = _mm_add_pi8 (mm0, mm1);
+void test ()
+{
+  __m64 mm0 = (__m64)(__v8qi) {1,2,3,4,5,6,7,8};
+  __m64 mm1 = (__m64)(__v8qi) {11,22,33,44,55,66,77,88};
 
-  return x;
+  x = _mm_sad_pu8 (mm0, mm1);
 }
 
-/* { dg-final { scan-assembler-times "movq" 3 } } */
+/* { dg-final { scan-assembler-times "movq" 2 } } */
 /* { dg-final { scan-assembler-not "movl" { target nonpic } } } */
diff --git a/gcc/testsuite/gcc.target/i386/pr27971.c b/gcc/testsuite/gcc.target/i386/pr27971.c
index 149bf2b..19eb354 100644
--- a/gcc/testsuite/gcc.target/i386/pr27971.c
+++ b/gcc/testsuite/gcc.target/i386/pr27971.c
@@ -1,5 +1,7 @@
 /* { dg-do compile } */
 /* { dg-options "-O2 -mno-tbm" } */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
+/* { dg-additional-options "-mdynamic-no-pic" { target { *-*-darwin* && ia32 } } } */
 
 unsigned array[4];
 
diff --git a/gcc/testsuite/gcc.target/i386/pr34256.c b/gcc/testsuite/gcc.target/i386/pr34256.c
index 992312a..6987457 100644
--- a/gcc/testsuite/gcc.target/i386/pr34256.c
+++ b/gcc/testsuite/gcc.target/i386/pr34256.c
@@ -10,5 +10,5 @@ unsigned long long  foo(__m64 m) {
   return _mm_cvtm64_si64(_mm_add_pi32(x, y));
 }
 
-/* { dg-final { scan-assembler-times "mov" 2 { target nonpic } } } */
-/* { dg-final { scan-assembler-times "mov" 4 { target { ! nonpic } } } } */
+/* { dg-final { scan-assembler-times "mov" 2 { target { nonpic || pie_enabled } } } } */
+/* { dg-final { scan-assembler-times "mov" 4 { target { { ! nonpic } && { ! pie_enabled } } } } } */
diff --git a/gcc/testsuite/gcc.target/i386/pr65105-2.c b/gcc/testsuite/gcc.target/i386/pr65105-2.c
index 8922d4e..0c3626b 100644
--- a/gcc/testsuite/gcc.target/i386/pr65105-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr65105-2.c
@@ -1,6 +1,6 @@
 /* PR target/pr65105 */
 /* { dg-do compile { target { ia32 } } } */
-/* { dg-options "-O2 -mno-stackrealign" } */
+/* { dg-options "-O2 -msse2 -mno-stackrealign" } */
 /* { dg-final { scan-assembler "por" } } */
 
 long long i1, i2, res;
diff --git a/gcc/testsuite/gcc.target/i386/pr66819-3.c b/gcc/testsuite/gcc.target/i386/pr66819-3.c
index 3bc5a34..76e3726 100644
--- a/gcc/testsuite/gcc.target/i386/pr66819-3.c
+++ b/gcc/testsuite/gcc.target/i386/pr66819-3.c
@@ -1,6 +1,6 @@
 /* { dg-do compile { target ia32 } } */
 /* { dg-options "-O2 -mregparm=3" } */
-/* { dg-final { scan-assembler-not "call" } } */
+/* { dg-final { scan-assembler-not {call[ \t]+_?bar} } } */
 
 void (*bar)(int, int);
 
diff --git a/gcc/testsuite/gcc.target/i386/pr66819-4.c b/gcc/testsuite/gcc.target/i386/pr66819-4.c
index 18b2ccf..143360d 100644
--- a/gcc/testsuite/gcc.target/i386/pr66819-4.c
+++ b/gcc/testsuite/gcc.target/i386/pr66819-4.c
@@ -1,6 +1,6 @@
 /* { dg-do compile { target ia32 } } */
 /* { dg-options "-O2 -mregparm=3" } */
-/* { dg-final { scan-assembler-not "call" } } */
+/* { dg-final { scan-assembler-not {call[ \t]+_?bar} } } */
 
 #include <stdarg.h>
 
diff --git a/gcc/testsuite/gcc.target/i386/pr67770.c b/gcc/testsuite/gcc.target/i386/pr67770.c
index 3826aff..2d2c302 100644
--- a/gcc/testsuite/gcc.target/i386/pr67770.c
+++ b/gcc/testsuite/gcc.target/i386/pr67770.c
@@ -1,7 +1,7 @@
 /* PR target/67770 */
 /* { dg-do run { target ia32 } } */
 /* { dg-require-effective-target trampolines } */
-/* { dg-options "-O2" } */
+/* { dg-options "-O2 -Wno-trampolines" } */
 
 #ifndef NO_TRAMPOLINES
 __attribute__ ((noinline)) void
diff --git a/gcc/testsuite/gcc.target/i386/pr68633.c b/gcc/testsuite/gcc.target/i386/pr68633.c
index d7f513d..f2b594c 100644
--- a/gcc/testsuite/gcc.target/i386/pr68633.c
+++ b/gcc/testsuite/gcc.target/i386/pr68633.c
@@ -19,6 +19,6 @@ TEST ()
   __asm__( "kmovw %1, %0" : "=k" (k2) : "r" (2) );
 
   k3 = _mm512_kunpackb (k1, k2);
-  if (k3 != 0x201)
+  if (k3 != 0x102)
     abort ();
 }
diff --git a/gcc/testsuite/gcc.target/i386/pr69255-1.c b/gcc/testsuite/gcc.target/i386/pr69255-1.c
index 7a666d3..f2c1010 100644
--- a/gcc/testsuite/gcc.target/i386/pr69255-1.c
+++ b/gcc/testsuite/gcc.target/i386/pr69255-1.c
@@ -2,7 +2,9 @@
 /* { dg-do compile } */
 /* { dg-options "-msse4 -mno-avx" } */
 
+#pragma GCC push_options
 #pragma GCC target "avx512vl"
+#pragma GCC pop_options
 #pragma GCC target "no-avx512vl"
 __attribute__ ((__vector_size__ (32))) long long a;
 __attribute__ ((__vector_size__ (16))) int b;
@@ -13,5 +15,5 @@ foo (const long long *p)
   a = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);	/* { dg-error "needs isa option -m32 -mavx512vl" } */
 }
 
-/* { dg-warning "AVX vector return without AVX enabled changes the ABI" "" { target *-*-* } 13 } */
-/* { dg-warning "AVX vector argument without AVX enabled changes the ABI" "" { target *-*-* } 13 } */
+/* { dg-warning "AVX vector return without AVX enabled changes the ABI" "" { target *-*-* } 15 } */
+/* { dg-warning "AVX vector argument without AVX enabled changes the ABI" "" { target *-*-* } 15 } */
diff --git a/gcc/testsuite/gcc.target/i386/pr69255-2.c b/gcc/testsuite/gcc.target/i386/pr69255-2.c
index 28eb57b..e80f387 100644
--- a/gcc/testsuite/gcc.target/i386/pr69255-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr69255-2.c
@@ -2,7 +2,9 @@
 /* { dg-do compile } */
 /* { dg-options "-msse4 -mno-avx" } */
 
+#pragma GCC push_options
 #pragma GCC target "avx512vl"
+#pragma GCC pop_options
 #pragma GCC target ""
 __attribute__ ((__vector_size__ (32))) long long a;
 __attribute__ ((__vector_size__ (16))) int b;
@@ -10,8 +12,9 @@ __attribute__ ((__vector_size__ (16))) int b;
 void
 foo (const long long *p)
 {
-  __builtin_ia32_gather3siv4di (a, p, b, 1, 1);		/* { dg-error "needs isa option -m32 -mavx512vl" } */
+  volatile __attribute__ ((__vector_size__ (32))) long long c;
+  c = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);		/* { dg-error "needs isa option -m32 -mavx512vl" } */
 }
 
-/* { dg-warning "AVX vector return without AVX enabled changes the ABI" "" { target *-*-* } 13 } */
-/* { dg-warning "AVX vector argument without AVX enabled changes the ABI" "" { target *-*-* } 13 } */
+/* { dg-warning "AVX vector return without AVX enabled changes the ABI" "" { target *-*-* } 16 } */
+/* { dg-warning "AVX vector argument without AVX enabled changes the ABI" "" { target *-*-* } 16 } */
diff --git a/gcc/testsuite/gcc.target/i386/pr69255-3.c b/gcc/testsuite/gcc.target/i386/pr69255-3.c
index 41fb4a2..713725d 100644
--- a/gcc/testsuite/gcc.target/i386/pr69255-3.c
+++ b/gcc/testsuite/gcc.target/i386/pr69255-3.c
@@ -2,7 +2,9 @@
 /* { dg-do compile } */
 /* { dg-options "-msse4 -mno-avx" } */
 
+#pragma GCC push_options
 #pragma GCC target "avx512vl"
+#pragma GCC pop_options
 #pragma GCC target ""
 __attribute__ ((__vector_size__ (32))) long long a;
 __attribute__ ((__vector_size__ (16))) int b;
@@ -13,5 +15,5 @@ foo (const long long *p, __attribute__ ((__vector_size__ (32))) long long *q)
   *q = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);	/* { dg-error "needs isa option -m32 -mavx512vl" } */
 }
 
-/* { dg-warning "AVX vector return without AVX enabled changes the ABI" "" { target *-*-* } 13 } */
-/* { dg-warning "AVX vector argument without AVX enabled changes the ABI" "" { target *-*-* } 13 } */
+/* { dg-warning "AVX vector return without AVX enabled changes the ABI" "" { target *-*-* } 15 } */
+/* { dg-warning "AVX vector argument without AVX enabled changes the ABI" "" { target *-*-* } 15 } */
diff --git a/gcc/testsuite/gcc.target/i386/pr70263-2.c b/gcc/testsuite/gcc.target/i386/pr70263-2.c
index 18ebbf0..9a6f563 100644
--- a/gcc/testsuite/gcc.target/i386/pr70263-2.c
+++ b/gcc/testsuite/gcc.target/i386/pr70263-2.c
@@ -1,5 +1,8 @@
 /* { dg-do compile } */
 /* { dg-options "-O2 -fdump-rtl-ira" } */
+/* ia32 PIC prevents tail-calling, which forces bar's arg to be pushed, which
+   drops the equivalence.  */
+/* { dg-additional-options "-fno-PIE" { target ia32 } } */
 
 /* { dg-final { scan-rtl-dump "Adding REG_EQUIV to insn \[0-9\]+ for source of insn \[0-9\]+" "ira" } } */
 
diff --git a/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90 b/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
index 79dd7ce..0d09a28 100644
--- a/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
+++ b/gcc/testsuite/gfortran.dg/elemental_dependency_4.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! { dg-additional-options "-fdump-tree-original" }
 ! { dg-require-visibility "" }
 !
diff --git a/gcc/testsuite/gfortran.dg/gomp/pr66633.f90 b/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
index 60e47b3..7ccd55b 100644
--- a/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
+++ b/gcc/testsuite/gfortran.dg/gomp/pr66633.f90
@@ -2,7 +2,7 @@
 ! Testcase by Andrew Benson <abensonca@gmail.com>
 
 ! { dg-do compile }
-! { dg-options "-O0 -fopenmp" }
+! { dg-options "-O0 -fopenmp -Wno-trampolines" }
 
 module spls
 contains
diff --git a/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90 b/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90
index 8fb4f6f..2e0304b 100644
--- a/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90
+++ b/gcc/testsuite/gfortran.dg/ieee/ieee_6.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-skip-if "PR libfortran/78314" { aarch64*-*-gnu* arm*-*-gnueabi arm*-*-gnueabihf } }
 !
 ! This test will fail on older x86_64 glibc (< 2.20), due to this bug:
 ! https://sourceware.org/bugzilla/show_bug.cgi?id=16198
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_2.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
index 2d2ec68..8ba2297 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_2.f08
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-std=f2008 -fall-intrinsics" }
+! { dg-options "-std=f2008 -fall-intrinsics -Wno-trampolines" }
 
 ! PR fortran/34162
 ! Internal procedures as actual arguments (like restricted closures).
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_3.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
index ff8dd82..e76fb6a 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_3.f08
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-std=f2008 -fall-intrinsics" }
+! { dg-options "-std=f2008 -fall-intrinsics -Wno-trampolines" }
 
 ! PR fortran/34162
 ! Internal procedures as actual arguments (like restricted closures).
diff --git a/gcc/testsuite/gfortran.dg/internal_dummy_4.f08 b/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
index 8ade99e..111cd0d 100644
--- a/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
+++ b/gcc/testsuite/gfortran.dg/internal_dummy_4.f08
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! PR fortran/34133
 ! PR fortran/34162
 !
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_1.f90 b/gcc/testsuite/gfortran.dg/pointer_check_1.f90
index 6d43bf3..4f4e56c 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_1.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_1.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 53 .*Allocatable actual argument 'alloc2' is not allocated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_2.f90 b/gcc/testsuite/gfortran.dg/pointer_check_2.f90
index 2359b4a..daffb3f 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_2.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_2.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 60.*Pointer actual argument 'ptr1' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_3.f90 b/gcc/testsuite/gfortran.dg/pointer_check_3.f90
index 23596e4..9e7ebf1 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_3.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_3.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 61.*Pointer actual argument 'ptr2' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_4.f90 b/gcc/testsuite/gfortran.dg/pointer_check_4.f90
index 97eb6fa..6e0e9e0 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_4.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_4.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 !
 ! { dg-output ".*At line 66.*Proc-pointer actual argument 'pptr' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/pointer_check_5.f90 b/gcc/testsuite/gfortran.dg/pointer_check_5.f90
index 440d9a8..0d56abe 100644
--- a/gcc/testsuite/gfortran.dg/pointer_check_5.f90
+++ b/gcc/testsuite/gfortran.dg/pointer_check_5.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fcheck=pointer" }
+! { dg-options "-fcheck=pointer -Wno-trampolines" }
 ! { dg-shouldfail "Unassociated/unallocated actual argument" }
 ! 
 ! { dg-output ".*At line 46 .*Pointer actual argument 'getptr' is not associated" }
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_18.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
index 79cd68a..950abc3 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_18.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_19.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
index a78a8d4..84bde2c 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_20.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
index 5aead5b..6027e0d 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_20.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40450: [F03] procedure pointer as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_21.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
index 875173f..38ae608 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_21.f90
@@ -1,33 +1,34 @@
-! { dg-do run }
-! Tests the fix for PR40591 in which the interface 'sub2'
-! for 'pptr2' was not resolved.
-!
-! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>
-!
-program main
-  call test
-contains
+! { dg-do run }
+! { dg-options "-Wno-trampolines" }
+! Tests the fix for PR40591 in which the interface 'sub2'
+! for 'pptr2' was not resolved.
+!
+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>
+!
+program main
+  call test
+contains
   subroutine sub1(arg)
     integer arg
-    arg = arg + 1
-  end subroutine sub1
-  subroutine test()
-    procedure(sub1), pointer :: pptr1
+    arg = arg + 1
+  end subroutine sub1
+  subroutine test()
+    procedure(sub1), pointer :: pptr1
     procedure(sub2), pointer :: pptr2
-    integer i
-    i = 0
+    integer i
+    i = 0
     pptr1 => sub1
-    call pptr1 (i)
+    call pptr1 (i)
     pptr1 => sub2
-    call pptr1 (i)
+    call pptr1 (i)
     pptr2 => sub1
-    call pptr2 (i)
+    call pptr2 (i)
     pptr2 => sub2
     call pptr2 (i)
-    if (i .ne. 22) call abort
-  end subroutine test
+    if (i .ne. 22) call abort
+  end subroutine test
   subroutine sub2(arg)
     integer arg
-    arg = arg + 10
-  end subroutine sub2
-end program main
+    arg = arg + 10
+  end subroutine sub2
+end program main
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_23.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
index ee94712..cf2a16e 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_23.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41106: [F03] Procedure Pointers with CHARACTER results
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_25.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
index cfa0d44..319cb7d 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_25.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_47.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
index 43084f6..485fb05 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_47.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! Tests the fix for PR68196
 !
 ! Contributed by Damian Rouson  <damian@sourceryinstitute.org>
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_48.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
index deed635..215c63d 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_48.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! Checks the fix for PR68196, comment #8
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_5.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
index 61cf8a3..6b6abc0 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_5.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! NULL() initialization for PROCEDURE POINTERS
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_7.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
index 8b1ea0a..5d04a23 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_7.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 ! { dg-additional-sources proc_ptr_7.c }
 !
 ! PR fortran/32580
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
index cbb69f1..09f2d06 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_1.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
index 7e487fb..a389367 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_11.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40427: Procedure Pointer Components with OPTIONAL arguments
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
index afc8f55..83e6809 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40882: [F03] infinite recursion in gfc_get_derived_type with PPC returning derived type.
 ! At the same time, check that a formal argument does not cause infinite recursion (PR 40870).
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
index 811223e..f4ca9e6 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_14.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41022: [F03] procedure pointer components as actual arguments
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
index 4b849b6..1fdda5f 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_18.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
index 8027c82..4a9dae5 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 41139: [4.5 Regression] a procedure pointer call as actual argument
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
index 33e32aa..d0c3f74 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_2.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
index 94c59cd..aa51efc 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_29.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 47240: [F03] segfault with procedure pointer component
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
index 031f744..77efb6a 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_34.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 51082: [F03] Wrong result for a pointer to a proc-pointer component
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
index 216cb4e..26a035e 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_5.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR39630: Fortran 2003: Procedure pointer components.
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
index ed06c2b..68e1c3b 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_8.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40164: Fortran 2003: "Arrays of procedure pointers" (using PPCs)
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
index 951db48..caa2ff8 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 40176:  Fortran 2003: Procedure pointers with array return value
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
index add025c..41df4f7 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_comp_pass_3.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 39630: [F03] Procedure Pointer Components with PASS
 !
diff --git a/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90 b/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
index b77e40b..8afa903 100644
--- a/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
+++ b/gcc/testsuite/gfortran.dg/proc_ptr_result_7.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 54285: [F03] Calling a PPC with proc-ptr result
 !
diff --git a/gcc/testsuite/gfortran.dg/structure_constructor_11.f90 b/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
index 6ee6a16..8551d58 100644
--- a/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
+++ b/gcc/testsuite/gfortran.dg/structure_constructor_11.f90
@@ -1,5 +1,5 @@
 ! { dg-do run }
-! { dg-options "-fdump-tree-original" }
+! { dg-options "-fdump-tree-original -Wno-trampolines" }
 !
 ! PR fortran/54603
 !
diff --git a/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90 b/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
index 51359d1..9894333 100644
--- a/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
+++ b/gcc/testsuite/gfortran.dg/unlimited_polymorphic_19.f90
@@ -1,4 +1,5 @@
 ! { dg-do run }
+! { dg-options "-Wno-trampolines" }
 !
 ! PR 64209: [OOP] runtime segfault with CLASS(*), INTENT(OUT) dummy argument
 !
diff --git a/gcc/testsuite/objc.dg/torture/strings/const-str-3.m b/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
index 0eb2d6a..7853525 100644
--- a/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
+++ b/gcc/testsuite/objc.dg/torture/strings/const-str-3.m
@@ -2,7 +2,7 @@
 /* Developed by Markus Hitter <mah@jump-ing.de>.  */
 /* { dg-do run } */
 /* { dg-xfail-run-if "Needs OBJC2 ABI" { *-*-darwin* && { lp64 && { ! objc2 } } } { "-fnext-runtime" } { "" } } */
-/* { dg-options "-fconstant-string-class=Foo" } */
+/* { dg-options "-fconstant-string-class=Foo -Wno-format-security" } */
 /* { dg-options "-mno-constant-cfstrings -fconstant-string-class=Foo" { target *-*-darwin* } } */
 
 #include "../../../objc-obj-c++-shared/objc-test-suite-types.h"
diff --git a/libgomp/testsuite/libgomp.c/pr52547.c b/libgomp/testsuite/libgomp.c/pr52547.c
index f746e2e..0416cc2 100644
--- a/libgomp/testsuite/libgomp.c/pr52547.c
+++ b/libgomp/testsuite/libgomp.c/pr52547.c
@@ -1,5 +1,6 @@
 /* PR middle-end/52547 */
 /* { dg-do run } */
+/* { dg-options "-Wno-trampolines" } */
 
 extern void abort (void);
 
