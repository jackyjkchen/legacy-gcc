diff --git a/gcc/cp/typeck.c b/gcc/cp/typeck.c
index 52ced3094..c0240ffe9 100644
--- a/gcc/cp/typeck.c
+++ b/gcc/cp/typeck.c
@@ -1389,6 +1389,17 @@ structural_comptypes (tree t1, tree t2, int strict)
       return false;
     }
 
+  /* Don't treat an alias template specialization with dependent
+     arguments as equivalent to its underlying type when used as a
+     template argument; we need them to be distinct so that we
+     substitute into the specialization arguments at instantiation
+     time.  And aliases can't be equivalent without being ==, so
+     we don't need to look any deeper.  */
+  if (comparing_specializations
+      && (dependent_alias_template_spec_p (t1)
+	  || dependent_alias_template_spec_p (t2)))
+    return false;
+
   /* If we get here, we know that from a target independent POV the
      types are the same.  Make sure the target attributes are also
      the same.  */
@@ -1401,6 +1412,10 @@ structural_comptypes (tree t1, tree t2, int strict)
 bool
 comptypes (tree t1, tree t2, int strict)
 {
+  if (strict == COMPARE_STRICT && comparing_specializations
+      && (t1 != TYPE_CANONICAL (t1) || t2 != TYPE_CANONICAL (t2)))
+    /* If comparing_specializations, treat dependent aliases as distinct.  */
+    strict = COMPARE_STRUCTURAL;
   if (strict == COMPARE_STRICT)
     {
       if (t1 == t2)
diff --git a/gcc/testsuite/g++.dg/cpp0x/alias-decl-66.C b/gcc/testsuite/g++.dg/cpp0x/alias-decl-66.C
new file mode 100644
index 000000000..acdea77a3
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/alias-decl-66.C
@@ -0,0 +1,21 @@
+// PR c++/87366
+// { dg-do compile { target c++11 } }
+
+struct A {};
+struct B {};
+
+template <typename T> struct wrapper {};
+
+template <typename> struct enable_if_A { };
+template<> struct enable_if_A<A> { using type = void; };
+
+template <typename T, typename = typename enable_if_A<T>::type> using ok_t = T;
+
+template <typename T> void not_even_called(wrapper<const ok_t<T>&> a);
+
+template <typename T> int called(wrapper<const T&> a);
+
+void test(wrapper<const B&>& val)
+{
+    called(val);
+}
