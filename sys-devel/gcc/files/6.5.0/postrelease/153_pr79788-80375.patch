diff --git a/gcc/c-family/c-common.c b/gcc/c-family/c-common.c
index e1aee983b..d095f4449 100644
--- a/gcc/c-family/c-common.c
+++ b/gcc/c-family/c-common.c
@@ -3379,10 +3379,6 @@ c_common_type_for_mode (machine_mode mode, int unsignedp)
       return (unsignedp ? int_n_trees[i].unsigned_type
 	      : int_n_trees[i].signed_type);
 
-  if (mode == TYPE_MODE (widest_integer_literal_type_node))
-    return unsignedp ? widest_unsigned_literal_type_node
-		     : widest_integer_literal_type_node;
-
   if (mode == QImode)
     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;
 
@@ -3602,8 +3598,6 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)
       return (unsignedp ? int_n_trees[i].unsigned_type
 	      : int_n_trees[i].signed_type);
 
-  if (type1 == widest_integer_literal_type_node || type1 == widest_unsigned_literal_type_node)
-    return unsignedp ? widest_unsigned_literal_type_node : widest_integer_literal_type_node;
 #if HOST_BITS_PER_WIDE_INT >= 64
   if (type1 == intTI_type_node || type1 == unsigned_intTI_type_node)
     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;
@@ -3724,10 +3718,6 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)
       return (unsignedp ? int_n_trees[i].unsigned_type
 	      : int_n_trees[i].signed_type);
 
-  if (TYPE_OK (widest_integer_literal_type_node))
-    return (unsignedp ? widest_unsigned_literal_type_node
-	    : widest_integer_literal_type_node);
-
 #if HOST_BITS_PER_WIDE_INT >= 64
   if (TYPE_OK (intTI_type_node))
     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;
@@ -5334,17 +5324,16 @@ c_common_nodes_and_builtins (void)
 #endif
 
   /* Create the widest literal types.  */
-  widest_integer_literal_type_node
-    = make_signed_type (HOST_BITS_PER_WIDE_INT * 2);
-  lang_hooks.decls.pushdecl (build_decl (UNKNOWN_LOCATION,
-					 TYPE_DECL, NULL_TREE,
-					 widest_integer_literal_type_node));
-
-  widest_unsigned_literal_type_node
-    = make_unsigned_type (HOST_BITS_PER_WIDE_INT * 2);
-  lang_hooks.decls.pushdecl (build_decl (UNKNOWN_LOCATION,
-					 TYPE_DECL, NULL_TREE,
-					 widest_unsigned_literal_type_node));
+  if (targetm.scalar_mode_supported_p (TImode))
+    {
+      widest_integer_literal_type_node = intTI_type_node;
+      widest_unsigned_literal_type_node = unsigned_intTI_type_node;
+    }
+  else
+    {
+      widest_integer_literal_type_node = intDI_type_node;
+      widest_unsigned_literal_type_node = unsigned_intDI_type_node;
+    }
 
   signed_size_type_node = c_common_signed_type (size_type_node);
 
diff --git a/gcc/testsuite/gcc.dg/pr79788-1.c b/gcc/testsuite/gcc.dg/pr79788-1.c
new file mode 100644
index 000000000..5ad546cd2
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr79788-1.c
@@ -0,0 +1,11 @@
+/* PR middle-end/79788 */
+/* { dg-do compile } */
+/* { dg-options "-O2" } */
+
+long long
+foo (long long x, long long y)
+{
+  if (y > 1234567891234567891234567891234567812 / x)	/* { dg-warning "integer constant is too large for its type" } */
+    return x;
+  return 0;
+}
diff --git a/gcc/testsuite/gcc.dg/pr79788-2.c b/gcc/testsuite/gcc.dg/pr79788-2.c
new file mode 100644
index 000000000..c9447b1f4
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr79788-2.c
@@ -0,0 +1,11 @@
+/* PR middle-end/79788 */
+/* { dg-do compile } */
+/* { dg-options "-ftrapv" } */
+
+void bar (void);
+void
+foo (long long int p, long long int q)
+{
+  if (p >= 1234567891234567891234567891234567812 + q)	/* { dg-warning "integer constant is too large for its type" } */
+    bar ();
+}
