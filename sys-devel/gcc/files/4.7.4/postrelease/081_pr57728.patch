diff --git a/gcc/cp/class.c b/gcc/cp/class.c
index ce7798a8f..01400eed8 100644
--- a/gcc/cp/class.c
+++ b/gcc/cp/class.c
@@ -4523,8 +4523,7 @@ in_class_defaulted_default_constructor (tree t)
 }
 
 /* Returns true iff FN is a user-provided function, i.e. user-declared
-   and not defaulted at its first declaration; or explicit, private,
-   protected, or non-const.  */
+   and not defaulted at its first declaration.  */
 
 bool
 user_provided_p (tree fn)
diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 71209dd7d..25dcee24f 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -17883,7 +17883,8 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)
     if (! static_p)
       for (tmp = TYPE_METHODS (t); tmp; tmp = DECL_CHAIN (tmp))
 	if (TREE_CODE (tmp) == FUNCTION_DECL
-	    && DECL_TEMPLATE_INSTANTIATION (tmp))
+	    && DECL_TEMPLATE_INSTANTIATION (tmp)
+	    && (!extern_p || user_provided_p (tmp)))
 	  instantiate_class_member (tmp, extern_p);
 
     for (tmp = TYPE_FIELDS (t); tmp; tmp = DECL_CHAIN (tmp))
diff --git a/gcc/testsuite/g++.dg/cpp0x/explicit12.C b/gcc/testsuite/g++.dg/cpp0x/explicit12.C
new file mode 100644
index 000000000..5c14c019d
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/explicit12.C
@@ -0,0 +1,17 @@
+// PR c++/57728
+// { dg-do link { target c++11 } }
+
+template<typename T>
+struct A
+{
+  T x;
+  A() = default;
+  A(const A &other) = delete;
+};
+
+extern template class A<int>;
+
+int main()
+{
+  A<int> a;
+}
