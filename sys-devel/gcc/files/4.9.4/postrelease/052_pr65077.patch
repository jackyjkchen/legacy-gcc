diff --git a/gcc/testsuite/gcc.dg/torture/pr65077.c b/gcc/testsuite/gcc.dg/torture/pr65077.c
new file mode 100644
index 000000000..f57356c60
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr65077.c
@@ -0,0 +1,70 @@
+/* { dg-do run } */
+
+extern void abort (void);
+extern void *memcpy(void *, const void *, __SIZE_TYPE__);
+
+typedef struct {
+    void *v1;
+    void *v2;
+    void *v3;
+    union {
+	void *f1;
+	void *f2;
+    } u;
+} S;
+
+
+S *getS();
+void verify_p(void *p);
+double *getP(void *p);
+
+void memcpy_bug()
+{
+  S *s;
+  double *p = getP(0);
+
+  if (p) {
+      int intSptr[sizeof(S*)/sizeof(int)];
+      unsigned i = 0;
+      for (i = 0; i < sizeof(intSptr)/sizeof(*intSptr); ++i) {
+	  intSptr[i] = (int) p[i];
+      }
+      memcpy(&s, intSptr, sizeof(intSptr));
+      (s)->u.f1 = p;
+      verify_p((s)->u.f1);      
+  } else {
+      s = getS();
+  }
+  verify_p(s->u.f1);
+}
+
+double P[4];
+
+double *getP(void *p) {
+    union u {
+	void *p;
+	int i[2];
+    } u;
+    u.p = P;
+    P[0] = u.i[0];
+    P[1] = u.i[1];
+    return P;
+}
+
+S *getS()
+{
+  return 0;
+}
+
+void verify_p(void *p)
+{
+  if (p != P)
+    abort ();
+}
+
+int main(int argc, char *argv[])
+{
+    memcpy_bug();
+    return 0;
+}
+
diff --git a/gcc/tree-ssa-structalias.c b/gcc/tree-ssa-structalias.c
index abc99ba37..8f487120d 100644
--- a/gcc/tree-ssa-structalias.c
+++ b/gcc/tree-ssa-structalias.c
@@ -3460,6 +3460,9 @@ get_constraint_for_1 (tree t, vec<ce_s> *results, bool address_p,
 	  case ARRAY_REF:
 	  case ARRAY_RANGE_REF:
 	  case COMPONENT_REF:
+	  case IMAGPART_EXPR:
+	  case REALPART_EXPR:
+	  case BIT_FIELD_REF:
 	    get_constraint_for_component_ref (t, results, address_p, lhs_p);
 	    return;
 	  case VIEW_CONVERT_EXPR:
@@ -4688,11 +4691,7 @@ find_func_aliases (gimple origt)
 
 	  get_constraint_for (lhsop, &lhsc);
 
-	  if (FLOAT_TYPE_P (TREE_TYPE (lhsop)))
-	    /* If the operation produces a floating point result then
-	       assume the value is not produced to transfer a pointer.  */
-	    ;
-	  else if (code == POINTER_PLUS_EXPR)
+	  if (code == POINTER_PLUS_EXPR)
 	    get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),
 					   gimple_assign_rhs2 (t), &rhsc);
 	  else if (code == BIT_AND_EXPR
