diff --git a/gcc/cp/lambda.c b/gcc/cp/lambda.c
index a2c87ef46..e6f6014b4 100644
--- a/gcc/cp/lambda.c
+++ b/gcc/cp/lambda.c
@@ -171,7 +171,7 @@ lambda_return_type (tree expr)
       || BRACE_ENCLOSED_INITIALIZER_P (expr))
     {
       cxx_incomplete_type_error (expr, TREE_TYPE (expr));
-      return void_type_node;
+      return error_mark_node;
     }
   gcc_checking_assert (!type_dependent_expression_p (expr));
   return cv_unqualified (type_decays_to (unlowered_expr_type (expr)));
diff --git a/gcc/testsuite/g++.dg/cpp0x/lambda/lambda-58566.C b/gcc/testsuite/g++.dg/cpp0x/lambda/lambda-58566.C
new file mode 100644
index 000000000..3101d0a89
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/lambda/lambda-58566.C
@@ -0,0 +1,10 @@
+// PR c++/58566
+// { dg-do compile { target c++11 } }
+
+struct A
+{
+  int foo()
+  {
+    [this]{ return foo; }; // { dg-error "invalid use of member function|cannot convert" }
+  }
+};
