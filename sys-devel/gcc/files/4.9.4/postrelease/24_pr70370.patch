diff --git a/gcc/gimplify.c b/gcc/gimplify.c
index eaec44a84..d6d9c2a58 100644
--- a/gcc/gimplify.c
+++ b/gcc/gimplify.c
@@ -4933,6 +4933,32 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)
 	  ret = tret;
 	}
 
+      /* If the constraint does not allow memory make sure we gimplify
+         it to a register if it is not already but its base is.  This
+	 happens for complex and vector components.  */
+      if (!allows_mem)
+	{
+	  tree op = TREE_VALUE (link);
+	  if (! is_gimple_val (op)
+	      && is_gimple_reg_type (TREE_TYPE (op))
+	      && is_gimple_reg (get_base_address (op)))
+	    {
+	      tree tem = create_tmp_reg (TREE_TYPE (op), NULL);
+	      tree ass;
+	      if (is_inout)
+		{
+		  ass = build2 (MODIFY_EXPR, TREE_TYPE (tem),
+				tem, unshare_expr (op));
+		  gimplify_and_add (ass, pre_p);
+		}
+	      ass = build2 (MODIFY_EXPR, TREE_TYPE (tem), op, tem);
+	      gimplify_and_add (ass, post_p);
+
+	      TREE_VALUE (link) = tem;
+	      tret = GS_OK;
+	    }
+	}
+
       vec_safe_push (outputs, link);
       TREE_CHAIN (link) = NULL_TREE;
 
diff --git a/gcc/testsuite/gcc.dg/torture/pr70370.c b/gcc/testsuite/gcc.dg/torture/pr70370.c
new file mode 100644
index 000000000..d077bee3f
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr70370.c
@@ -0,0 +1,45 @@
+/* { dg-do compile } */
+
+_Complex float
+test1 (_Complex float f)
+{
+  __asm__ ("" : "+r" (__real f));
+  return f;
+}
+
+_Complex float
+test2 (_Complex float f)
+{
+  __asm__ ("" : "=r" (__real f));
+  return f;
+}
+
+struct X { int i; };
+
+struct X 
+test3 (struct X x)
+{
+  __asm__ ("" : "=r" (x.i));
+  return x;
+}
+
+struct X
+test4 (struct X x)
+{
+  __asm__ ("" : "+r" (x.i));
+  return x;
+}
+
+struct X 
+test5 (struct X x)
+{
+  __asm__ ("" : "=r" (x));
+  return x;
+}
+
+struct X
+test6 (struct X x)
+{
+  __asm__ ("" : "+r" (x));
+  return x;
+}
