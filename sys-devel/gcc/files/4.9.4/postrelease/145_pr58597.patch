diff --git a/gcc/cp/lambda.c b/gcc/cp/lambda.c
index 7391dd9b1..a2c87ef46 100644
--- a/gcc/cp/lambda.c
+++ b/gcc/cp/lambda.c
@@ -820,7 +820,7 @@ prepare_op_call (tree fn, int nargs)
 void
 maybe_add_lambda_conv_op (tree type)
 {
-  bool nested = (current_function_decl != NULL_TREE);
+  bool nested = (cfun != NULL);
   bool nested_def = decl_function_context (TYPE_MAIN_DECL (type));
   tree callop = lambda_function (type);
 
diff --git a/gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg6.C b/gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg6.C
new file mode 100644
index 000000000..fe8767ac6
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/lambda/lambda-defarg6.C
@@ -0,0 +1,9 @@
+// PR c++/58597
+// { dg-do compile { target c++11 } }
+
+template<typename> struct A
+{
+  template<typename T> A(T, int = []{ return 0; }()) {}
+};
+
+A<int> a = 0;
