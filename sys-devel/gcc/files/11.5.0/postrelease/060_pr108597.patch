diff --git a/gcc/c-family/c-common.h b/gcc/c-family/c-common.h
index f30b6c6ac..9f1246845 100644
--- a/gcc/c-family/c-common.h
+++ b/gcc/c-family/c-common.h
@@ -1044,6 +1044,7 @@ extern tree finish_label_address_expr (tree, location_t);
 extern tree lookup_label (tree);
 extern tree lookup_name (tree);
 extern bool lvalue_p (const_tree);
+extern bool instantiation_dependent_expression_p (tree);
 
 extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);
 extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);
diff --git a/gcc/c-family/c-warn.c b/gcc/c-family/c-warn.c
index 3b85dd1af..1663e001d 100644
--- a/gcc/c-family/c-warn.c
+++ b/gcc/c-family/c-warn.c
@@ -2542,7 +2542,7 @@ warn_duplicated_cond_add_or_warn (location_t loc, tree cond, vec<tree> **chain)
   if (*chain == NULL)
     return;
 
-  if (TREE_SIDE_EFFECTS (cond))
+  if (TREE_SIDE_EFFECTS (cond) || instantiation_dependent_expression_p (cond))
     {
       /* Uh-oh!  This condition has a side-effect, thus invalidates
 	 the whole chain.  */
diff --git a/gcc/c/c-objc-common.c b/gcc/c/c-objc-common.c
index b945de15a..689c6bf18 100644
--- a/gcc/c/c-objc-common.c
+++ b/gcc/c/c-objc-common.c
@@ -409,3 +409,11 @@ c_get_alias_set (tree t)
 
   return c_common_get_alias_set (t);
 }
+
+/* In C, no expression is dependent.  */
+
+bool
+instantiation_dependent_expression_p (tree)
+{
+  return false;
+}
diff --git a/gcc/cp/cp-tree.h b/gcc/cp/cp-tree.h
index 5877c994c..36116e80c 100644
--- a/gcc/cp/cp-tree.h
+++ b/gcc/cp/cp-tree.h
@@ -7226,7 +7226,6 @@ extern bool any_type_dependent_arguments_p      (const vec<tree, va_gc> *);
 extern bool any_type_dependent_elements_p       (const_tree);
 extern bool type_dependent_expression_p_push	(tree);
 extern bool value_dependent_expression_p	(tree);
-extern bool instantiation_dependent_expression_p (tree);
 extern bool instantiation_dependent_uneval_expression_p (tree);
 extern bool any_value_dependent_elements_p      (const_tree);
 extern bool dependent_omp_for_p			(tree, tree, tree, tree);
diff --git a/gcc/testsuite/g++.dg/warn/Wduplicated-cond3.C b/gcc/testsuite/g++.dg/warn/Wduplicated-cond3.C
new file mode 100644
index 000000000..3da054e54
--- /dev/null
+++ b/gcc/testsuite/g++.dg/warn/Wduplicated-cond3.C
@@ -0,0 +1,38 @@
+// PR c++/107593
+// { dg-do compile }
+// { dg-options "-Wduplicated-cond" }
+
+template <typename T>
+void
+foo ()
+{
+  if (T() && T() && int())
+    ;
+  else if (T() && T() && int())
+    ;
+}
+
+template <typename T>
+void bar(T a)
+{
+  if (a)
+    ;
+  else if (a)
+    ;
+}
+
+template <typename>
+void baz(int a)
+{
+  if (a)
+    ;
+  else if (a) // { dg-warning "duplicated" }
+    ;
+}
+void
+f ()
+{
+  foo<int>();
+  bar(1);
+  baz<int>(1);
+}
diff --git a/gcc/testsuite/g++.dg/warn/Wduplicated-cond4.C b/gcc/testsuite/g++.dg/warn/Wduplicated-cond4.C
new file mode 100644
index 000000000..41bb9f09b
--- /dev/null
+++ b/gcc/testsuite/g++.dg/warn/Wduplicated-cond4.C
@@ -0,0 +1,17 @@
+// PR c++/107593
+// { dg-do compile }
+// { dg-options "-Wduplicated-cond" }
+
+int n;
+
+template<class T> bool g() { n = 42; return false; }
+
+template<class T>
+void f() {
+  if (n)
+    ;
+  else if (g<T>())
+    ;
+  else if (n)
+    ;
+}
diff --git a/gcc/testsuite/g++.dg/warn/Wduplicated-cond5.C b/gcc/testsuite/g++.dg/warn/Wduplicated-cond5.C
new file mode 100644
index 000000000..23a0bf212
--- /dev/null
+++ b/gcc/testsuite/g++.dg/warn/Wduplicated-cond5.C
@@ -0,0 +1,16 @@
+// PR c++/108597
+// { dg-do compile }
+// { dg-options "-Wduplicated-cond" }
+
+template <typename T>
+struct MyStruct {
+
+    void check(int &x) {
+        if (&x == &_a) {
+        } else if (&x == &_b) {
+        }
+    }
+
+    int _a;
+    int _b;
+};
