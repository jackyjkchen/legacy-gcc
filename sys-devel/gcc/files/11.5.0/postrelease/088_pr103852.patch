diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index e1c060bb2..fadb8158c 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -6685,6 +6685,18 @@ get_underlying_template (tree tmpl)
       if (!comp_template_args (TI_ARGS (tinfo), alias_args))
 	break;
 
+      /* Are any default template arguments equivalent?  */
+      tree aparms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (tmpl));
+      tree uparms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (underlying));
+      const int nparms = TREE_VEC_LENGTH (aparms);
+      for (int i = 0; i < nparms; ++i)
+	{
+	  tree adefarg = TREE_PURPOSE (TREE_VEC_ELT (aparms, i));
+	  tree udefarg = TREE_PURPOSE (TREE_VEC_ELT (uparms, i));
+	  if (!template_args_equal (adefarg, udefarg))
+	    goto top_break;
+	}
+
       /* If TMPL adds or changes any constraints, it isn't equivalent.  I think
 	 it's appropriate to treat a less-constrained alias as equivalent.  */
       if (!at_least_as_constrained (underlying, tmpl))
@@ -6693,6 +6705,7 @@ get_underlying_template (tree tmpl)
       /* Alias is equivalent.  Strip it and repeat.  */
       tmpl = underlying;
     }
+  top_break:;
 
   return tmpl;
 }
@@ -29663,8 +29676,6 @@ do_class_deduction (tree ptype, tree tmpl, tree init,
       && CLASS_PLACEHOLDER_TEMPLATE (TREE_TYPE (init)) == tmpl)
     return cp_build_qualified_type (TREE_TYPE (init), cp_type_quals (ptype));
 
-  /* Look through alias templates that just rename another template.  */
-  tmpl = get_underlying_template (tmpl);
   if (!ctad_template_p (tmpl))
     {
       if (complain & tf_error)
@@ -29674,15 +29685,33 @@ do_class_deduction (tree ptype, tree tmpl, tree init,
   else if (cxx_dialect < cxx20 && DECL_ALIAS_TEMPLATE_P (tmpl))
     {
       if (complain & tf_error)
-	error ("alias template deduction only available "
-	       "with %<-std=c++20%> or %<-std=gnu++20%>");
-      return error_mark_node;
+	{
+	  /* Be permissive with equivalent alias templates.  */
+	  tree u = get_underlying_template (tmpl);
+	  diagnostic_t dk = (u == tmpl) ? DK_ERROR : DK_PEDWARN;
+	  bool complained
+	    = emit_diagnostic (dk, input_location, 0,
+			       "alias template deduction only available "
+			       "with %<-std=c++20%> or %<-std=gnu++20%>");
+	  if (u == tmpl)
+	    return error_mark_node;
+	  else if (complained)
+	    {
+	      inform (input_location, "use %qD directly instead", u);
+	      tmpl = u;
+	    }
+	}
+      else
+	return error_mark_node;
     }
 
   /* Wait until the initializer is non-dependent.  */
   if (type_dependent_expression_p (init))
     return ptype;
 
+  /* Don't bother with the alias rules for an equivalent template.  */
+  tmpl = get_underlying_template (tmpl);
+
   tree type = TREE_TYPE (tmpl);
 
   bool try_list_ctor = false;
diff --git a/gcc/testsuite/g++.dg/cpp0x/alias-decl-dr1286a.C b/gcc/testsuite/g++.dg/cpp0x/alias-decl-dr1286a.C
index 1780c9a47..fbd63d891 100644
--- a/gcc/testsuite/g++.dg/cpp0x/alias-decl-dr1286a.C
+++ b/gcc/testsuite/g++.dg/cpp0x/alias-decl-dr1286a.C
@@ -11,13 +11,13 @@ template<typename T, typename U = T> struct A;
 template<template <class...> class> struct X;
 
 // equivalent to A
-template<typename V, typename W>
+template<typename V, typename W = V>
 using B = A<V, W>;
 
 same<X<A>,X<B>> s1;
 
 // not equivalent to A: not all parameters used
-template<typename V, typename W>
+template<typename V, typename W = V>
 using C = A<V>;
 
 different<X<A>,X<C>> d1;
@@ -29,32 +29,32 @@ using D = A<V>;
 different<X<A>,X<D>> d2;
 
 // not equivalent to A: template-arguments in wrong order
-template<typename V, typename W>
+template<typename V, typename W = V>
 using E = A<W, V>;
 
 different<X<A>,X<E>> d3;
 
-// equivalent to A: default arguments not considered
+// NOT equivalent to A: default arguments now considered
 template<typename V, typename W = int>
 using F = A<V, W>;
 
-same<X<A>,X<F>> s2;
+different<X<A>,X<F>> s2;
 
 // equivalent to A and B
-template<typename V, typename W>
+template<typename V, typename W = V>
 using G = A<V, W>;
 
 same<X<A>,X<G>> s3;
 same<X<B>,X<G>> s3b;
 
 // equivalent to E
-template<typename V, typename W>
+template<typename V, typename W = V>
 using H = E<V, W>;
 
 same<X<E>,X<H>> s4;
 
 // not equivalent to A: argument not identifier
-template<typename V, typename W>
+template<typename V, typename W = V>
 using I = A<V, typename W::type>;
 
 different<X<A>,X<I>> d4;
diff --git a/gcc/testsuite/g++.dg/cpp1z/class-deduction-alias1.C b/gcc/testsuite/g++.dg/cpp1z/class-deduction-alias1.C
new file mode 100644
index 000000000..ffa5f2bad
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp1z/class-deduction-alias1.C
@@ -0,0 +1,18 @@
+// PR c++/103852
+// { dg-do compile { target c++17 } }
+// { dg-options "" }
+
+template <class T> struct b{};
+template <class T, class T1 = b<T>>
+struct s
+{
+    s(T);
+};
+s c(100);
+template <class T, class T1 = b<T>>
+using ss = s<T, T1>;	     // equivalent under proposed resolution of DR 1286
+ss tt(1);   // { dg-warning "alias template deduction" "" { target c++17_only } }
+
+template <class T, class T1 = T>
+using ss2 = s<T, T1>;	     // different default arg makes it non-equivalent
+ss2 tt2(1); // { dg-error "alias template deduction" "" { target c++17_only } }
