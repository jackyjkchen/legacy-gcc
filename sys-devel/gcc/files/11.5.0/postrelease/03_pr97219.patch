diff --git a/gcc/cp/cp-tree.h b/gcc/cp/cp-tree.h
index 7e04a080f..050d2c91f 100644
--- a/gcc/cp/cp-tree.h
+++ b/gcc/cp/cp-tree.h
@@ -8062,6 +8062,7 @@ extern tree fold_builtin_source_location	(location_t);
 
 /* in name-lookup.c */
 extern tree strip_using_decl                    (tree);
+extern bool dependent_local_decl_p		(tree);
 
 /* Tell the binding oracle what kind of binding we are looking for.  */
 
diff --git a/gcc/cp/name-lookup.c b/gcc/cp/name-lookup.c
index 98b1993e1..5ef985cdf 100644
--- a/gcc/cp/name-lookup.c
+++ b/gcc/cp/name-lookup.c
@@ -9234,4 +9234,22 @@ push_operator_bindings ()
 	}
 }
 
+/* True if D is a local declaration in dependent scope.  Assumes that it is
+   (part of) the current lookup result for its name.  */
+
+bool
+dependent_local_decl_p (tree d)
+{
+  if (!DECL_LOCAL_DECL_P (d))
+    return false;
+
+  cxx_binding *b = IDENTIFIER_BINDING (DECL_NAME (d));
+  cp_binding_level *l = b->scope;
+  while (!l->this_entity)
+    l = l->level_chain;
+  return uses_template_parms (l->this_entity);
+}
+
+
+
 #include "gt-cp-name-lookup.h"
diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 8d39473de..5ccf6466c 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -15286,7 +15286,9 @@ tsubst_arg_types (tree arg_types,
     /* Except that we do substitute default arguments under tsubst_lambda_expr,
        since the new op() won't have any associated template arguments for us
        to refer to later.  */
-    if (lambda_fn_in_template_p (in_decl))
+  	if (lambda_fn_in_template_p (in_decl)
+      || (in_decl && TREE_CODE (in_decl) == FUNCTION_DECL
+	  && DECL_LOCAL_DECL_P (in_decl)))
       default_arg = tsubst_copy_and_build (default_arg, args, complain, in_decl,
 					   false/*fn*/, false/*constexpr*/);
 
diff --git a/gcc/cp/semantics.c b/gcc/cp/semantics.c
index dc0cd2e2f..d59049b69 100644
--- a/gcc/cp/semantics.c
+++ b/gcc/cp/semantics.c
@@ -2645,13 +2645,13 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,
 
   if (processing_template_decl)
     {
-      /* If FN is a local extern declaration or set thereof, look them up
-	 again at instantiation time.  */
+      /* If FN is a local extern declaration (or set thereof) in a template,
+	 look it up again at instantiation time.  */
       if (is_overloaded_fn (fn))
 	{
 	  tree ifn = get_first_fn (fn);
 	  if (TREE_CODE (ifn) == FUNCTION_DECL
-	      && DECL_LOCAL_DECL_P (ifn))
+	      && dependent_local_decl_p (ifn))
 	    orig_fn = DECL_NAME (ifn);
 	}
 
diff --git a/gcc/testsuite/g++.dg/cpp1y/lambda-generic-local-fn1.C b/gcc/testsuite/g++.dg/cpp1y/lambda-generic-local-fn1.C
new file mode 100644
index 000000000..06919c535
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp1y/lambda-generic-local-fn1.C
@@ -0,0 +1,17 @@
+// PR c++/97219
+// { dg-do compile { target c++14 } }
+
+struct B;
+
+template <typename T>
+auto f(T *) {
+  void q(B *, void * = static_cast<T *>(0));
+  return [](auto *p) { q(p); };
+}
+
+void q(void *) = delete;
+
+int main(void) {
+  B *bp = 0;
+  f(bp)(bp);
+}
