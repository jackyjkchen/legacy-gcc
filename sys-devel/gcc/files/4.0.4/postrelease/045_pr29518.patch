diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 5779bab0..31c42ffb 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -4030,6 +4030,7 @@ coerce_template_parms (tree parms,
   tree inner_args;
   tree new_args;
   tree new_inner_args;
+  bool saved_skip_evaluation;
 
   inner_args = INNERMOST_TEMPLATE_ARGS (args);
   nargs = inner_args ? NUM_TMPL_ARGS (inner_args) : 0;
@@ -4052,6 +4053,10 @@ coerce_template_parms (tree parms,
       return error_mark_node;
     }
 
+  /* We need to evaluate the template arguments, even though this
+     template-id may be nested within a "sizeof".  */
+  saved_skip_evaluation = skip_evaluation;
+  skip_evaluation = false;
   new_inner_args = make_tree_vec (nparms);
   new_args = add_outermost_template_args (args, new_inner_args);
   for (i = 0; i < nparms; i++)
@@ -4087,6 +4092,7 @@ coerce_template_parms (tree parms,
 	lost++;
       TREE_VEC_ELT (new_inner_args, i) = arg;
     }
+  skip_evaluation = saved_skip_evaluation;
 
   if (lost)
     return error_mark_node;
diff --git a/gcc/testsuite/g++.dg/template/static28.C b/gcc/testsuite/g++.dg/template/static28.C
new file mode 100644
index 00000000..eb5ec531
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/static28.C
@@ -0,0 +1,15 @@
+// PR c++/29518
+
+template< bool C > int assertion_failed( int);
+template< class > 
+struct N
+{
+  static bool const okay = true;
+  enum {
+    t = sizeof( assertion_failed<okay>( 0))
+  };
+};
+int main()
+{
+  N<int> n;
+}
