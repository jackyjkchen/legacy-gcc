diff --git a/gcc/loop.c b/gcc/loop.c
index 4a3ebe8e..30ef4e2d 100644
--- a/gcc/loop.c
+++ b/gcc/loop.c
@@ -8606,6 +8606,10 @@ combine_givs_p (struct induction *g1, struct induction *g2)
 {
   rtx comb, ret;
 
+  /* We cannot combine givs that are not always in sync.  */
+  if (!g1->always_executed || !g2->always_executed)
+    return NULL_RTX;
+
   /* With the introduction of ext dependent givs, we must care for modes.
      G2 must not use a wider mode than G1.  */
   if (GET_MODE_SIZE (g1->mode) < GET_MODE_SIZE (g2->mode))
@@ -8614,6 +8618,7 @@ combine_givs_p (struct induction *g1, struct induction *g2)
   ret = comb = express_from (g1, g2);
   if (comb == NULL_RTX)
     return NULL_RTX;
+
   if (g1->mode != g2->mode)
     ret = gen_lowpart (g2->mode, comb);
 
@@ -8624,9 +8629,7 @@ combine_givs_p (struct induction *g1, struct induction *g2)
      combination to be the other way round.  */
   if (comb == g1->dest_reg
       && (g1->giv_type == DEST_REG || g2->giv_type == DEST_ADDR))
-    {
-      return ret;
-    }
+    return ret;
 
   /* If G2 can be expressed as a function of G1 and that function is valid
      as an address and no more expensive than using a register for G2,
diff --git a/gcc/testsuite/gcc.c-torture/execute/20070227-1.c b/gcc/testsuite/gcc.c-torture/execute/20070227-1.c
new file mode 100644
index 00000000..1432b870
--- /dev/null
+++ b/gcc/testsuite/gcc.c-torture/execute/20070227-1.c
@@ -0,0 +1,31 @@
+/* PR rtl-optimization/30931 */
+/* Testcase by Peter Bergner <bergner@gcc.gnu.org> */
+
+struct s
+{
+  int first;
+  int done;
+};
+
+void bug (struct s *p)
+{
+  int i;
+  for (i=0; i < 2; i++)
+    {
+      while (p[i].first && p[i].done)
+        p[i].first = 0;
+    }
+}
+
+int main (void)
+{
+  struct s array[2];
+  array[0].first = 1;
+  array[0].done = 1;
+  array[1].first = 0;
+  array[1].done = 0;
+
+  bug (array);
+
+  return 0;
+}
