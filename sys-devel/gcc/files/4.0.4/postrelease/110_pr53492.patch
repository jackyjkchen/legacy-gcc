diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index e41a410e..60faf219 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -13110,7 +13110,13 @@ cp_parser_class_head (cp_parser* parser,
       pushed_scope = push_scope (nested_name_specifier);
       /* Get the canonical version of this type.  */
       type = TYPE_MAIN_DECL (TREE_TYPE (type));
-      if (PROCESSING_REAL_TEMPLATE_DECL_P ()
+      /* Call push_template_decl if it seems like we should be defining a
+	 template either from the template headers or the type we're
+	 defining, so that we diagnose both extra and missing headers.  */
+      if ((PROCESSING_REAL_TEMPLATE_DECL_P ()
+	   || (CLASSTYPE_TEMPLATE_INFO (TREE_TYPE (type))
+	       && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE
+				      (TREE_TYPE (type)))))
 	  && !CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (type)))
 	{
 	  type = push_template_decl (type);
diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 03b25583..59c58072 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -3149,6 +3149,8 @@ push_template_decl_real (tree decl, int is_friend)
 	{
 	  error ("expected %d levels of template parms for %q#D, got %d",
                  i, decl, TMPL_ARGS_DEPTH (args));
+	  DECL_INTERFACE_KNOWN (decl) = 1;
+	  return error_mark_node;
 	}
       else
 	for (current = decl; i > 0; --i, parms = TREE_CHAIN (parms))
diff --git a/gcc/testsuite/g++.dg/template/memtmpl4.C b/gcc/testsuite/g++.dg/template/memtmpl4.C
new file mode 100644
index 00000000..54558b98
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/memtmpl4.C
@@ -0,0 +1,10 @@
+// PR c++/53492
+
+template<typename T> struct A
+{
+  template<typename U> struct B;
+};
+
+template <> template<class T> struct A<T>::B { }; // { dg-error "expected 2 levels" }
+
+A<int>::B<int> b;		// { dg-error "" }
