diff --git a/gcc/c-decl.c b/gcc/c-decl.c
index f67c58b3..95675cad 100644
--- a/gcc/c-decl.c
+++ b/gcc/c-decl.c
@@ -2756,7 +2756,16 @@ c_make_fname_decl (tree id, int type_dep)
 
   TREE_USED (decl) = 1;
 
-  if (current_function_decl)
+  if (current_function_decl
+      /* For invalid programs like this:
+        
+         void foo()
+         const char* p = __FUNCTION__;
+        
+	 the __FUNCTION__ is believed to appear in K&R style function
+	 parameter declarator.  In that case we still don't have
+	 function_scope.  */
+      && (!errorcount || current_function_scope))
     {
       DECL_CONTEXT (decl) = current_function_decl;
       bind (id, decl, current_function_scope,
diff --git a/gcc/testsuite/gcc.dg/pr28419.c b/gcc/testsuite/gcc.dg/pr28419.c
new file mode 100644
index 00000000..a1aa4bfe
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr28419.c
@@ -0,0 +1,3 @@
+/* { dg-do compile } */
+void foo() 
+const char* p = __FUNCTION__; /* { dg-error "" } */
