diff --git a/gcc/cp/call.c b/gcc/cp/call.c
index d4c6379e..0a79aca2 100644
--- a/gcc/cp/call.c
+++ b/gcc/cp/call.c
@@ -3290,12 +3290,21 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)
 	  arg2 = convert_like (conv2, arg2);
 	  arg2 = convert_from_reference (arg2);
 	  arg2_type = TREE_TYPE (arg2);
+	  /* Even if CONV2 is a valid conversion, the result of the
+	     conversion may be invalid.  For example, if ARG3 has type
+	     "volatile X", and X does not have a copy constructor
+	     accepting a "volatile X&", then even if ARG2 can be
+	     converted to X, the conversion will fail.  */
+	  if (error_operand_p (arg2))
+	    result = error_mark_node;
 	}
       else if (conv3 && (!conv3->bad_p || !conv2))
 	{
 	  arg3 = convert_like (conv3, arg3);
 	  arg3 = convert_from_reference (arg3);
 	  arg3_type = TREE_TYPE (arg3);
+	  if (error_operand_p (arg3))
+	    result = error_mark_node;
 	}
 
       /* Free all the conversions we allocated.  */
diff --git a/gcc/testsuite/g++.dg/expr/cond9.C b/gcc/testsuite/g++.dg/expr/cond9.C
new file mode 100644
index 00000000..9e8f08c1
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/cond9.C
@@ -0,0 +1,10 @@
+// PR c++/27666
+
+struct A { // { dg-error "A" }
+  A(int); // { dg-error "A" }
+};
+
+void foo(volatile A a) { 
+  1 ? a : 0; // { dg-error "match|temporary" }
+  1 ? 0 : a; // { dg-error "match|temporary" }
+} 
