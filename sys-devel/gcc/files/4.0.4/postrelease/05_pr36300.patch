diff --git a/gcc/flags.h b/gcc/flags.h
index 695d6228..45820093 100644
--- a/gcc/flags.h
+++ b/gcc/flags.h
@@ -288,4 +288,9 @@ extern const char *flag_random_seed;
 #define HONOR_SIGN_DEPENDENT_ROUNDING(MODE) \
   (MODE_HAS_SIGN_DEPENDENT_ROUNDING (MODE) && flag_rounding_math)
 
+/* True if overflow wraps around for the given integral type.  That
+   is, TYPE_MAX + 1 == TYPE_MIN.  */
+#define TYPE_OVERFLOW_WRAPS(TYPE) \
+  (TYPE_UNSIGNED (TYPE) || flag_wrapv)
+
 #endif /* ! GCC_FLAGS_H */
diff --git a/gcc/fold-const.c b/gcc/fold-const.c
index a91abbb4..d39d43a7 100644
--- a/gcc/fold-const.c
+++ b/gcc/fold-const.c
@@ -5174,17 +5174,17 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type)
 	   || UNARY_CLASS_P (op0)
 	   || BINARY_CLASS_P (op0)
 	   || EXPRESSION_CLASS_P (op0))
-	  /* ... and is unsigned, and its type is smaller than ctype,
-	     then we cannot pass through as widening.  */
-	  && ((TYPE_UNSIGNED (TREE_TYPE (op0))
+	  /* ... and has wrapping overflow, and its type is smaller
+	     than ctype, then we cannot pass through as widening.  */
+	  && ((TYPE_OVERFLOW_WRAPS (TREE_TYPE (op0))
 	       && ! (TREE_CODE (TREE_TYPE (op0)) == INTEGER_TYPE
 		     && TYPE_IS_SIZETYPE (TREE_TYPE (op0)))
-	       && (GET_MODE_SIZE (TYPE_MODE (ctype))
-	           > GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op0)))))
+	       && (TYPE_PRECISION (ctype)
+	           > TYPE_PRECISION (TREE_TYPE (op0))))
 	      /* ... or this is a truncation (t is narrower than op0),
 		 then we cannot pass through this narrowing.  */
-	      || (GET_MODE_SIZE (TYPE_MODE (type))
-		  < GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op0))))
+	      || (TYPE_PRECISION (type)
+		  < TYPE_PRECISION (TREE_TYPE (op0)))
 	      /* ... or signedness changes for division or modulus,
 		 then we cannot pass through this conversion.  */
 	      || (code != MULT_EXPR
diff --git a/gcc/testsuite/gcc.dg/pr36300-1.c b/gcc/testsuite/gcc.dg/pr36300-1.c
new file mode 100644
index 00000000..466522f8
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr36300-1.c
@@ -0,0 +1,24 @@
+/* { dg-do run } */
+/* { dg-options "-O2 -fwrapv" } */
+
+extern void abort (void);
+
+#define VALUE ((int)((long long)U1 * (long long)3) + 2)
+
+int main(void)
+{
+  int U1;
+  long long Y, Y2;
+  int t;
+
+  U1 = -2147483647-1;
+
+  Y = ((long long)(VALUE * VALUE) * 3);
+
+  t = VALUE;
+  Y2 = ((long long)(t * t) * 3);
+
+  if (Y != Y2)
+    abort ();
+  return 0;
+}
diff --git a/gcc/testsuite/gcc.dg/pr36300-2.c b/gcc/testsuite/gcc.dg/pr36300-2.c
new file mode 100644
index 00000000..7e7cfa2b
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr36300-2.c
@@ -0,0 +1,24 @@
+/* { dg-do run } */
+/* { dg-options "-O2" } */
+
+extern void abort (void);
+
+#define VALUE (unsigned int)((int)((long long)U1 * (long long)3) + 2)
+
+int main(void)
+{
+  int U1;
+  long long Y, Y2;
+  unsigned int t;
+
+  U1 = -2147483647-1;
+
+  Y = ((long long)(int)(VALUE * VALUE) * 3);
+
+  t = VALUE;
+  Y2 = ((long long)(int)(t * t) * 3);
+
+  if (Y != Y2)
+    abort ();
+  return 0;
+}
