diff --git a/gcc/fortran/resolve.c b/gcc/fortran/resolve.c
index ad110d58..b203f363 100644
--- a/gcc/fortran/resolve.c
+++ b/gcc/fortran/resolve.c
@@ -8004,6 +8004,8 @@ resolve_symbol (gfc_symbol *sym)
 	    }
 	}
     }
+  else if (mp_flag && sym->attr.flavor == FL_PROCEDURE && sym->attr.function)
+    gfc_resolve_array_spec (sym->result->as, false);
 
   /* Assumed size arrays and assumed shape arrays must be dummy
      arguments.  */
diff --git a/gcc/testsuite/gfortran.dg/result_in_spec_4.f90 b/gcc/testsuite/gfortran.dg/result_in_spec_4.f90
new file mode 100644
index 00000000..3f0e9a37
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/result_in_spec_4.f90
@@ -0,0 +1,27 @@
+! { dg-do compile }
+!
+! PR fortran/49648
+! ICE for calls to a use-associated function returning an array whose spec
+! depends on a function call.
+
+! Contributed by Tobias Burnus <burnus@net-b.de>
+
+module m2
+  COMPLEX, SAVE, ALLOCATABLE :: P(:)
+contains
+  FUNCTION getPhaseMatrix() RESULT(PM)
+    COMPLEX:: PM(SIZE(P),3)
+    PM=0.0
+  END FUNCTION
+end module m2
+
+module m
+  use m2
+contains
+   SUBROUTINE gf_generateEmbPot()
+      COMPLEX :: sigma2(3,3)
+      sigma2 = MATMUL(getPhaseMatrix(), sigma2)
+   END SUBROUTINE
+end module m
+
+! { dg-final { cleanup-modules "m m2" } }
