diff --git a/gcc/calls.c b/gcc/calls.c
index 5ae33ec..233018a 100644
--- a/gcc/calls.c
+++ b/gcc/calls.c
@@ -545,6 +545,8 @@ special_function_p (const_tree fndecl, int flags)
 int
 setjmp_call_p (const_tree fndecl)
 {
+  if (DECL_IS_RETURNS_TWICE (fndecl))
+    return ECF_RETURNS_TWICE;
   return special_function_p (fndecl, 0) & ECF_RETURNS_TWICE;
 }
 
diff --git a/gcc/testsuite/gcc.dg/pr49243.c b/gcc/testsuite/gcc.dg/pr49243.c
new file mode 100644
index 0000000..cf5b88b
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr49243.c
@@ -0,0 +1,25 @@
+/* PR tree-optimization/49243 */
+/* { dg-do compile } */
+/* { dg-options "-O2 -Winline" } */
+
+extern unsigned long jb[];
+extern int my_setjmp(unsigned long jb[]) __attribute__((returns_twice));
+extern int decode(const char*);
+
+static inline int wrapper(const char **s_ptr)
+{ /* { dg-warning "(inlining failed|function 'wrapper' can never be inlined because it uses setjmp)" } */
+    if (my_setjmp(jb) == 0) {
+	const char *s = *s_ptr;
+	while (decode(s) != 0)
+	    *s_ptr = ++s;
+	return 0;
+    } else
+	return -1;
+}
+
+void parse(const char *data)
+{
+    const char *s = data;
+    if (!(wrapper(&s) == -1 && (s - data) == 1)) /* { dg-warning "called from here" } */
+	__builtin_abort();
+}
