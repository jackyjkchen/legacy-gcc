diff --git a/gcc/cp/semantics.c b/gcc/cp/semantics.c
index 70dd353b..f672592b 100644
--- a/gcc/cp/semantics.c
+++ b/gcc/cp/semantics.c
@@ -4262,8 +4262,9 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)
                 type = TYPE_MAIN_VARIANT (type);
               else if (real_lvalue_p (expr))
                 {
-                  if (TREE_CODE (type) != REFERENCE_TYPE)
-                    type = build_reference_type (type);
+                  if (TREE_CODE (type) != REFERENCE_TYPE
+		      || TYPE_REF_IS_RVALUE (type))
+                    type = build_reference_type (non_reference (type));
                 }
               else
                 type = non_reference (type);
diff --git a/gcc/testsuite/g++.dg/cpp0x/decltype23a.C b/gcc/testsuite/g++.dg/cpp0x/decltype23a.C
new file mode 100644
index 00000000..78eb89d8
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/decltype23a.C
@@ -0,0 +1,5 @@
+// { dg-options -std=c++0x }
+
+int x, &&y = static_cast<int &&>(x);
+typedef decltype((y)) myInt;  // `y' is a parenthesized id-expression of type int that is an lvalue
+typedef int &myInt;
