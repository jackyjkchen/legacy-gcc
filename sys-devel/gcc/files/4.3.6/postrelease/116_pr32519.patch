diff --git a/gcc/cp/search.c b/gcc/cp/search.c
index 659ea76c..3b2057c5 100644
--- a/gcc/cp/search.c
+++ b/gcc/cp/search.c
@@ -746,7 +746,8 @@ protected_accessible_p (tree decl, tree derived, tree binfo)
      derived from that class) (_expr.ref_).  If the access is to form
      a pointer to member, the nested-name-specifier shall name the
      derived class (or any class derived from that class).  */
-  if (DECL_NONSTATIC_MEMBER_P (decl))
+  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)
+      || TREE_CODE (decl) == FIELD_DECL)
     {
       /* We can tell through what the reference is occurring by
 	 chasing BINFO up to the root.  */
diff --git a/gcc/testsuite/g++.dg/template/pr32519.C b/gcc/testsuite/g++.dg/template/pr32519.C
new file mode 100644
index 00000000..e93c7b47
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/pr32519.C
@@ -0,0 +1,16 @@
+// PR 32519
+// { dg-do compile }
+
+struct B
+{
+protected:
+  template <class T> void f (); // { dg-error "protected" }
+};
+
+struct D : public B
+{
+  void g (B* b)
+  {
+    b->f<int> (); // { dg-error "context" }
+  }
+};
