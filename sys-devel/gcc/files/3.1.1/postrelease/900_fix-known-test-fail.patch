diff --git a/gcc/testsuite/g++.old-deja/g++.other/init5.C b/gcc/testsuite/g++.old-deja/g++.other/init5.C
index 92b1d32..566ae11 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/init5.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/init5.C
@@ -1,6 +1,6 @@
 // Objects must be destructed in decreasing cnt order
 // Original test attributed to James Kanze <jkanze@otelo.ibmmail.com>
-// execution test - XFAIL *-*-*
+// execution test - XFAIL *-*-gnulibc1
 
 extern "C" void abort ();
 
diff --git a/gcc/testsuite/gcc.c-torture/execute/20020227-1.x b/gcc/testsuite/gcc.c-torture/execute/20020227-1.x
index 3c3c4bb..4e71947 100644
--- a/gcc/testsuite/gcc.c-torture/execute/20020227-1.x
+++ b/gcc/testsuite/gcc.c-torture/execute/20020227-1.x
@@ -2,20 +2,34 @@
 # been observed to fail on at least mips-irix6, alpha, ia64, hppa64,
 # sparc64/sparcv9 and mmix during April 2002.
 
-if { [istarget "*64*-*-*"] || [istarget "alpha*-*-*"] || [istarget "mmix-*-*"]
-     || [istarget "sparcv9-*-*"] || [istarget "mips*-*-irix6*"] } {
-    set torture_execute_xfail [istarget]
-}
-
-# Regular sparc- also fails with -m64.
-set torture_eval_before_execute {
-    global compiler_conditional_xfail_data
-    set compiler_conditional_xfail_data {
-        "This test fails on 64-bit targets, see PR6221." \
-        { "sparc-*-*" } \
-        { "-m64" } \
-        { "" }
+if { [istarget "sparc64-*-*"] || [istarget "sparcv9-*-*"] } {
+    # On sparc64/sparcv9 it doesn't fail at -O0/-O1, or at all with -m32.
+    set torture_eval_before_execute {
+        global compiler_conditional_xfail_data
+        set compiler_conditional_xfail_data {
+            "This test fails on 64-bit targets, see PR6221." \
+            { "*-*-*" } \
+            { "-O2" "-O3" "-Os" } \
+            { "-m32" }
+        }
     }
+} elseif { [istarget "sparc-*-*"] } {
+    # Regular sparc fails with -m64, but not with -O0/-O1.
+    set torture_eval_before_execute {
+        global compiler_conditional_xfail_data
+        set compiler_conditional_xfail_data {
+            "This test fails on 64-bit targets, see PR6221." \
+            { "*-*-*" } \
+            { "-m64" } \
+            { "-O0" "-O1" }
+        }
+    }
+} elseif { [istarget "powerpc64-*-*"] || [istarget "x86_64-*-*"] } {
+    # PowerPC-64 and x86_64 do not fail at any optimization level.
+} elseif { [istarget "*64*-*-*"] || [istarget "alpha*-*-*"]
+        || [istarget "mmix-*-*"] || [istarget "mips*-*-irix6*"] } {
+    # Other 64-bit targets fail at all optimization levels.
+    set torture_execute_xfail [istarget]
 }
 
 return 0
diff --git a/gcc/testsuite/gcc.c-torture/execute/20020307-2.c b/gcc/testsuite/gcc.c-torture/execute/20020307-2.c
index df0efe0..34cecbe 100644
--- a/gcc/testsuite/gcc.c-torture/execute/20020307-2.c
+++ b/gcc/testsuite/gcc.c-torture/execute/20020307-2.c
@@ -4,6 +4,7 @@
 
 #include <stdarg.h>
 
+#ifndef __x86_64__
 extern void abort (void);
 extern void exit (int);
 
@@ -35,9 +36,11 @@ void foo (int size, ...)
     bar (d.x[i]);
   va_end (ap);
 }
+#endif
 
 int main (void)
 {
+#ifndef __x86_64__
   int z = 5;
   struct { char a[z]; } x, y;
           
@@ -52,5 +55,6 @@ int main (void)
   y.a[3] = '8';
   y.a[4] = '9';
   foo (z, x, y);
+#endif
   exit (0);
 }
diff --git a/gcc/testsuite/gcc.c-torture/execute/20020307-2.x b/gcc/testsuite/gcc.c-torture/execute/20020307-2.x
new file mode 100644
index 0000000..32db2d8
--- /dev/null
+++ b/gcc/testsuite/gcc.c-torture/execute/20020307-2.x
@@ -0,0 +1,7 @@
+# This doesn't work on MIPS Irix, see PR6222
+
+if { [istarget "mips*-sgi-irix6*"] } {
+	set torture_execute_xfail [istarget]
+}
+
+return 0
diff --git a/gcc/testsuite/gcc.dg/20020103-1.c b/gcc/testsuite/gcc.dg/20020103-1.c
index 7a5fdbe..54ad83c 100644
--- a/gcc/testsuite/gcc.dg/20020103-1.c
+++ b/gcc/testsuite/gcc.dg/20020103-1.c
@@ -1,8 +1,8 @@
 /* Verify that constant equivalences get reloaded properly, either by being
    spilled to the stack, or regenerated, but not dropped to memory.  */
-/* { dg-do compile { target i?86-*-* powerpc-*-* rs6000-*-* alpha*-*-* } } */
-/* { dg-options "-O2 -fpic -fno-omit-frame-pointer" } */
-/* { dg-final { scan-assembler-not "LC" } } */
+/* { dg-do compile { target i?86-*-* powerpc-*-* rs6000-*-* alpha*-*-* x86_64-*-*} } */
+/* { dg-options "-O2 -fpic -fno-omit-frame-pointer -fno-asynchronous-unwind-tables" } */
+/* { dg-final { scan-assembler-not "LC\[0-9\]" } } */
 
 /* Clobber all call-saved registers that can hold a pointer value.  */
 #if defined(__i386__)
@@ -16,6 +16,9 @@
 #define clobber \
   asm volatile("#asm" : : : "$9", "$10", "$11", "$12", "$13", "$14", \
 	       "$f2", "$f3", "$f4", "$f5", "$f6", "$f7", "$f8", "$f9")
+#elif defined(__x86_64__)
+#define clobber \
+  asm volatile("#asm" : : : "rcx", "rdx", "rsi", "rdi", "r8", "r9", "r10", "r11")
 #else
 #error no clobber macro defined
 #endif
diff --git a/gcc/testsuite/gcc.dg/special/ecos.exp b/gcc/testsuite/gcc.dg/special/ecos.exp
index b887502..870a9a7 100644
--- a/gcc/testsuite/gcc.dg/special/ecos.exp
+++ b/gcc/testsuite/gcc.dg/special/ecos.exp
@@ -164,11 +164,7 @@ if { [ string first "--gc-sections" $ld_output ] >= 0
      && ! [istarget powerpc*-*-aix*] } {
 
     dg-init
-    if [isnative] {
-	dg-runtest "$srcdir/$subdir/gcsec-1.c" "-ffunction-sections -fdata-sections -Wl,--gc-sections -static" ""
-    } else {
 	dg-runtest "$srcdir/$subdir/gcsec-1.c" "-ffunction-sections -fdata-sections -Wl,--gc-sections" ""
-    }
     dg-finish
 } else {
     unsupported "gcsec-1.c"
diff --git a/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc b/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc
index 9cf4e7d..25a36ef 100644
--- a/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc
+++ b/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc
@@ -1,6 +1,6 @@
 // 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>
 
-// Copyright (C) 2000, 2002 Free Software Foundation
+// Copyright (C) 2000, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -31,30 +31,38 @@ void test01()
   typedef codecvt_base::result			result;
   typedef codecvt<char, char, mbstate_t> 	c_codecvt;
 
-  bool 			test = true;
+  bool test __attribute__((unused)) = true;
   const char* 		c_lit = "black pearl jasmine tea";
   const char* 	        from_next;
   int 			size = 25;
   char* 		c_arr = new char[size];
+  char*                 c_ref = new char[size];
   char*			to_next;
 
-  locale 		loc;
+  locale 		loc = locale::classic();
   c_codecvt::state_type state;
   const c_codecvt* 	cvt = &use_facet<c_codecvt>(loc); 
 
+  // According to the resolution of DR19 (see also libstd++/9168), in
+  // case of degenerate conversion ('noconv'), "there are no changes to
+  // the values in [to, to_limit)."
+  memset(c_ref, 'X', size);
+
   // in
+  memset(c_arr, 'X', size);
   result r1 = cvt->in(state, c_lit, c_lit + size, from_next, 
 		      c_arr, c_arr + size, to_next);
   VERIFY( r1 == codecvt_base::noconv );
-  VERIFY( !strcmp(c_arr, c_lit) ); 
+  VERIFY( !memcmp(c_arr, c_ref, size) ); 
   VERIFY( from_next == c_lit );
   VERIFY( to_next == c_arr );
 
   // out
+  memset(c_arr, 'X', size);
   result r2 = cvt->out(state, c_lit, c_lit + size, from_next, 
 		       c_arr, c_arr + size, to_next);
   VERIFY( r2 == codecvt_base::noconv );
-  VERIFY( !strcmp(c_arr, c_lit) ); 
+  VERIFY( !memcmp(c_arr, c_ref, size) ); 
   VERIFY( from_next == c_lit );
   VERIFY( to_next == c_arr );
 
@@ -65,57 +73,12 @@ void test01()
   VERIFY( !strcmp(c_arr, c_lit) ); 
   VERIFY( to_next == c_arr );
 
-  int i = cvt->encoding();
-  VERIFY( i == 1 );
-
-  VERIFY( cvt->always_noconv() );
-
-  int j = cvt->length(state, c_lit, c_lit + size, 5);
-  VERIFY( j == 5 );
-
-  int k = cvt->max_length();
-  VERIFY( k == 1 );
-
   delete [] c_arr;
-}
-
-// libstdc++/5280
-void test02()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test03()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
+  delete [] c_ref;
 }
 
 int main ()
 {
   test01();
-  test02();
-  test03();
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc b/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc
index 1eb505f..8410a35 100644
--- a/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc
+++ b/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc
@@ -1,6 +1,6 @@
-// 2000-08-18 Benjamin Kosnik <bkoz@cygnus.com>
+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>
 
-// Copyright (C) 2000, 2002 Free Software Foundation
+// Copyright (C) 2000, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -20,11 +20,9 @@
 
 // 22.2.1.5 - Template class codecvt [lib.locale.codecvt]
 
-#include <cwchar> // for mbstate_t
 #include <locale>
 #include <testsuite_hooks.h>
 
-
 // Need to explicitly set the state(mbstate_t) to zero.
 // How to do this is not specified by the ISO C99 standard, so we
 // might need to add some operators to make the intuiative case
@@ -34,7 +32,6 @@
 // or, can use this explicit "C" initialization:
 //   w_codecvt::state_type state01 = {0, 0};
 // .. except Ulrich says: Use memset. Always use memset. Feel the force...
-#ifdef _GLIBCPP_USE_WCHAR_T
 void
 zero_state(std::mbstate_t& state)
 { std::memset(&state, 0, sizeof(std::mbstate_t)); }
@@ -48,43 +45,16 @@ void test01()
   typedef codecvt_base::result			result;
   typedef wchar_t				int_type;
   typedef char					ext_type;
-  typedef char_traits<wchar_t>			int_traits;
-  typedef char_traits<char>			ext_traits;
 
-  bool 			test = true;
+  bool test __attribute__((unused)) = true;
   const ext_type* 	e_lit = "black pearl jasmine tea";
-  const ext_type*       efrom_next;
-  const int_type* 	i_lit = L"black pearl jasmine tea";
-  const int_type*       ifrom_next;
   int 			size = strlen(e_lit);
   ext_type* 		e_arr = new ext_type[size + 1];
   ext_type*		eto_next;
-  int_type* 		i_arr = new int_type[size + 1];
-  int_type*		ito_next;
 
   locale 		loc;
   const w_codecvt* 	cvt = &use_facet<w_codecvt>(loc); 
 
-  // in
-  w_codecvt::state_type state01;
-  zero_state(state01);
-  result r1 = cvt->in(state01, e_lit, e_lit + size, efrom_next, 
-		      i_arr, i_arr + size, ito_next);
-  VERIFY( r1 == codecvt_base::ok );
-  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); 
-  VERIFY( efrom_next == e_lit + size );
-  VERIFY( ito_next == i_arr + size );
-
-  // out
-  w_codecvt::state_type state02;
-  zero_state(state02);  
-  result r2 = cvt->out(state02, i_lit, i_lit + size, ifrom_next, 
-		       e_arr, e_arr + size, eto_next);
-  VERIFY( r2 == codecvt_base::ok );
-  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); 
-  VERIFY( ifrom_next == i_lit + size );
-  VERIFY( eto_next == e_arr + size );
-
   // unshift
   strcpy(e_arr, e_lit);
   w_codecvt::state_type state03;
@@ -94,65 +64,11 @@ void test01()
   VERIFY( !strcmp(e_arr, e_lit) ); 
   VERIFY( eto_next == e_arr );
 
-  int i = cvt->encoding();
-  VERIFY( i == 4 ); // Target-dependent.
-
-  VERIFY( !cvt->always_noconv() );
-
-  w_codecvt::state_type state04;
-  zero_state(state04);
-  int j = cvt->length(state03, e_lit, e_lit + size, 5);
-  VERIFY( j == 5 );
-
-  int k = cvt->max_length();
-  VERIFY( k == 1 );
-
   delete [] e_arr;
-  delete [] i_arr;
 }
 
-// libstdc++/5280
-void test02()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test03()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */
-
-
 int main ()
 {
-#if _GLIBCPP_USE_WCHAR_T
   test01();
-  test02();
-  test03();
-#endif 
-
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc b/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc
index 8735799..af51d33 100644
--- a/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc
+++ b/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc
@@ -1,6 +1,6 @@
 // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>
 
-// Copyright (C) 2000, 2001, 2002 Free Software Foundation
+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -25,15 +25,7 @@
 #include <stdexcept>
 #include <testsuite_hooks.h>
 
-
-void test00()
-{
-  // Should be able to do this as the first thing that happens in a
-  // file and have it not crash.
-  std::locale loc("C");
-}
-
-#if _GLIBCPP_USE___ENC_TRAITS
+#if _GLIBCXX_USE___ENC_TRAITS
 typedef std::codecvt<char, char, std::mbstate_t> 	      c_codecvt;
 typedef std::codecvt_byname<char, char, std::mbstate_t>       c_codecvt_byname;
 typedef std::codecvt<wchar_t, char, std::mbstate_t>	      w_codecvt;
@@ -49,21 +41,80 @@ public:
 
 std::locale::id gnu_facet::id;
 
+// Need some char_traits specializations for this to work.
+typedef unsigned short			unicode_t;
+
+namespace std
+{
+  template<>
+    struct char_traits<unicode_t>
+    {
+      typedef unicode_t 	char_type;
+      // Unsigned as wint_t is unsigned.
+      typedef unsigned long  	int_type;
+      typedef streampos 	pos_type;
+      typedef streamoff 	off_type;
+      typedef mbstate_t 	state_type;
+      
+      static void 
+      assign(char_type& __c1, const char_type& __c2);
+
+      static bool 
+      eq(const char_type& __c1, const char_type& __c2);
+
+      static bool 
+      lt(const char_type& __c1, const char_type& __c2);
+
+      static int 
+      compare(const char_type* __s1, const char_type* __s2, size_t __n)
+      { return memcmp(__s1, __s2, __n); }
+
+      static size_t
+      length(const char_type* __s);
+
+      static const char_type* 
+      find(const char_type* __s, size_t __n, const char_type& __a);
+
+      static char_type* 
+      move(char_type* __s1, const char_type* __s2, size_t __n);
+
+      static char_type* 
+      copy(char_type* __s1, const char_type* __s2, size_t __n)
+      { return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }
+
+      static char_type* 
+      assign(char_type* __s, size_t __n, char_type __a);
+
+      static char_type 
+      to_char_type(const int_type& __c);
+
+      static int_type 
+      to_int_type(const char_type& __c);
+
+      static bool 
+      eq_int_type(const int_type& __c1, const int_type& __c2);
+
+      static int_type 
+      eof(); 
+
+      static int_type 
+      not_eof(const int_type& __c);
+    };
+}
+
 void test01()
 {
   using namespace std;
-
-  typedef unsigned short			unicode_t;
   typedef unicode_t				int_type;
   typedef char					ext_type;
   typedef __enc_traits				enc_type;
   typedef codecvt<int_type, ext_type, enc_type>	unicode_codecvt;
 
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   string str1, str2;
 
   // construct a locale object with the C facet
-  const locale& 	loc01 = locale::classic();
+  const locale	loc01 = locale::classic();
 
   // 1
   // template <class Facet> locale(const locale& other, Facet* f)
@@ -119,7 +170,7 @@ void test01()
 
   // 3
   // explicit locale(const char* std_name)
-  locale loc06("fr_FR");
+  locale loc06 = __gnu_test::try_named_locale("fr_FR");
   VERIFY (loc06 != loc01);  
   VERIFY (loc06 != loc02);  
   VERIFY (loc06.name() == "fr_FR");
@@ -236,15 +287,12 @@ void test01()
     VERIFY (loc15 != loc09);  
   }
 }
-#endif // _GLIBCPP_USE___ENC_TRAITS
+#endif // _GLIBCXX_USE___ENC_TRAITS
 
-int main ()
+int main()
 {
-  test00();
-
-#if _GLIBCPP_USE___ENC_TRAITS
+#if _GLIBCXX_USE___ENC_TRAITS
   test01();
 #endif 
-
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc b/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc
index ed35095..504eb89 100644
--- a/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc
+++ b/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc
@@ -1,4 +1,4 @@
-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.
+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -35,19 +35,12 @@ class gnu_ctype: public std::ctype<char_type> { };
 
 void test01()
 {
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   const char_type strlit00[] = "manilla, cebu, tandag PHILIPPINES";
   const char_type strlit01[] = "MANILLA, CEBU, TANDAG PHILIPPINES";
   const char_type strlit02[] = "manilla, cebu, tandag philippines";
   const char_type c00 = 'S';
   const char_type c10 = 's';
-  const char_type c20 = '9';
-  const char_type c30 = ' ';
-  const char_type c40 = '!';
-  const char_type c50 = 'F';
-  const char_type c60 = 'f';
-  const char_type c70 = 'X';
-  const char_type c80 = 'x';
 
   gnu_ctype gctype;
   char_type c100;
@@ -66,7 +59,6 @@ void test01()
   int i09 = std::ctype_base::graph;
   int i10 = std::ctype_base::print;
   int i11 = std::ctype_base::cntrl;
-  int i12 = sizeof(std::ctype_base::mask);
   VERIFY ( i01 != i02);
   VERIFY ( i02 != i03);
   VERIFY ( i03 != i04);
@@ -98,43 +90,8 @@ void test01()
   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );
 }
 
-// libstdc++/5280
-void test04()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test05()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-
 int main() 
 {
   test01();
-  test04();
-  test05();
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc b/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc
index 5218035..9d446c7 100644
--- a/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc
+++ b/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc
@@ -1,4 +1,4 @@
-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.
+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -30,25 +30,17 @@
 #include <locale>
 #include <testsuite_hooks.h>
 
-#ifdef _GLIBCPP_USE_WCHAR_T
 typedef wchar_t char_type;
 class gnu_ctype: public std::ctype<char_type> { };
 
 void test01()
 {
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   const char_type strlit00[] = L"manilla, cebu, tandag PHILIPPINES";
   const char_type strlit01[] = L"MANILLA, CEBU, TANDAG PHILIPPINES";
   const char_type strlit02[] = L"manilla, cebu, tandag philippines";
   const char_type c00 = L'S';
   const char_type c10 = L's';
-  const char_type c20 = L'9';
-  const char_type c30 = L' ';
-  const char_type c40 = L'!';
-  const char_type c50 = L'F';
-  const char_type c60 = L'f';
-  const char_type c70 = L'X';
-  const char_type c80 = L'x';
 
   gnu_ctype gctype;
   char_type c100;
@@ -67,7 +59,6 @@ void test01()
   int i09 = std::ctype_base::graph;
   int i10 = std::ctype_base::print;
   int i11 = std::ctype_base::cntrl;
-  int i12 = sizeof(std::ctype_base::mask);
   VERIFY ( i01 != i02);
   VERIFY ( i02 != i03);
   VERIFY ( i03 != i04);
@@ -99,46 +90,8 @@ void test01()
   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );
 }
 
-// libstdc++/5280
-void test04()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test05()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-#endif
-
 int main() 
 {
-#ifdef _GLIBCPP_USE_WCHAR_T
   test01();
-  test04();
-  test05();
-#endif
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/facet.cc b/libstdc++-v3/testsuite/22_locale/facet.cc
index 431718e..8360956 100644
--- a/libstdc++-v3/testsuite/22_locale/facet.cc
+++ b/libstdc++-v3/testsuite/22_locale/facet.cc
@@ -1,6 +1,6 @@
 // 2000-08-31 Benjamin Kosnik <bkoz@redhat.com>
 
-// Copyright (C) 2000 Free Software Foundation
+// Copyright (C) 2000, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -25,6 +25,7 @@
 #include <stdexcept>
 #include <string>
 #include <iterator>
+#include <limits>
 #include <testsuite_hooks.h>
 
 // 1 a class if a facet if it is publicly derived from another facet
@@ -171,7 +172,7 @@ std::locale::id gnu_facet::id;
 
 void test01()
 {
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   const std::string name_no("*");
   const std::string name_c("C");
 
@@ -236,6 +237,5 @@ void test01()
 int main ()
 {
   test01();
-
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc b/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc
index 63a994c..15508a3 100644
--- a/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc
+++ b/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc
@@ -27,7 +27,8 @@
 // invalidate any other reasons why the executable file might be covered by
 // the GNU General Public License.
 
-// { dg-do compile }
+// { dg-do compile { xfail *-*-linux-gnu *-*-freebsd5* } }
+// { dg-excess-errors "" { target *-*-linux-gnu *-*-freebsd5* } }
 
 #include <math.h>
 
diff --git a/libstdc++-v3/testsuite/27_io/ios_init.cc b/libstdc++-v3/testsuite/27_io/ios_init.cc
index 1905aa6..0db9630 100644
--- a/libstdc++-v3/testsuite/27_io/ios_init.cc
+++ b/libstdc++-v3/testsuite/27_io/ios_init.cc
@@ -1,6 +1,6 @@
 // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>
 
-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -29,78 +29,103 @@
 
 // 27.4.2.1.6 class ios_base::init
 
-#include <fstream>
 #include <sstream>
-#include <iostream>
 #include <testsuite_hooks.h>
 
-class gnu_filebuf: public std::filebuf
+// char_traits specialization
+namespace std
 {
-  int i;
-public:
-  gnu_filebuf(int j = 1): i(j) { }
-  ~gnu_filebuf() { --i; }
-  int get_i() { return i;}
-};
-
-const int initial = 4;
-gnu_filebuf buf(initial);
-
-// libstdc++/3045, in a vague way.
-void test01()
-{
-  bool test = true;
-  int k1;
-
-  // 1 normal
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-  {
-    std::cout.rdbuf(&buf);
-  }
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-
-  // 2 syncd off
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-  {
-    std::cout.rdbuf(&buf);
-    std::ios_base::sync_with_stdio(false); // make sure doesn't clobber buf
-  }
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-
-  // 3 callling init
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-  {
-    std::cout.rdbuf(&buf);
-    std::ios_base::Init make_sure_initialized;
-  }
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-}
+  template<>
+    struct char_traits<unsigned short>
+    {
+      typedef unsigned short 	char_type;
+      // Unsigned as wint_t in unsigned.
+      typedef unsigned long  	int_type;
+      typedef streampos 	pos_type;
+      typedef streamoff 	off_type;
+      typedef mbstate_t 	state_type;
+      
+      static void 
+      assign(char_type& __c1, const char_type& __c2)
+      { __c1 = __c2; }
+
+      static bool 
+      eq(const char_type& __c1, const char_type& __c2)
+      { return __c1 == __c2; }
+
+      static bool 
+      lt(const char_type& __c1, const char_type& __c2)
+      { return __c1 < __c2; }
+
+      static int 
+      compare(const char_type* __s1, const char_type* __s2, size_t __n)
+      { 
+	for (size_t __i = 0; __i < __n; ++__i)
+	  if (!eq(__s1[__i], __s2[__i]))
+	    return lt(__s1[__i], __s2[__i]) ? -1 : 1;
+	return 0; 
+      }
+
+      static size_t
+      length(const char_type* __s)
+      { 
+	const char_type* __p = __s; 
+	while (__p) 
+	  ++__p; 
+	return (__p - __s); 
+      }
+
+      static const char_type* 
+      find(const char_type* __s, size_t __n, const char_type& __a)
+      { 
+	for (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)
+	  if (*__p == __a) return __p;
+	return 0;
+      }
+
+      static char_type* 
+      move(char_type* __s1, const char_type* __s2, size_t __n)
+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }
+
+      static char_type* 
+      copy(char_type* __s1, const char_type* __s2, size_t __n)
+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }
+
+      static char_type* 
+      assign(char_type* __s, size_t __n, char_type __a)
+      { 
+	for (char_type* __p = __s; __p < __s + __n; ++__p) 
+	  assign(*__p, __a);
+        return __s; 
+      }
+
+      static char_type 
+      to_char_type(const int_type& __c)
+      { return char_type(); }
+
+      static int_type 
+      to_int_type(const char_type& __c) { return int_type(); }
+
+      static bool 
+      eq_int_type(const int_type& __c1, const int_type& __c2)
+      { return __c1 == __c2; }
+
+      static int_type 
+      eof() { return static_cast<int_type>(-1); }
+
+      static int_type 
+      not_eof(const int_type& __c)
+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }
+    };
+} // namespace std
 
 // Non-required instantiations don't have the required facets inbued,
 // by default, into the locale object.
 // See 27.4.4.1
-class gnu_ios: public std::basic_ios<char> { };
 
 void test02() 
 {
-  bool test = true;
-
-  // 01: Doesn't call basic_ios::init, which uses ctype<char_type>..
-  // This should be unambiguously correct.
-  try
-    {
-      gnu_ios gios;
-    }
-  catch(...)
-    { 
-      test = false; 
-    }
+  bool test __attribute__((unused)) = true;
 
   // 02: Calls basic_ios::init, which may call ctype<char_type>...
   try
@@ -132,80 +157,6 @@ void test02()
   VERIFY( test );
 }
 
-// libstdc++/3983
-void test03()
-{
-  using namespace std;
-  bool test = true;
-
-  // input streams
-  basic_istringstream<unsigned char> iss_uc;
-  unsigned char arr[6] = { 'a', 'b', 'c', 'd', 'e' };
-
-  // Sentry uses locale info, so have to try one formatted input.
-  try 
-    { 
-      int i;
-      iss_uc >> i;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-  
-  try 
-    { 
-      iss_uc >> arr;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-  
-  try 
-    { 
-      iss_uc >> ws;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
- 
-  try 
-    { 
-      basic_string<unsigned char> s_uc(arr);
-      iss_uc >> s_uc;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-
-  // output streams
-  basic_ostringstream<unsigned char> oss_uc;
-
-  try 
-    { 
-      bool b = true;
-      oss_uc << b;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-   
-  VERIFY( test );
-}
-
-// libstdc++/5268
-int test04()
-{
-  std::stringbuf b1;
-  std::cout.rdbuf( &b1 );
-  std::cout << "hello\n";
-  return 0;
-}
-
 #if !__GXX_WEAK__
 // Explicitly instantiate for systems with no COMDAT or weak support.
 template 
@@ -215,21 +166,10 @@ template
 template 
   unsigned short
   std::basic_string<unsigned short>::_Rep::_S_terminal;
-
-template 
-  std::basic_string<unsigned char>::size_type 
-  std::basic_string<unsigned char>::_Rep::_S_max_size;
-
-template 
-  unsigned char
-  std::basic_string<unsigned char>::_Rep::_S_terminal;
 #endif
 
 int main()
 {
-  test01();
   test02();
-  test03();
-  test04();
   return 0;
 }
