diff --git a/gcc/cp/typeck.c b/gcc/cp/typeck.c
index f3ba665..edb0e1d 100644
--- a/gcc/cp/typeck.c
+++ b/gcc/cp/typeck.c
@@ -4460,7 +4460,7 @@ build_unary_op (code, xarg, noconvert)
 	  return error_mark_node;
 
 	/* Forbid using -- on `bool'.  */
-	if (TREE_TYPE (arg) == boolean_type_node)
+	if (same_type_p (TREE_TYPE (arg), boolean_type_node))
 	  {
 	    if (code == POSTDECREMENT_EXPR || code == PREDECREMENT_EXPR)
 	      {
diff --git a/gcc/testsuite/g++.dg/expr/bool1.C b/gcc/testsuite/g++.dg/expr/bool1.C
new file mode 100644
index 0000000..bfb40e3
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/bool1.C
@@ -0,0 +1,21 @@
+// { dg-do run }
+// PR C++/29295
+// make sure that a typedef for a bool will have the
+//  the same results as a bool itself.
+
+extern "C" void abort();
+typedef bool my_bool;
+int main()
+{ 
+  my_bool b = false;
+  int i;
+
+  b++;
+  b++;
+  i = b;
+  if (i != 1)
+    abort ();
+  return 0;
+}
+
+
diff --git a/gcc/testsuite/g++.dg/expr/bool2.C b/gcc/testsuite/g++.dg/expr/bool2.C
new file mode 100644
index 0000000..39d93c0
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/bool2.C
@@ -0,0 +1,13 @@
+// { dg-do compile }
+// make sure that a typedef for a bool will have the
+//  the same results as a bool itself.
+
+
+typedef bool my_bool;
+int main()
+{
+  my_bool b = false;
+  b--; // { dg-error "" }
+  return 0;
+}
+
