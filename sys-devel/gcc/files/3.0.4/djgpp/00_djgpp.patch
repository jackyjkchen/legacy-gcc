diff --git a/configure b/configure
index e2286aa..06f1f4b 100755
--- a/configure
+++ b/configure
@@ -863,7 +863,7 @@ do
   IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
   for dir in $PATH; do
     test -z "$dir" && dir=.
-    if test -f $dir/$tmp; then
+    if test -x $dir/$tmp; then
       DEFAULT_YACC="$prog"
       break
     fi
@@ -882,7 +882,7 @@ do
   IFS="${IFS=   }"; save_ifs="$IFS"; IFS="${IFS}:"
   for dir in $PATH; do
     test -z "$dir" && dir=.
-    if test -f $dir/$tmp; then
+    if test -x $dir/$tmp; then
       DEFAULT_M4="$prog"
       break
     fi
@@ -901,7 +901,7 @@ do
   IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
   for dir in $PATH; do
     test -z "$dir" && dir=.
-    if test -f $dir/$tmp; then
+    if test -x $dir/$tmp; then
       DEFAULT_LEX="$prog"
       break
     fi
diff --git a/configure.in b/configure.in
index 816a93d..9114f93 100644
--- a/configure.in
+++ b/configure.in
@@ -1380,10 +1380,24 @@ if test -n "${with_gxx_include_dir}"; then
 fi
 if test x${gxx_include_dir} = x; then
   if test x${enable_version_specific_runtime_libs} = xyes; then
-    gxx_include_dir='${libsubdir}/include/g++'
+    case ${host} in 
+        i[3456]86-*-msdosdjgpp)
+		gxx_include_dir='${libsubdir}/include/gxx'
+		;;
+	*)
+		gxx_include_dir='${libsubdir}/include/g++'
+		;;
+    esac
   else
     . ${topsrcdir}/config.if
-    gxx_include_dir='${prefix}/include/${libstdcxx_incdir}'
+    case ${host} in
+        i[3456]86-*-msdosdjgpp)
+		gxx_include_dir='${prefix}/lang/cxx-v3'
+		;;
+	*)
+		gxx_include_dir='${prefix}/include/${libstdcxx_incdir}'
+		;;
+    esac
   fi
 else
   gxx_include_dir=${gxx_include_dir}
diff --git a/gcc/Makefile.in b/gcc/Makefile.in
index 5d0a1c9..932eb64 100644
--- a/gcc/Makefile.in
+++ b/gcc/Makefile.in
@@ -2189,20 +2189,6 @@ stmp-fixinc: fixinc.sh gsyslimits.h
 	  cp $(srcdir)/gsyslimits.h include/syslimits.h; \
 	fi; \
 	chmod a+r include/syslimits.h)
-# If $(SYSTEM_HEADER_DIR) is $(build_tooldir)/sys-include, and
-# that directory exists, then make sure that $(libsubdir) exists.
-# This is because cpp is compiled to find $(gcc_tooldir)/include via
-# $(libsubdir)/$(unlibsubdir), which will only work if $(libsubdir)
-# exists.
-# ??? Better would be to use -isystem $(build_tooldir)/sys-include,
-# but fixincludes does not take such arguments.
-	if [ "$(SYSTEM_HEADER_DIR)" = "$(build_tooldir)/sys-include" ] \
-	   && [ -d $(build_tooldir)/sys-include ]; then \
-	  if [ -d $(libdir) ] ; then true ; else mkdir $(DESTDIR)$(libdir) ; fi; \
-	  if [ -d $(libdir)/gcc-lib ] ; then true ; else mkdir $(DESTDIR)$(libdir)/gcc-lib; fi; \
-	  if [ -d $(libdir)/gcc-lib/$(target_alias) ] ; then true ; else mkdir $(DESTDIR)$(libdir)/gcc-lib/$(target_alias) ; fi; \
-	  if [ -d $(libdir)/gcc-lib/$(target_alias)/$(version) ] ; then true ; else mkdir $(DESTDIR)$(libdir)/gcc-lib/$(target_alias)/$(version) ; fi; \
-	else true; fi
 	$(STAMP) stmp-fixinc
 
 # Files related to the fixproto script.
@@ -2972,7 +2958,10 @@ VOL_FILES=`echo $(BACKEND) $(OBJS) $(C_OBJS) $(LIBCPP_OBJS) *.c *.h gen*`
 # Flags to pass to stage2 and later recursive makes.  Note that the
 # WARN_CFLAGS setting can't be to the expansion of GCC_WARN_CFLAGS in
 # the context of the stage_x rule.
+### For DJGPP we are editting version string to have no more than 1 dot
 STAGE2_FLAGS_TO_PASS = \
+	libsubdir=$(libsubdir) \
+	gcc_version=$(gcc_version) \
 	CFLAGS="$(BOOT_CFLAGS)" \
 	LDFLAGS="$(BOOT_LDFLAGS)" \
 	WARN_CFLAGS="\$$(GCC_WARN_CFLAGS)" \
@@ -2988,7 +2977,8 @@ STAGE2_FLAGS_TO_PASS = \
 # MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them
 # overrideable (for a bootstrap build stage1 also builds gcc.info).
 stage1_build:
-	$(MAKE) CC="$(CC)" libdir=$(libdir) LANGUAGES="$(BOOT_LANGUAGES)" \
+	$(MAKE) CC="$(CC)" libdir=$(libdir) libsubdir=$(libsubdir) \
+		gcc_version=$(gcc_version) LANGUAGES="$(BOOT_LANGUAGES)" \
 		CFLAGS="$(STAGE1_CFLAGS)" MAKEINFO="$(MAKEINFO)" \
 		MAKEINFOFLAGS="$(MAKEINFOFLAGS)"
 	$(STAMP) stage1_build
diff --git a/gcc/config.in b/gcc/config.in
index 6033b4f..71323a2 100644
--- a/gcc/config.in
+++ b/gcc/config.in
@@ -1,4 +1,4 @@
-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */
+/* config.in.  Generated automatically from configure.in by autoheader.  */
 
 /* Define if using alloca.c.  */
 #undef C_ALLOCA
diff --git a/gcc/config/i386/djgpp-x.djl b/gcc/config/i386/djgpp-x.djl
new file mode 100644
index 0000000..57263ab
--- /dev/null
+++ b/gcc/config/i386/djgpp-x.djl
@@ -0,0 +1,62 @@
+OUTPUT_FORMAT("coff-go32")
+ENTRY(start)
+SECTIONS
+{
+  .text  0x1000+SIZEOF_HEADERS : {
+    *(.text)
+    *(.text.*)
+    *(.gnu.linkonce.t*)
+    *(.const*)
+    *(.ro*)
+    *(.gnu.linkonce.r*)
+    etext  =  . ; PROVIDE(_etext = .) ;
+    . = ALIGN(0x200);
+  }
+  .data  ALIGN(0x200) : {
+    djgpp_first_ctor = . ;
+    *(SORT(.ctors.*))
+    *(.ctor)
+    *(.ctors)
+    djgpp_last_ctor = . ;
+    djgpp_first_dtor = . ;
+    *(SORT(.dtors.*))
+    *(.dtor)
+    *(.dtors)
+    djgpp_last_dtor = . ;
+    __environ = . ;
+    PROVIDE(_environ = .);
+    LONG(0)
+    *(.data)
+    *(.data.*)
+    *(.gcc_exc*)
+    ___EH_FRAME_BEGIN__ = . ;
+    *(.eh_fram*)
+    ___EH_FRAME_END__ = . ;
+    LONG(0);
+    *(.gnu.linkonce.d*)
+    edata  =  . ; PROVIDE(_edata = .) ;
+    . = ALIGN(0x200);
+  }
+  .bss  SIZEOF(.data) + ADDR(.data) :
+  { 					
+    *(.bss)
+    *(.bss.*)
+    *(.gnu.linkonce.b*)
+    *(COMMON)
+     end = . ; PROVIDE(_end = .) ;
+     . = ALIGN(0x200);
+  }
+  /* Stabs debugging sections.  */
+  .stab 0 : { *(.stab) }
+  .stabstr 0 : { *(.stabstr) }
+  /* DWARF 2 */
+  .debug_aranges  0 : { *(.debug_aranges) }
+  .debug_pubnames 0 : { *(.debug_pubnames) }
+  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
+  .debug_abbrev   0 : { *(.debug_abbrev) }
+  .debug_line     0 : { *(.debug_line) }
+  .debug_frame    0 : { *(.debug_frame) }
+  .debug_str      0 : { *(.debug_str) }
+  .debug_loc      0 : { *(.debug_loc) }
+  .debug_macinfo  0 : { *(.debug_macinfo) }
+}
diff --git a/gcc/config/i386/djgpp.h b/gcc/config/i386/djgpp.h
index e116a8b..d48c127 100644
--- a/gcc/config/i386/djgpp.h
+++ b/gcc/config/i386/djgpp.h
@@ -98,6 +98,11 @@ Boston, MA 02111-1307, USA.  */
 #undef STANDARD_INCLUDE_DIR
 #define STANDARD_INCLUDE_DIR "/dev/env/DJDIR/include/"
 
+/* Undef PREFIX_INCLUDE_DIR as we already have STANDARD_INCLUDE_DIR   
+   and we don't want $DJDIR/include to be scanned before compiler
+   private headers  */
+#undef PREFIX_INCLUDE_DIR
+
 /* Search for as.exe and ld.exe in DJGPP's binary directory. */ 
 #undef MD_EXEC_PREFIX
 #define MD_EXEC_PREFIX "/dev/env/DJDIR/bin/"
@@ -112,13 +117,14 @@ Boston, MA 02111-1307, USA.  */
         (((NAME)[0] >= 'A') && ((NAME)[0] <= 'z') && ((NAME)[1] == ':')))
 
 #undef CPP_PREDEFINES
-#define CPP_PREDEFINES "-D__MSDOS__ -D__GO32__ -Asystem=msdos"
+#define CPP_PREDEFINES "-D__MSDOS__ -D__GO32__ -D__DJGPP__=2 -D__unix__ -Asystem=msdos -Asystem=unix"
 
 /* Include <sys/version.h> so __DJGPP__ and __DJGPP_MINOR__ are defined.  */
 #undef CPP_SPEC
-#define CPP_SPEC "-remap %(cpp_cpu) %{posix:-D_POSIX_SOURCE} \
-  %{!ansi:%{!std=c*:%{!std=i*:-DMSDOS}}} %{!ansi:%{!std=c*:%{!std=i*:-DGO32}}} \
-  -imacros %s../include/sys/version.h"
+#define CPP_SPEC "%(cpp_cpu) %{posix:-D_POSIX_SOURCE} %{!ansi:%{!std=c*:%{!std=i*:-DMSDOS -DGO32 -DDJGPP=2 -Dunix}}}"
+
+/* Options to be used with cpp0 only (not with tradcpp0) */
+#define CPP0_ONLY_OPTIONS "-remap -imacros %sdjgpp.ver"
 
 /* We need to override link_command_spec in gcc.c so support -Tdjgpp.djl.
    This cannot be done in LINK_SPECS as that LINK_SPECS is processed
@@ -136,7 +142,7 @@ Boston, MA 02111-1307, USA.  */
 \t%{static:} %{L*} %D %o\
 \t%{!nostdlib:%{!nodefaultlibs:%G %L %G}}\
 \t%{!A:%{!nostdlib:%{!nostartfiles:%E}}}\
-\t-Tdjgpp.djl %{T*}}}}}}}\n\
+\t%{!T*:-Tdjgpp-x.djl} %{T*}}}}}}}\n\
 %{!c:%{!M:%{!MM:%{!E:%{!S:stubify %{v} %{o*:%*} %{!o*:a.out} }}}}}"
 
 /* Always just link in 'libc.a'.  */
@@ -263,9 +269,6 @@ dtor_section ()							\
 #undef PTRDIFF_TYPE
 #define PTRDIFF_TYPE "int"
 
-/* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */
-#define LIBSTDCXX "-lstdcxx"
-
 /* -mbnu210 is now ignored and obsolete. It was used to enable support for
    weak symbols, and .gnu.linkonce support.  */
 #undef MASK_BNU210
@@ -273,7 +276,7 @@ dtor_section ()							\
 
 #undef SUBTARGET_SWITCHES
 #define SUBTARGET_SWITCHES \
-  { "no-bnu210", -MASK_BNU210, "Ignored (obsolete)." }, \
+  { "no-bnu210", MASK_BNU210, "Ignored (obsolete)." }, \
   { "bnu210", MASK_BNU210, "Ignored (obsolete)." },
 
 /* Warn that -mbnu210 is now obsolete.  */
@@ -283,7 +286,7 @@ do \
   { \
     if (target_flags & MASK_BNU210) \
       {	\
-        warning ("-mbnu210 is ignored (option is obsolete)."); \
+        warning ("-mbnu210 or -mno-bnu210 is ignored (option is obsolete)."); \
       }	\
   } \
 while (0)
@@ -328,3 +331,15 @@ do {								\
 								\
   DECL_SECTION_NAME (DECL) = build_string (len, string);	\
 } while (0)
+
+
+/*  I'm not sure whether the follwing is correct. 
+    Setting DBX_REGISTER_NUMBER only as below breaks C++ exceptions
+    when -gdwarf-2 is being used. Maybe setting DWARF_FRAME_REGNUM
+    could help. I don't know  (AP, 2002/02/01) */	
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(n) \
+  ((write_symbols == DWARF2_DEBUG) ? svr4_dbx_register_map[n] : dbx_register_map[n])
+
+#undef DWARF_FRAME_REGNUM
+#define DWARF_FRAME_REGNUM(n) dbx_register_map[n]
diff --git a/gcc/config/i386/t-djgpp b/gcc/config/i386/t-djgpp
index 6160b7e..9d2f29f 100644
--- a/gcc/config/i386/t-djgpp
+++ b/gcc/config/i386/t-djgpp
@@ -1,2 +1,11 @@
 LIBGCC1 = libgcc1.null
 CROSS_LIBGCC1 = libgcc1.null
+
+# We should have djgpp.ver created before we can compile anything
+EXTRA_PASSES += djgpp.ver djgpp-x.djl
+
+djgpp.ver:
+	echo '#include <sys/version.h>' >djgpp.ver
+
+djgpp-x.djl:
+	cp -v $(srcdir)/config/i386/djgpp-x.djl djgpp-x.djl
diff --git a/gcc/config/i386/x-djgpp b/gcc/config/i386/x-djgpp
index a49a51c..a261189 100644
--- a/gcc/config/i386/x-djgpp
+++ b/gcc/config/i386/x-djgpp
@@ -5,3 +5,25 @@ SYSTEM_HEADER_DIR=$(DJDIR)/include
 LN = cp -p
 LN_S = cp -p
 
+#-----------------------------------------------------------------------------
+# The following code is copied from config/mh-djgpp as one may 
+# want to run make in gcc build directory instead of toplevel 
+# one (for example 'make restage2' or similar which are not available
+# from top level makefile and we should have the same substitutions 
+# in this case)           
+#-----------------------------------------------------------------------------
+
+# Shorten the target alias so when it is used to set 'libsubdir'
+# the name will work in both short and long filename environments.
+ifeq ($(findstring -pc-msdosdjgpp,$(target_alias)),-pc-msdosdjgpp)
+target_alias=djgpp
+endif
+
+# The version string must be modified to contain just one dot
+# because DOS filenames can only have one dot when long filenames
+# are not available.
+__version:=$(gcc_version)
+__version:=$(subst ., ,$(__version))
+ifeq ($(words $(__version)),3)
+gcc_version=$(word 1,$(__version)).$(word 2,$(__version))$(word 3,$(__version))
+endif
diff --git a/gcc/config/i386/xm-djgpp.h b/gcc/config/i386/xm-djgpp.h
index f993258..3cf010a 100644
--- a/gcc/config/i386/xm-djgpp.h
+++ b/gcc/config/i386/xm-djgpp.h
@@ -34,6 +34,12 @@ Boston, MA 02111-1307, USA.  */
 /* Allow test for DOS drive names.  */
 #define HAVE_DOS_BASED_FILE_SYSTEM
 
+/* We don't want cas sensitive comparission of file names when looking
+   whether we should use relative prefix (in gcc.c). This together with
+   corresponding change to gcc/gcc.c provides that  */
+#undef FN_STRCMP
+#define FN_STRCMP(a,b) strcasecmp(a,b)
+
 /* System dependant initialization for collect2
    to tell system() to act like Unix.  */
 #define COLLECT2_HOST_INITIALIZATION \
@@ -83,7 +89,6 @@ Boston, MA 02111-1307, USA.  */
     standard_exec_prefix = update_path (standard_exec_prefix, NULL); \
     standard_bindir_prefix = update_path (standard_bindir_prefix, NULL); \
     standard_startfile_prefix = update_path (standard_startfile_prefix, NULL); \
-    md_exec_prefix = update_path (md_exec_prefix, NULL); \
   } while (0)
 
 /* Canonicalize paths containing '/dev/env/', especially those in
@@ -111,3 +116,7 @@ Boston, MA 02111-1307, USA.  */
       return PATH; \
   } while (0)
 
+/* Rename libstdc++ to libstdcxx as the first name is not valid for DOS */
+#define LIBSTDCXX "-lstdcxx"
+#define LIBSTDCXX_PROFILE "-lstdcxx"
+
diff --git a/gcc/configure b/gcc/configure
index f84c89e..4bca863 100755
--- a/gcc/configure
+++ b/gcc/configure
@@ -107,7 +107,6 @@ program_suffix=NONE
 program_transform_name=s,x,x,
 silent=
 site=
-sitefile=
 srcdir=
 target=NONE
 verbose=
@@ -222,7 +221,6 @@ Configuration:
   --help                  print this message
   --no-create             do not create output files
   --quiet, --silent       do not print \`checking...' messages
-  --site-file=FILE        use FILE as the site file
   --version               print the version of autoconf that created configure
 Directory and file names:
   --prefix=PREFIX         install architecture-independent files in PREFIX
@@ -393,11 +391,6 @@ EOF
   -site=* | --site=* | --sit=*)
     site="$ac_optarg" ;;
 
-  -site-file | --site-file | --site-fil | --site-fi | --site-f)
-    ac_prev=sitefile ;;
-  -site-file=* | --site-file=* | --site-fil=* | --site-fi=* | --site-f=*)
-    sitefile="$ac_optarg" ;;
-
   -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
     ac_prev=srcdir ;;
   -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
@@ -563,16 +556,12 @@ fi
 srcdir=`echo "${srcdir}" | sed 's%\([^/]\)/*$%\1%'`
 
 # Prefer explicitly selected file to automatically selected ones.
-if test -z "$sitefile"; then
-  if test -z "$CONFIG_SITE"; then
-    if test "x$prefix" != xNONE; then
-      CONFIG_SITE="$prefix/share/config.site $prefix/etc/config.site"
-    else
-      CONFIG_SITE="$ac_default_prefix/share/config.site $ac_default_prefix/etc/config.site"
-    fi
+if test -z "$CONFIG_SITE"; then
+  if test "x$prefix" != xNONE; then
+    CONFIG_SITE="$prefix/share/config.site $prefix/etc/config.site"
+  else
+    CONFIG_SITE="$ac_default_prefix/share/config.site $ac_default_prefix/etc/config.site"
   fi
-else
-  CONFIG_SITE="$sitefile"
 fi
 for ac_site_file in $CONFIG_SITE; do
   if test -r "$ac_site_file"; then
@@ -1099,10 +1088,15 @@ else
   ac_cv_prog_CC="$CC" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_CC="gcc"
       break
     fi
@@ -1130,10 +1124,15 @@ else
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
   ac_prog_rejected=no
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       if test "$ac_dir/$ac_word" = "/usr/ucb/cc"; then
         ac_prog_rejected=yes
 	continue
@@ -1180,10 +1179,15 @@ else
   ac_cv_prog_CC="$CC" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_CC="cl"
       break
     fi
@@ -1647,10 +1651,15 @@ else
   ac_cv_prog_AWK="$AWK" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_AWK="$ac_prog"
       break
     fi
@@ -1776,10 +1785,15 @@ else
   ac_cv_prog_RANLIB="$RANLIB" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_RANLIB="ranlib"
       break
     fi
@@ -2310,10 +2324,15 @@ else
   ac_cv_prog_gnat="$gnat" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_gnat="yes"
       break
     fi
@@ -2342,10 +2361,15 @@ else
   ac_cv_prog_have_mktemp_command="$have_mktemp_command" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_have_mktemp_command="yes"
       break
     fi
@@ -2381,10 +2405,15 @@ else
   ac_cv_prog_MAKEINFO="$MAKEINFO" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_MAKEINFO="makeinfo"
       break
     fi
@@ -2460,10 +2489,15 @@ else
   ac_cv_prog_FLEX="$FLEX" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_FLEX="flex"
       break
     fi
@@ -2497,10 +2531,15 @@ else
   ac_cv_prog_BISON="$BISON" # Let the user override the test.
 else
   IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_test_flag="-f"
+  if ! test -z "$COMSPEC$ComSpec"; then
+    ac_test_flag="-x"
+    IFS="${PATH_SEPARATOR-;}"
+  fi
   ac_dummy="$PATH"
   for ac_dir in $ac_dummy; do
     test -z "$ac_dir" && ac_dir=.
-    if test -f $ac_dir/$ac_word; then
+    if test $ac_test_flag $ac_dir/$ac_word; then
       ac_cv_prog_BISON="bison"
       break
     fi
@@ -3084,6 +3123,19 @@ case "${host}" in
 *** UWIN may not be used as a host platform because
 *** linking with posix.dll is not allowed by the GNU GPL" 1>&2; exit 1; }
   ;;
+*djgpp*)
+  # For DJGPP we're using different default for gcc_gxx_include_dir
+  # We cannot set it where gcc_gxx_include_dir is initially determined as
+  # host is unknown there
+  if test x${gxx_include_dir} = x; then
+    if test x${enable_version_specific_runtime_libs} = xyes; then
+      gcc_gxx_include_dir='${libsubdir}/include/gxx'
+    else
+      topsrcdir=${srcdir}/.. . ${srcdir}/../config.if
+    gcc_gxx_include_dir="\$(libsubdir)/\$(unlibsubdir)/..\`echo \$(exec_prefix) | sed -e 's|^\$(prefix)||' -e 's|/[^/]*|/..|g'\`/lang/cxx-v3"
+    fi
+  fi
+;;
 esac
 echo $ac_n "checking for pid_t""... $ac_c" 1>&6
 echo "configure:3090: checking for pid_t" >&5
diff --git a/gcc/configure.in b/gcc/configure.in
index 9d0e768..9e96af6 100644
--- a/gcc/configure.in
+++ b/gcc/configure.in
@@ -579,6 +579,21 @@ case "${host}" in
 *** UWIN may not be used as a host platform because
 *** linking with posix.dll is not allowed by the GNU GPL])
   ;;
+*djgpp*)
+  # For DJGPP we're using different default for gcc_gxx_include_dir
+  # We cannot set it where gcc_gxx_include_dir is initially determined as
+  # host is unknown there
+  if test x${gxx_include_dir} = x; then
+    if test x${enable_version_specific_runtime_libs} = xyes; then
+      gcc_gxx_include_dir='${libsubdir}/include/gxx'
+    else
+      topsrcdir=${srcdir}/.. . ${srcdir}/../config.if
+changequote(<<, >>)dnl
+    gcc_gxx_include_dir="\$(libsubdir)/\$(unlibsubdir)/..\`echo \$(exec_prefix) | sed -e 's|^\$(prefix)||' -e 's|/[^/]*|/..|g'\`/lang/cxx-v3"
+changequote([, ])dnl
+    fi
+  fi
+;;
 esac
 AC_FUNC_VFORK
 AC_FUNC_MMAP_ANYWHERE
diff --git a/gcc/cp/lang-specs.h b/gcc/cp/lang-specs.h
index c8488f2..574a8fd 100644
--- a/gcc/cp/lang-specs.h
+++ b/gcc/cp/lang-specs.h
@@ -39,7 +39,8 @@ Boston, MA 02111-1307, USA.  */
        %{!Wno-deprecated:-D__GXX_DEPRECATED}\
        %{!fno-exceptions:-D__EXCEPTIONS}\
        %{!fno-new-abi:-D__GXX_ABI_VERSION=100}\
-       %{ansi:-D__STRICT_ANSI__ -trigraphs -$} %(cpp_options)}\
+       %{ansi:-D__STRICT_ANSI__ -trigraphs -$} %(cpp0_only_options)\
+       %(cpp_options)}\
      %{!E:%{!M:%{!MM:\
        %{save-temps:cpp0 -lang-c++ \
 		    %{!no-gcc:-D__GNUG__=%v1}\
@@ -47,9 +48,9 @@ Boston, MA 02111-1307, USA.  */
 		    %{!fno-exceptions:-D__EXCEPTIONS}\
 		    %{!fno-new-abi:-D__GXX_ABI_VERSION=100}\
 		    %{ansi:-D__STRICT_ANSI__ -trigraphs -$}\
-		    %(cpp_options) %b.ii \n}\
+		    %(cpp0_only_options) %(cpp_options) %b.ii \n}\
       cc1plus %{save-temps:-fpreprocessed %b.ii}\
-              %{!save-temps:%(cpp_options)\
+              %{!save-temps:%(cpp0_only_options) %(cpp_options)\
 			    %{!no-gcc:-D__GNUG__=%v1} \
        			    %{!Wno-deprecated:-D__GXX_DEPRECATED}\
 			    %{!fno-exceptions:-D__EXCEPTIONS}\
diff --git a/gcc/cppfiles.c b/gcc/cppfiles.c
index 8a72265..e3ed940 100644
--- a/gcc/cppfiles.c
+++ b/gcc/cppfiles.c
@@ -402,6 +402,12 @@ read_include_file (pfile, inc)
 	{
 	  buf = (U_CHAR *) xmalloc (size);
 	  offset = 0;
+#ifdef __DJGPP__
+          /* For DJGPP redirected input is opened with O_TEXT by default
+             change it to O_BINARY  */ 
+	  if (inc->fd==0)
+            setmode (inc->fd, O_BINARY);
+#endif
 	  while (offset < size)
 	    {
 	      count = read (inc->fd, buf + offset, size - offset);
@@ -414,6 +420,14 @@ read_include_file (pfile, inc)
 		}
 	      offset += count;
 	    }
+#ifdef __DJGPP__
+	  /* For DOS we should handle DOS EOF character (0x1A, ^Z)  */
+	  do {
+	    U_CHAR * dos_eof = memchr (buf, 0x1A, size);
+	    if (dos_eof) size =	dos_eof - buf;
+          } while (0);
+          inc->st.st_size = size;
+#endif
 	}
     }
   else if (S_ISBLK (inc->st.st_mode))
diff --git a/gcc/f/Make-lang.in b/gcc/f/Make-lang.in
index d23f4a7..8b57ddd 100644
--- a/gcc/f/Make-lang.in
+++ b/gcc/f/Make-lang.in
@@ -230,7 +230,7 @@ f/g77.dvi: $(srcdir)/f/g77.texi $(srcdir)/f/bugs.texi \
 INTDOC_DEPS = $(srcdir)/f/intdoc.c $(srcdir)/f/intrin.h $(srcdir)/f/intrin.def
 
 $(srcdir)/f/intdoc.texi: $(INTDOC_DEPS) $(srcdir)/f/intdoc.in
-	$(MAKE) f/intdoc$(build_exeext)
+	$(MAKE) "HOST_CC=$(HOST_CC)" f/intdoc$(build_exeext)
 	f/intdoc$(build_exeext) > $(srcdir)/f/intdoc.texi
 
 f/intdoc$(build_exeext): $(INTDOC_DEPS) f/intdoc.h0 hconfig.h system.h
diff --git a/gcc/fixinc/tests/base/x11/Intrinsic.h b/gcc/fixinc/tests/base/x11/Intrinsic.h
new file mode 100644
index 0000000..989ce06
--- /dev/null
+++ b/gcc/fixinc/tests/base/x11/Intrinsic.h
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/X11/Intrinsic.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( ARM_NORCROFT_HINT_CHECK )
+p_type mumble;
+#endif  /* ARM_NORCROFT_HINT_CHECK */
diff --git a/gcc/fixinc/tests/base/x11/ShellP.h b/gcc/fixinc/tests/base/x11/ShellP.h
new file mode 100644
index 0000000..45e8e1f
--- /dev/null
+++ b/gcc/fixinc/tests/base/x11/ShellP.h
@@ -0,0 +1,21 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/X11/ShellP.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( X11_CLASS_CHECK )
+struct {
+#ifdef __cplusplus
+   char *c_class;
+#else
+   char *class;
+#endif
+} mumble;
+
+#endif  /* X11_CLASS_CHECK */
diff --git a/gcc/fixinc/tests/base/x11/Xmu.h b/gcc/fixinc/tests/base/x11/Xmu.h
new file mode 100644
index 0000000..5fac5db
--- /dev/null
+++ b/gcc/fixinc/tests/base/x11/Xmu.h
@@ -0,0 +1,16 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/X11/Xmu.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( X11_SPRINTF_CHECK )
+#ifndef __STDC__
+extern char *	sprintf();
+#endif /* !defined __STDC__ */
+#endif  /* X11_SPRINTF_CHECK */
diff --git a/gcc/gcc.c b/gcc/gcc.c
index 5c73af4..050ffc5 100644
--- a/gcc/gcc.c
+++ b/gcc/gcc.c
@@ -94,6 +94,10 @@ static char dir_separator_str[] = { DIR_SEPARATOR, 0 };
 #define kill(p,s) raise(s)
 #endif
 
+#ifndef FN_STRCMP
+#define FN_STRCMP(a,b) strcmp(a,b)
+#endif
+
 /* If a stage of compilation returns an exit status >= 1,
    compilation of that file ceases.  */
 
@@ -566,6 +570,11 @@ proper position among the other output files.  */
 # endif
 #endif
 
+/* This is for preprocessor options which don't work with tradcpp0  */
+#ifndef CPP0_ONLY_OPTIONS
+#define CPP0_ONLY_OPTIONS ""
+#endif
+
 static const char *cpp_spec = CPP_SPEC;
 static const char *cpp_predefines = CPP_PREDEFINES;
 static const char *cc1_spec = CC1_SPEC;
@@ -582,6 +591,7 @@ static const char *switches_need_spaces = SWITCHES_NEED_SPACES;
 static const char *linker_name_spec = LINKER_NAME;
 static const char *link_command_spec = LINK_COMMAND_SPEC;
 static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;
+static const char *cpp0_only_options = CPP0_ONLY_OPTIONS;
 
 /* Standard options to cpp, cc1, and as, to reduce duplication in specs.
    There should be no need to override these in target dependent files,
@@ -590,7 +600,8 @@ static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;
    appropriate -B options.  */
 
 static const char *trad_capable_cpp =
-"%{traditional|ftraditional|traditional-cpp:trad}cpp0";
+"%{traditional|ftraditional|traditional-cpp:trad}cpp0\
+ %{!traditional:%{!ftraditional:%{!traditional-cpp:%(cpp0_only_options)}}}";
 
 static const char *cpp_options =
 "%{C:%{!E:%eGNU C does not support -C without using -E}}\
@@ -759,7 +770,8 @@ static struct compiler default_compilers[] =
 		tradcpp0 -lang-c %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.i} |\n\
 		    cc1 -fpreprocessed %{!pipe:%g.i} %(cc1_options)}\
 	    %{!traditional:%{!ftraditional:%{!traditional-cpp:\
-		cc1 -lang-c %{ansi:-std=c89} %(cpp_options) %(cc1_options)}}}}\
+		cc1 -lang-c %{ansi:-std=c89} %(cpp0_only_options) %(cpp_options) \
+		    %(cc1_options)}}}}\
         %{!fsyntax-only:%(invoke_as)}}}}", 0},
   {"-",
    "%{!E:%e-E required when input is from standard input}\
@@ -1173,14 +1185,20 @@ static const char *gcc_exec_prefix;
 #endif
 
 static const char *standard_exec_prefix = STANDARD_EXEC_PREFIX;
+#ifndef __DJGPP__
 static const char *standard_exec_prefix_1 = "/usr/lib/gcc/";
+#endif
 static const char *md_exec_prefix = MD_EXEC_PREFIX;
 
 static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;
 static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;
 static const char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
+
+#ifndef __DJGPP__
+/* These prefixes are useless for DJGPP  */
 static const char *standard_startfile_prefix_1 = "/lib/";
 static const char *standard_startfile_prefix_2 = "/usr/lib/";
+#endif
 
 static const char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;
 static const char *tooldir_prefix;
@@ -1224,6 +1242,7 @@ static struct spec_list static_specs[] =
   INIT_STATIC_SPEC ("cpp",			&cpp_spec),
   INIT_STATIC_SPEC ("cpp_options",		&cpp_options),
   INIT_STATIC_SPEC ("trad_capable_cpp",		&trad_capable_cpp),
+  INIT_STATIC_SPEC ("cpp0_only_options", 	&cpp0_only_options),
   INIT_STATIC_SPEC ("cc1",			&cc1_spec),
   INIT_STATIC_SPEC ("cc1_options",		&cc1_options),
   INIT_STATIC_SPEC ("cc1plus",			&cc1plus_spec),
@@ -2126,7 +2145,7 @@ split_directories (name, ptr_num_dirs)
   int num_dirs = 0;
   char **dirs;
   const char *p, *q;
-  int ch;
+  int ch, i;
 
   /* Count the number of directories.  Special case MSDOS disk names as part
      of the initial directory.  */
@@ -2182,6 +2201,16 @@ split_directories (name, ptr_num_dirs)
   if (ptr_num_dirs)
     *ptr_num_dirs = num_dirs;
 
+#ifdef DIR_SEPARATOR_2
+  /* If we have 2 directory separators then convert all to the
+     primary one after splitting path  */
+  for (i=0; i<num_dirs; i++)
+    {
+        char * s = strchr (dirs[i],DIR_SEPARATOR_2);
+	if (s) *s = DIR_SEPARATOR;
+    }
+#endif
+
   return dirs;
 }
 
@@ -2290,7 +2319,7 @@ make_relative_prefix (progname, bin_prefix, prefix)
     {
       for (i = 0; i < bin_num; i++)
 	{
-	  if (strcmp (prog_dirs[i], bin_dirs[i]) != 0)
+	  if (FN_STRCMP (prog_dirs[i], bin_dirs[i]) != 0)
 	    break;
 	}
 
@@ -2310,7 +2339,7 @@ make_relative_prefix (progname, bin_prefix, prefix)
   n = (prefix_num < bin_num) ? prefix_num : bin_num;
   for (common = 0; common < n; common++)
     {
-      if (strcmp (bin_dirs[common], prefix_dirs[common]) != 0)
+      if (FN_STRCMP (bin_dirs[common], prefix_dirs[common]) != 0)
 	break;
     }
 
@@ -3583,14 +3612,18 @@ process_command (argc, argv)
 	      PREFIX_PRIORITY_LAST, 1, warn_std_ptr);
   add_prefix (&exec_prefixes, standard_exec_prefix, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, warn_std_ptr);
+#ifndef __DJGPP__
   add_prefix (&exec_prefixes, standard_exec_prefix_1, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 2, warn_std_ptr);
+#endif
 #endif
 
   add_prefix (&startfile_prefixes, standard_exec_prefix, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 1, warn_std_ptr);
+#ifndef __DJGPP__
   add_prefix (&startfile_prefixes, standard_exec_prefix_1, "BINUTILS",
 	      PREFIX_PRIORITY_LAST, 1, warn_std_ptr);
+#endif
 
   tooldir_prefix = concat (tooldir_base_prefix, spec_machine,
 			   dir_separator_str, NULL_PTR);
@@ -5708,11 +5741,12 @@ main (argc, argv)
 			      standard_startfile_prefix, NULL_PTR),
 		      NULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);
 	}
-
+#ifndef __DJGPP__
       add_prefix (&startfile_prefixes, standard_startfile_prefix_1,
 		  "BINUTILS", PREFIX_PRIORITY_LAST, 0, NULL_PTR);
       add_prefix (&startfile_prefixes, standard_startfile_prefix_2,
 		  "BINUTILS", PREFIX_PRIORITY_LAST, 0, NULL_PTR);
+#endif
 #if 0 /* Can cause surprises, and one can use -B./ instead.  */
       add_prefix (&startfile_prefixes, "./", NULL_PTR,
 		  PREFIX_PRIORITY_LAST, 1, NULL_PTR);
diff --git a/gcc/protoize.c b/gcc/protoize.c
index aa03edf..c44abad 100644
--- a/gcc/protoize.c
+++ b/gcc/protoize.c
@@ -4343,7 +4343,7 @@ edit_file (hp)
 #ifdef __MSDOS__
       /* MSDOS filenames are restricted to 8.3 format, so we save `foo.c'
          as `foo.<save_suffix>'.  */
-      new_filename[(strlen (convert_filename) - 1] = '\0';
+      new_filename[strlen (convert_filename) - 1] = '\0';
 #endif
       strcat (new_filename, save_suffix);
 
diff --git a/gcc/sdbout.c b/gcc/sdbout.c
index 649bc0a..e51ac66 100644
--- a/gcc/sdbout.c
+++ b/gcc/sdbout.c
@@ -1229,7 +1229,10 @@ sdbout_one_type (type)
 		const char *name;
 
 		CONTIN;
-		name = IDENTIFIER_POINTER (DECL_NAME (tem));
+		if (DECL_ASSEMBLER_NAME_SET_P (tem))
+		  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (tem));
+		else
+		  name = IDENTIFIER_POINTER (DECL_NAME (tem));
 		PUT_SDB_DEF (name);
 		if (DECL_BIT_FIELD_TYPE (tem))
 		  {
diff --git a/libf2c/libI77/configure b/libf2c/libI77/configure
index ec7988e..0318844 100755
--- a/libf2c/libI77/configure
+++ b/libf2c/libI77/configure
@@ -1515,6 +1515,9 @@ echo "configure:1515: checking NON_ANSI_RW_MODES" >&5
 cat > conftest.$ac_ext <<EOF
 #line 1517 "configure"
 #include "confdefs.h"
+#ifdef __DJGPP__
+  no
+#else
 #ifdef unix
   yes
 #endif
@@ -1524,6 +1527,7 @@ cat > conftest.$ac_ext <<EOF
 #ifdef __unix__
   yes
 #endif
+#endif
 
 EOF
 if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
diff --git a/libf2c/libI77/configure.in b/libf2c/libI77/configure.in
index 20f2628..af79f6c 100644
--- a/libf2c/libI77/configure.in
+++ b/libf2c/libI77/configure.in
@@ -170,7 +170,10 @@ fi
 # define NON_ANSI_RW_MODES on unix (can't hurt)
 AC_MSG_CHECKING(NON_ANSI_RW_MODES)
 AC_EGREP_CPP(yes,
-[#ifdef unix
+[#ifdef __DJGPP__
+  no
+#else
+#ifdef unix
   yes
 #endif
 #ifdef __unix
@@ -179,6 +182,7 @@ AC_EGREP_CPP(yes,
 #ifdef __unix__
   yes
 #endif
+#endif
 ], is_unix=yes, is_unix=no)
 # NON_ANSI_RW_MODES shouldn't be necessary on cygwin for binary mounts.
 if test $g77_cv_sys_cygwin32 = yes || test $g77_cv_sys_mingw32 = yes; then
diff --git a/libobjc/threads b/libobjc/threads
new file mode 100644
index 0000000..8a43683
--- /dev/null
+++ b/libobjc/threads
@@ -0,0 +1,377 @@
+This file describes in little detail the modifications to the
+Objective-C runtime needed to make it thread safe. 
+
+First off, kudos to Galen Hunt who is the author of this great work.
+
+If you have an comments or just want to know where to
+send me money to express your undying gratitude for threading the
+Objective-C runtime you can reach Galen at:
+
+	gchunt@cs.rochester.edu
+
+Any questions, comments, bug reports, etc. should send email either to the
+GCC bug account or to:
+
+	Scott Christley <scottc@net-community.com>
+
+* Sarray Threading:
+
+The most critical component of the Objective-C runtime is the sparse array
+structure (sarray).  Sarrays store object selectors and implementations.  
+Following in the tradition of the Objective-C runtime, my threading
+support assumes that fast message dispatching is far more important
+than *ANY* and *ALL* other operations.  The message dispatching thus
+uses *NO* locks on any kind.  In fact, if you look in sarray.h, you
+will notice that the message dispatching has not been modified.
+Instead, I have modified the sarray management functions so that all
+updates to the sarray data structure can be made in parallel will
+message dispatching.  
+
+To support concurrent message dispatching, no dynamically allocated
+sarray data structures are freed while more than one thread is
+operational.  Sarray data structures that are no longer in use are
+kept in a linked list of garbage and are released whenever the program
+is operating with a single thread.  The programmer can also flush the 
+garbage list by calling sarray_remove_garbage when the programmer can
+ensure that no message dispatching is taking place concurrently.  The
+amount of un-reclaimed sarray garbage should normally be extremely
+small in a real program as sarray structures are freed only when using
+the "poseAs" functionality and early in program initialization, which
+normally occurs while the program is single threaded.
+
+******************************************************************************
+* Static Variables:
+
+The following variables are either statically or globally defined. This list 
+does not include variables which are internal to implementation dependent 
+versions of thread-*.c.
+
+The following threading designations are used:
+	SAFE   : Implicitly thread safe.
+	SINGLE : Must only be used in single thread mode.
+	MUTEX  : Protected by single global mutex objc_runtime_mutex.
+	UNUSED : Not used in the runtime.
+
+Variable Name:			Usage:  Defined:	Also used in:
+===========================	======	============	=====================
+__objc_class_hash		MUTEX	class.c
+__objc_class_links_resolved	UNUSED	class.c		runtime.h
+__objc_class_number		MUTEX	class.c
+__objc_dangling_categories	UNUSED	init.c
+__objc_module_list		MUTEX	init.c
+__objc_selector_array		MUTEX	selector.c
+__objc_selector_hash		MUTEX	selector.c
+__objc_selector_max_index	MUTEX	selector.c	sendmsg.c runtime.h
+__objc_selector_names		MUTEX	selector.c
+__objc_thread_exit_status	SAFE	thread.c
+__objc_uninstalled_dtable	MUTEX	sendmsg.c	selector.c
+_objc_load_callback		SAFE	init.c		objc-api.h
+_objc_lookup_class		SAFE	class.c		objc-api.h
+_objc_object_alloc		SINGLE	objects.c	objc-api.h
+_objc_object_copy		SINGLE	objects.c	objc-api.h
+_objc_object_dispose		SINGLE	objects.c	objc-api.h
+frwd_sel			SAFE2	sendmsg.c
+idxsize				MUTEX	sarray.c	sendmsg.c sarray.h
+initialize_sel			SAFE2	sendmsg.c
+narrays				MUTEX	sarray.c	sendmsg.c sarray.h
+nbuckets			MUTEX	sarray.c	sendmsg.c sarray.h
+nindices			MUTEX	sarray.c	sarray.h
+previous_constructors		SAFE1	init.c
+proto_class			SAFE1	init.c
+unclaimed_categories		MUTEX	init.c
+unclaimed_proto_list		MUTEX	init.c
+uninitialized_statics		MUTEX	init.c
+
+Notes:
+1) Initialized once in unithread mode.
+2) Initialized value will always be same, guaranteed by lock on selector 
+   hash table.
+
+
+******************************************************************************
+* Frontend/Backend design:
+
+The design of the Objective-C runtime thread and mutex functions utilizes a
+frontend/backend implementation.
+
+The frontend, as characterized by the files thr.h and thr.c, is a set
+of platform independent structures and functions which represent the
+user interface.  Objective-C programs should use these structures and
+functions for their thread and mutex work if they wish to maintain a
+high degree of portability across platforms.
+
+The backend is composed of a file with the necessary code to map the ObjC
+thread and mutex to a platform specific implementation.  For example, the
+file thr-solaris.c contains the implementation for Solaris.
+
+If you are compiling libobjc as part of GCC, the thr-objc.c backend is
+always used; this backend uses GCC's gthread code.  The thread system
+is automatically configured when GCC is configured.  Important: make
+sure you configure GCC using `--enable-threads' if you want threads !
+  
+If you want to compile libobjc standalone, then you would need to
+modify the configure.in and makefiles for it; and you need to pick an
+appropriate backend file for the target platform; you make this choice
+by assigning the OBJC_THREAD_FILE make variable to the basename of the
+backend file.  For example, OBJC_THREAD_FILE=thr-posix would indicate
+that the generic posix backend file, thr-posix.c, should be compiled
+with the ObjC runtime library.  If your platform does not support
+threads then you should specify the OBJC_THREAD_FILE=thr-single
+backend file to compile the ObjC runtime library without thread or
+mutex support; note that programs which rely upon the ObjC thread and
+mutex functions will compile and link correctly but attempting to
+create a thread or mutex will result in an error.
+  
+It is questionable whether it is really necessary to have both a
+frontend and backend function for all available functionality.  On the
+one hand, it provides a clear, consistent differentiation between what
+is public and what is private with the downside of having the overhead
+of multiple functions calls.  For example, the function to have a
+thread yield the processor is objc_thread_yield; in the current
+implementation this produces a function call set:
+
+objc_thread_yield()  ->  __objc_thread_yield()  ->  system yield function
+
+This has two extra function calls over calling the platform specific function
+explicitly, but the issue is whether only the overhead of a single function
+is necessary.
+
+objc_thread_yield()  ->  system yield function
+
+This breaks the public/private dichotomy between the frontend/backend
+for the sake of efficiency.  It is possible to just use a preprocessor
+define so as to eliminate the extra function call:
+
+#define objc_thread_yield() __objc_thread_yield()
+
+This has the undesirable effect that if objc_thread_yield is actually
+turned into a function based upon future need; then ObjC programs which
+access the thread functions would need to be recompiled versus just
+being relinked.
+ 
+******************************************************************************
+* Threads:
+
+The thread system attempts to create multiple threads using whatever
+operating system or library thread support is available.  It does
+assume that all system functions are thread safe.  Notably this means
+that the system implementation of malloc and free must be thread safe.
+If a system has multiple processors, the threads are configured for
+full parallel processing.
+
+* Backend initialization functions
+
+__objc_init_thread_system(void), int
+	Initialize the thread subsystem.  Called once by __objc_exec_class.
+	Return -1 if error otherwise return 0.
+
+__objc_close_thread_system(void), int
+	Closes the thread subsystem, not currently guaranteed to be called.
+	Return -1 if error otherwise return 0.
+
+*****
+* Frontend thread functions
+* User programs should use these functions.
+
+objc_thread_detach(SEL selector, id object, id argument), objc_thread_t
+	Creates and detaches a new thread.  The new thread starts by
+	sending the given selector with a single argument to the
+	given object.
+
+objc_thread_set_priority(int priority), int
+	Sets a thread's relative priority within the program.  Valid
+	options are:
+	
+	OBJC_THREAD_INTERACTIVE_PRIORITY
+	OBJC_THREAD_BACKGROUND_PRIORITY
+	OBJC_THREAD_LOW_PRIORITY
+
+objc_thread_get_priority(void), int
+	Query a thread's priority.
+
+objc_thread_yield(void), void
+	Yields processor to another thread with equal or higher
+	priority.  It is up to the system scheduler to determine if
+	the processor is taken or not.
+
+objc_thread_exit(void), int
+	Terminates a thread.  If this is the last thread executing
+	then the program will terminate.
+
+objc_thread_id(void), int
+	Returns the current thread's id.
+
+objc_thread_set_data(void *value), int
+	Set a pointer to the thread's local storage.  Local storage is
+	thread specific.
+
+objc_thread_get_data(void), void *
+	Returns the pointer to the thread's local storage.
+
+*****
+* Backend thread functions
+* User programs should *NOT* directly call these functions.
+
+__objc_thread_detach(void (*func)(void *arg), void *arg), objc_thread_t
+	Spawns a new thread executing func, called by objc_thread_detach.
+	Return NULL if error otherwise return thread id.
+
+__objc_thread_set_priority(int priority), int
+	Set the thread's priority, called by objc_thread_set_priority.
+	Return -1 if error otherwise return 0.
+
+__objc_thread_get_priority(void), int
+	Query a thread's priority, called by objc_thread_get_priority.
+	Return -1 if error otherwise return the priority.
+
+__objc_thread_yield(void), void
+	Yields the processor, called by objc_thread_yield.
+
+__objc_thread_exit(void), int
+	Terminates the thread, called by objc_thread_exit.
+	Return -1 if error otherwise function does not return.
+
+__objc_thread_id(void), objc_thread_t
+	Returns the current thread's id, called by objc_thread_id.
+	Return -1 if error otherwise return thread id.
+
+__objc_thread_set_data(void *value), int
+	Set pointer for thread local storage, called by objc_thread_set_data.
+	Returns -1 if error otherwise return 0.
+
+__objc_thread_get_data(void), void *
+	Returns the pointer to the thread's local storage.
+	Returns NULL if error, called by objc_thread_get_data.
+
+
+******************************************************************************
+* Mutexes:
+
+Mutexes can be locked recursively.  Each locked mutex remembers
+its owner (by thread id) and how many times it has been locked.  The
+last unlock on a mutex removes the system lock and allows other
+threads to access the mutex.
+
+*****
+* Frontend mutex functions
+* User programs should use these functions.
+
+objc_mutex_allocate(void), objc_mutex_t
+	Allocates a new mutex.  Mutex is initially unlocked.
+	Return NULL if error otherwise return mutex pointer.
+
+objc_mutex_deallocate(objc_mutex_t mutex), int
+	Free a mutex.  Before freeing the mutex, makes sure that no
+	one else is using it.
+	Return -1 if error otherwise return 0.
+
+objc_mutex_lock(objc_mutex_t mutex), int
+	Locks a mutex.  As mentioned earlier, the same thread may call
+	this routine repeatedly.
+	Return -1 if error otherwise return 0.
+	
+objc_mutex_trylock(objc_mutex_t mutex), int
+	Attempts to lock a mutex.  If lock on mutex can be acquired 
+	then function operates exactly as objc_mutex_lock.
+	Return -1 if failed to acquire lock otherwise return 0.
+
+objc_mutex_unlock(objc_mutex_t mutex), int
+	Unlocks the mutex by one level.  Other threads may not acquire
+	the mutex until this thread has released all locks on it.
+	Return -1 if error otherwise return 0.
+
+*****
+* Backend mutex functions
+* User programs should *NOT* directly call these functions.
+
+__objc_mutex_allocate(objc_mutex_t mutex), int
+	Allocates a new mutex, called by objc_mutex_allocate.
+	Return -1 if error otherwise return 0.
+
+__objc_mutex_deallocate(objc_mutex_t mutex), int
+	Free a mutex, called by objc_mutex_deallocate.
+	Return -1 if error otherwise return 0.
+
+__objc_mutex_lock(objc_mutex_t mutex), int
+	Locks a mutex, called by objc_mutex_lock.
+	Return -1 if error otherwise return 0.
+	
+__objc_mutex_trylock(objc_mutex_t mutex), int
+	Attempts to lock a mutex, called by objc_mutex_trylock.
+	Return -1 if failed to acquire lock or error otherwise return 0.
+
+__objc_mutex_unlock(objc_mutex_t mutex), int
+	Unlocks the mutex, called by objc_mutex_unlock.
+	Return -1 if error otherwise return 0.
+
+******************************************************************************
+* Condition Mutexes:
+
+Mutexes can be locked recursively.  Each locked mutex remembers
+its owner (by thread id) and how many times it has been locked.  The
+last unlock on a mutex removes the system lock and allows other
+threads to access the mutex.
+
+*
+* Frontend condition mutex functions
+* User programs should use these functions.
+*
+
+objc_condition_allocate(void), objc_condition_t 
+	Allocate a condition mutex.
+	Return NULL if error otherwise return condition pointer.
+
+objc_condition_deallocate(objc_condition_t condition), int
+	Deallocate a condition. Note that this includes an implicit
+	condition_broadcast to insure that waiting threads have the 
+	opportunity to wake.  It is legal to dealloc a condition only
+	if no other thread is/will be using it. Does NOT check for
+	other threads waiting but just wakes them up.
+	Return -1 if error otherwise return 0.
+
+objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex), int
+	Wait on the condition unlocking the mutex until objc_condition_signal()
+	or objc_condition_broadcast() are called for the same condition. The
+	given mutex *must* have the depth 1 so that it can be unlocked
+	here, for someone else can lock it and signal/broadcast the condition.
+	The mutex is used to lock access to the shared data that make up the
+	"condition" predicate.
+	Return -1 if error otherwise return 0.
+	
+objc_condition_broadcast(objc_condition_t condition), int
+	Wake up all threads waiting on this condition. It is recommended that 
+	the called would lock the same mutex as the threads in
+	objc_condition_wait before changing the "condition predicate"
+	and make this call and unlock it right away after this call.
+	Return -1 if error otherwise return 0.
+
+objc_condition_signal(objc_condition_t condition), int
+	Wake up one thread waiting on this condition.
+	Return -1 if error otherwise return 0.
+
+*
+* Backend condition mutex functions
+* User programs should *NOT* directly call these functions.
+*
+
+__objc_condition_allocate(objc_condition_t condition), int
+	Allocate a condition mutex, called by objc_condition_allocate.
+	Return -1 if error otherwise return 0.
+
+__objc_condition_deallocate(objc_condition_t condition), int
+	Deallocate a condition, called by objc_condition_deallocate.
+	Return -1 if error otherwise return 0.
+
+__objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex), int
+	Wait on the condition, called by objc_condition_wait.
+	Return -1 if error otherwise return 0 when condition is met.
+	
+__objc_condition_broadcast(objc_condition_t condition), int
+	Wake up all threads waiting on this condition.
+	Called by objc_condition_broadcast.
+	Return -1 if error otherwise return 0.
+
+__objc_condition_signal(objc_condition_t condition), int
+	Wake up one thread waiting on this condition.
+	Called by objc_condition_signal.
+	Return -1 if error otherwise return 0.
diff --git a/libstdc++-v3/acinclude.m4 b/libstdc++-v3/acinclude.m4
index 4988be1..bc4d05a 100644
--- a/libstdc++-v3/acinclude.m4
+++ b/libstdc++-v3/acinclude.m4
@@ -1603,7 +1603,14 @@ if test $version_specific_libs = yes; then
   gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\"\([^\"]*\)\".*/\1/'`
   gcc_version=`echo ${gcc_version_full} | sed -e 's/\([^ ]*\) .*/\1/'`
   if test $gxx_include_dir = no; then
-    gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++
+  case ${build_alias} in
+      *djgpp*)
+  	gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/gxx
+  	;;
+      *)
+  	gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++
+  	;;
+  esac
   fi
   glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'
   glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'
@@ -1613,7 +1620,14 @@ fi
 # Default case for install directory for include files.
 if test $version_specific_libs = no &&
    test $gxx_include_dir = no; then
-  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}
+  case ${build_alias} in
+      *djgpp*)
+          gxx_include_dir='$(prefix)'/lang/cxx-${libstdcxx_interface}
+          ;;
+      *)
+	  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}
+	  ;;
+  esac
 fi
 
 # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir
diff --git a/libstdc++-v3/aclocal.m4 b/libstdc++-v3/aclocal.m4
index 9312187..bce476b 100644
--- a/libstdc++-v3/aclocal.m4
+++ b/libstdc++-v3/aclocal.m4
@@ -1,6 +1,6 @@
-dnl aclocal.m4 generated automatically by aclocal 1.4-p5
+dnl aclocal.m4 generated automatically by aclocal 1.4
 
-dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
+dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.
 dnl This file is free software; the Free Software Foundation
 dnl gives unlimited permission to copy and/or distribute it,
 dnl with or without modifications, as long as this notice is preserved.
@@ -1615,7 +1615,14 @@ if test $version_specific_libs = yes; then
   gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\"\([^\"]*\)\".*/\1/'`
   gcc_version=`echo ${gcc_version_full} | sed -e 's/\([^ ]*\) .*/\1/'`
   if test $gxx_include_dir = no; then
-    gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++
+  case ${build_alias} in
+      *djgpp*)
+  	gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/gxx
+  	;;
+      *)
+  	gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++
+  	;;
+  esac
   fi
   glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'
   glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'
@@ -1625,7 +1632,14 @@ fi
 # Default case for install directory for include files.
 if test $version_specific_libs = no &&
    test $gxx_include_dir = no; then
-  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}
+  case ${build_alias} in
+      *djgpp*)
+          gxx_include_dir='$(prefix)'/lang/cxx-${libstdcxx_interface}
+          ;;
+      *)
+	  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}
+	  ;;
+  esac
 fi
 
 # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir
@@ -1854,7 +1868,7 @@ AC_DEFUN([AC_PROG_LD])
 dnl Usage:
 dnl AM_INIT_AUTOMAKE(package,version, [no-define])
 
-AC_DEFUN([AM_INIT_AUTOMAKE],
+AC_DEFUN(AM_INIT_AUTOMAKE,
 [AC_REQUIRE([AC_PROG_INSTALL])
 PACKAGE=[$1]
 AC_SUBST(PACKAGE)
@@ -1882,7 +1896,7 @@ AC_REQUIRE([AC_PROG_MAKE_SET])])
 # Check to make sure that the build environment is sane.
 #
 
-AC_DEFUN([AM_SANITY_CHECK],
+AC_DEFUN(AM_SANITY_CHECK,
 [AC_MSG_CHECKING([whether build environment is sane])
 # Just in case
 sleep 1
@@ -1923,7 +1937,7 @@ AC_MSG_RESULT(yes)])
 
 dnl AM_MISSING_PROG(NAME, PROGRAM, DIRECTORY)
 dnl The program must properly implement --version.
-AC_DEFUN([AM_MISSING_PROG],
+AC_DEFUN(AM_MISSING_PROG,
 [AC_MSG_CHECKING(for working $2)
 # Run test in a subshell; some versions of sh will print an error if
 # an executable is not found, even if stderr is redirected.
@@ -1942,7 +1956,7 @@ AC_SUBST($1)])
 
 # serial 1
 
-AC_DEFUN([AM_MAINTAINER_MODE],
+AC_DEFUN(AM_MAINTAINER_MODE,
 [AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])
   dnl maintainer-mode is disabled by default
   AC_ARG_ENABLE(maintainer-mode,
@@ -1959,7 +1973,7 @@ AC_DEFUN([AM_MAINTAINER_MODE],
 
 # Define a conditional.
 
-AC_DEFUN([AM_CONDITIONAL],
+AC_DEFUN(AM_CONDITIONAL,
 [AC_SUBST($1_TRUE)
 AC_SUBST($1_FALSE)
 if $2; then
@@ -1972,7 +1986,7 @@ fi])
 
 # Like AC_CONFIG_HEADER, but automatically create stamp file.
 
-AC_DEFUN([AM_CONFIG_HEADER],
+AC_DEFUN(AM_CONFIG_HEADER,
 [AC_PREREQ([2.12])
 AC_CONFIG_HEADER([$1])
 dnl When config.status generates a header, we must update the stamp-h file.
diff --git a/libstdc++-v3/config/os/djgpp/bits/os_defines.h b/libstdc++-v3/config/os/djgpp/bits/os_defines.h
index f979b1e..5a6c496 100644
--- a/libstdc++-v3/config/os/djgpp/bits/os_defines.h
+++ b/libstdc++-v3/config/os/djgpp/bits/os_defines.h
@@ -41,4 +41,18 @@
 
 // FIXME: should there be '#undef POSIX_SOURCE'?
 
+// FIXME: these should be implemented. 
+// But they don't for DJGPP. And we should have stuff 
+// compatible with DJGPP v2.03 ... (AP, 2001/06/05)
+
+#define __builtin_fabsf(__x) __builtin_fabs(static_cast<double>(__x))
+#define __builtin_cosf(__x)  __builtin_cos(static_cast<double>(__x))
+#define __builtin_sinf(__x)  __builtin_sin(static_cast<double>(__x))
+#define __builtin_sqrtf(__x) __builtin_sqrt(static_cast<double>(__x))
+
+#define __builtin_fabsl(__x) __builtin_fabs(static_cast<double>(__x))
+#define __builtin_cosl(__x)  __builtin_cos(static_cast<double>(__x))
+#define __builtin_sinl(__x)  __builtin_sin(static_cast<double>(__x))
+#define __builtin_sqrtl(__x) __builtin_sqrt(static_cast<double>(__x))
+
 #endif
diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure
index 047f539..6db07b2 100755
--- a/libstdc++-v3/configure
+++ b/libstdc++-v3/configure
@@ -1606,6 +1606,16 @@ ac_exeext=$EXEEXT
 
 
 
+
+if test `uname` = MS-DOS ; then
+  DJGPP_TRUE=
+  DJGPP_FALSE='#'
+else
+  DJGPP_TRUE='#'
+  DJGPP_FALSE=
+fi
+
+
 # Check whether --enable-shared or --disable-shared was given.
 if test "${enable_shared+set}" = set; then
   enableval="$enable_shared"
@@ -4805,6 +4815,9 @@ EOF
 #define HAVE_MMAP 1
 EOF
 
+	;;
+    *djgpp*)
+	os_include_dir="config/os/djgpp"
 	;;
     *)
 	# We assume newlib.  This lets us hard-code the functions we know
@@ -17314,7 +17327,14 @@ if test $version_specific_libs = yes; then
   gcc_version_full=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\"\([^\"]*\)\".*/\1/'`
   gcc_version=`echo ${gcc_version_full} | sed -e 's/\([^ ]*\) .*/\1/'`
   if test $gxx_include_dir = no; then
-    gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++
+  case ${build_alias} in
+      *djgpp*)
+  	gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/gxx
+  	;;
+      *)
+  	gxx_include_dir='$(libdir)/gcc-lib/$(target_alias)/'${gcc_version}/include/g++
+  	;;
+  esac
   fi
   glibcpp_toolexecdir='$(libdir)/gcc-lib/$(target_alias)'
   glibcpp_toolexeclibdir='$(toolexecdir)/'${gcc_version}'$(MULTISUBDIR)'
@@ -17323,7 +17343,14 @@ if test $version_specific_libs = yes; then
 # Default case for install directory for include files.
 if test $version_specific_libs = no &&
    test $gxx_include_dir = no; then
-  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}
+  case ${build_alias} in
+      *djgpp*)
+          gxx_include_dir='$(prefix)'/lang/cxx-${libstdcxx_interface}
+          ;;
+      *)
+	  gxx_include_dir='$(prefix)'/include/g++-${libstdcxx_interface}
+	  ;;
+  esac
 fi
 
 # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir
diff --git a/libstdc++-v3/configure.in b/libstdc++-v3/configure.in
index 355a447..769f5d5 100644
--- a/libstdc++-v3/configure.in
+++ b/libstdc++-v3/configure.in
@@ -51,6 +51,8 @@ AC_ARG_WITH(cross-host,
 # the GLIBCPP_ENABLE_* macros below.
 GLIBCPP_CONFIGURE(.)
 
+AM_CONDITIONAL(DJGPP,test `uname` = MS-DOS )
+
 AC_LIBTOOL_DLOPEN
 AM_PROG_LIBTOOL
 AC_SUBST(enable_shared)
@@ -179,6 +181,9 @@ if test -n "$with_cross_host" || test x"$build" != x"$host"; then
 	# AC_FUNC_MMAP
 	AC_DEFINE(HAVE_MMAP)
 	;;
+    *djgpp*)
+	os_include_dir="config/os/djgpp"
+	;;
     *)
 	# We assume newlib.  This lets us hard-code the functions we know
 	# we'll have.
diff --git a/libstdc++-v3/include/bits/fstream.tcc b/libstdc++-v3/include/bits/fstream.tcc
index 54c7046..e9b1d7d 100644
--- a/libstdc++-v3/include/bits/fstream.tcc
+++ b/libstdc++-v3/include/bits/fstream.tcc
@@ -409,11 +409,26 @@ namespace std
 #if 1
 	  int __plen = _M_out_end - _M_out_beg;
 	  streamsize __len = 0;
+	  bool __testarg = __c !=traits_type::eof(); 
+	  bool __testseek = _M_out_cur && !__testarg;
+	  int __plen0 = __testseek ? _M_out_cur - _M_out_beg : 0;
+     	  streamoff __pos=0;
 
-	  if (__plen)
-	    __len = _M_file->xsputn(_M_out_beg, __plen);
+          if (__plen0)
+	    {
+	       __len += _M_file->xsputn(_M_out_beg, __plen0);
+	       _M_file->sync();
+	    }
+       
+          if (__testseek)
+          __pos = _M_file->seekoff(0, ios_base::cur);
 
-	  if (__c !=traits_type::eof())
+          if (__plen>__plen0)
+	    {
+	       __len += _M_file->xsputn(_M_out_beg+__plen0, __plen-__plen0);
+	    }
+
+	  if (__testarg)
 	    {
  	      char_type __pending = traits_type::to_char_type(__c);
  	      __len += _M_file->xsputn(&__pending, 1);
@@ -423,6 +438,10 @@ namespace std
 	  // NB: Need this so that external byte sequence reflects
 	  // internal buffer.
 	  _M_file->sync();
+
+	  if (__testseek)
+	    _M_file->seekpos(__pos);
+
 	  if (__len == __plen)
 	    {
 	      _M_set_indeterminate();
diff --git a/libstdc++-v3/include/bits/std_fstream.h b/libstdc++-v3/include/bits/std_fstream.h
index a0604ab..31d02f6 100644
--- a/libstdc++-v3/include/bits/std_fstream.h
+++ b/libstdc++-v3/include/bits/std_fstream.h
@@ -183,10 +183,17 @@ namespace std
 	    // the position of the external byte sequence (_M_file)
 	    // plus the offset in the current internal buffer
 	    // (_M_out_beg - _M_out_cur)
+#ifndef __DJGPP__
+	    // FIXME: removal of this code is really ugly hack for DJGPP 
+	    // as otherwise text file handling is totally broken for DJGPP.
+            // This breaks filebuf tests in testsuite though ... (AP)
 	    streamoff __cur = _M_file->seekoff(0, ios_base::cur);
 	    off_type __off = _M_out_cur - _M_out_beg;
+#endif
 	    _M_really_overflow();
+#ifndef __DJGPP__
 	    _M_file->seekpos(__cur + __off);
+#endif
 	  }
 	_M_last_overflowed = false;	
 	return 0;
diff --git a/libstdc++-v3/src/Makefile.am b/libstdc++-v3/src/Makefile.am
index 136be48..5c754ff 100644
--- a/libstdc++-v3/src/Makefile.am
+++ b/libstdc++-v3/src/Makefile.am
@@ -69,7 +69,11 @@ sources = \
 	wstring-inst.cc
 
 
+if DJGPP
+VPATH = $(top_srcdir);$(top_srcdir)/src
+else
 VPATH = $(top_srcdir):$(top_srcdir)/src
+endif
 
 libstdc___la_SOURCES = $(sources)
 
diff --git a/libstdc++-v3/src/Makefile.in b/libstdc++-v3/src/Makefile.in
index 743cb6e..173671d 100644
--- a/libstdc++-v3/src/Makefile.in
+++ b/libstdc++-v3/src/Makefile.in
@@ -170,6 +170,9 @@ sources = \
 
 VPATH = $(top_srcdir):$(top_srcdir)/src
 
+@DJGPP_TRUE@VPATH = $(top_srcdir);$(top_srcdir)/src
+@DJGPP_FALSE@VPATH = $(top_srcdir):$(top_srcdir)/src
+
 libstdc___la_SOURCES = $(sources)
 
 libstdc___la_LIBADD = \
diff --git a/libstdc++-v3/stamp-h.in b/libstdc++-v3/stamp-h.in
new file mode 100644
index 0000000..e69de29
diff --git a/libstdc++-v3/testsuite/testsuite_hooks.h b/libstdc++-v3/testsuite/testsuite_hooks.h
index f8bb87b..9348b67 100644
--- a/libstdc++-v3/testsuite/testsuite_hooks.h
+++ b/libstdc++-v3/testsuite/testsuite_hooks.h
@@ -55,7 +55,7 @@
 #include <bits/c++config.h>
 
 // Defined in GLIBCPP_CONFIGURE_TESTSUITE.
-#ifndef _GLIBCPP_MEM_LIMITS
+#if !defined(_GLIBCPP_MEM_LIMITS) || defined(__DJGPP__)
 
 // Don't do memory limits.
 void
