diff --git a/gcc/config.gcc b/gcc/config.gcc
index a5e659a..2696cec 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -1888,6 +1888,21 @@ mips*-*-netbsd*)			# NetBSD/mips, either endian.
 	tm_file="elfos.h ${tm_file} mips/netbsd.h"
 	tmake_file="${tmake_file} mips/t-netbsd"
 	;;
+mips64*-*-linux*)
+	tm_file="dbxelf.h elfos.h svr4.h linux.h ${tm_file} mips/linux.h mips/linux64.h"
+	tmake_file="t-slibgcc-elf-ver t-linux mips/t-linux64"
+
+	# This default ABI is a partial lie: t-linux64 overrides the
+	# DRIVER_SELF_SPEC that sets the default abi, in the spec file
+	# that is installed.  What GCC thinks of as the default must
+	# remain as ABI_32 such that the SONAMEs of the libgcc shared
+	# libraries remain compatible with those of mips-linux-gnu.
+	tm_defines="MIPS_ISA_DEFAULT=32 MIPS_ABI_DEFAULT=ABI_32"
+	target_cpu_default="MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT"
+	extra_parts="crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o"
+	gnu_ld=yes
+	gas=yes
+	;;
 mips*-*-linux*)				# Linux MIPS, either endian.
         tm_file="dbxelf.h elfos.h svr4.h linux.h ${tm_file} mips/linux.h"
 	case $machine in
diff --git a/gcc/config/fp-bit.c b/gcc/config/fp-bit.c
index e609760..1c68a63 100644
--- a/gcc/config/fp-bit.c
+++ b/gcc/config/fp-bit.c
@@ -208,7 +208,11 @@ pack_d ( fp_number_type *  src)
       exp = EXPMAX;
       if (src->class == CLASS_QNAN || 1)
 	{
+#ifdef QUIET_NAN_NEGATED
+	  fraction |= QUIET_NAN - 1;
+#else
 	  fraction |= QUIET_NAN;
+#endif
 	}
     }
   else if (isinf (src))
@@ -523,7 +527,11 @@ unpack_d (FLO_union_type * src, fp_number_type * dst)
       else
 	{
 	  /* Nonzero fraction, means nan */
+#ifdef QUIET_NAN_NEGATED
+	  if ((fraction & QUIET_NAN) == 0)
+#else
 	  if (fraction & QUIET_NAN)
+#endif
 	    {
 	      dst->class = CLASS_QNAN;
 	    }
diff --git a/gcc/config/mips/iris5.h b/gcc/config/mips/iris5.h
index a3af82d..3ad4037 100644
--- a/gcc/config/mips/iris5.h
+++ b/gcc/config/mips/iris5.h
@@ -71,7 +71,7 @@ Boston, MA 02111-1307, USA.  */
 	builtin_define ("_MODERN_C");			\
 	builtin_define ("_SVR4_SOURCE");		\
 	builtin_define ("__DSO__");			\
-	builtin_define ("_MIPS_SIM=_MIPS_SIM_ABI32");	\
+	builtin_define ("_MIPS_SIM=_ABIO32");	\
 	builtin_define ("_MIPS_SZPTR=32");		\
 	builtin_assert ("system=unix");			\
 	builtin_assert ("system=svr4");			\
diff --git a/gcc/config/mips/iris6.h b/gcc/config/mips/iris6.h
index 7336f6c..d72297a 100644
--- a/gcc/config/mips/iris6.h
+++ b/gcc/config/mips/iris6.h
@@ -93,7 +93,7 @@ Boston, MA 02111-1307, USA.  */
 							\
      if (mips_abi == ABI_32)				\
       {							\
-	builtin_define ("_MIPS_SIM=_MIPS_SIM_ABI32");	\
+	builtin_define ("_MIPS_SIM=_ABIO32");	\
 	builtin_define ("_MIPS_SZLONG=32");		\
 	builtin_define ("_MIPS_SZPTR=32");		\
       }							\
diff --git a/gcc/config/mips/linux.h b/gcc/config/mips/linux.h
index a0b9f2f..2b322f3 100644
--- a/gcc/config/mips/linux.h
+++ b/gcc/config/mips/linux.h
@@ -133,20 +133,20 @@ void FN ()							\
       if (mips_abi == ABI_N32)					\
       {								\
         builtin_define ("_ABIN32=2");				\
-        builtin_define ("_MIPS_SIM=_ABIN32");			\
+        builtin_define ("_MIPS_SIM=_ABIN32");		\
         builtin_define ("_MIPS_SZLONG=32");			\
         builtin_define ("_MIPS_SZPTR=32");			\
       }								\
      else if (mips_abi == ABI_64)				\
       {								\
         builtin_define ("_ABI64=3");				\
-        builtin_define ("_MIPS_SIM=_ABI64");			\
+        builtin_define ("_MIPS_SIM=_ABI64");		\
         builtin_define ("_MIPS_SZLONG=64");			\
         builtin_define ("_MIPS_SZPTR=64");			\
       }								\
      else							\
       {								\
-        builtin_define ("_MIPS_SIM=_MIPS_SIM_ABI32");		\
+        builtin_define ("_MIPS_SIM=_ABIO32");		\
         builtin_define ("_MIPS_SZLONG=32");			\
         builtin_define ("_MIPS_SZPTR=32");			\
       }								\
diff --git a/gcc/config/mips/linux64.h b/gcc/config/mips/linux64.h
new file mode 100644
index 0000000..6fc9255
--- /dev/null
+++ b/gcc/config/mips/linux64.h
@@ -0,0 +1,76 @@
+/* Definitions for MIPS running Linux-based GNU systems with ELF format
+   using n32/64 abi.
+   Copyright 2002, 2003 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#define DRIVER_SELF_SPECS \
+ENDIAN_SPEC, \
+"%{mabi-fake-default:%{!mabi=*:-mabi=32}}", \
+"%{!mabi=*:-mabi=32}", \
+"%{!mips*:%{!march=*:%{mabi=32:-mips1}%{mabi=n32|mabi=64:-mips3}}}"
+
+#undef SUBTARGET_ASM_SPEC
+#define SUBTARGET_ASM_SPEC "\
+%{!fno-PIC:%{!fno-pic:-KPIC}} \
+%{fno-PIC:-non_shared} %{fno-pic:-non_shared} \
+%{mabi=64:-64} %{mabi=n32:-n32}"
+
+#undef LIB_SPEC
+#define LIB_SPEC "\
+%{shared: -lc} \
+%{!static: \
+ %{mabi=n32:-rpath-link %R/lib32:%R/usr/lib32} \
+ %{mabi=64:-rpath-link %R/lib64:%R/usr/lib64} \
+ %{mabi=32:-rpath-link %R/lib:%R/usr/lib}} \
+%{!shared: %{pthread:-lpthread} \
+  %{profile:-lc_p} %{!profile: -lc}}"
+
+#undef LINK_SPEC
+#define LINK_SPEC "\
+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \
+%{bestGnum} %{shared} %{non_shared} \
+%{call_shared} %{no_archive} %{exact_version} \
+ %(endian_spec) \
+  %{!shared: \
+    %{!ibcs: \
+      %{!static: \
+        %{rdynamic:-export-dynamic} \
+        %{!dynamic-linker: \
+	  %{mabi=n32: -dynamic-linker /lib32/ld.so.1} \
+	  %{mabi=64: -dynamic-linker /lib64/ld.so.1} \
+	  %{mabi=32: -dynamic-linker /lib/ld.so.1}}} \
+      %{static:-static}}} \
+%{mabi=n32:-melf32%{EB:b}%{EL:l}tsmipn32} \
+%{mabi=64:-melf64%{EB:b}%{EL:l}tsmip} \
+%{mabi=32:-melf32%{EB:b}%{EL:l}tsmip}"
+
+#undef LOCAL_LABEL_PREFIX
+#define LOCAL_LABEL_PREFIX ((mips_abi == ABI_32 || mips_abi == ABI_O64) \
+			    ? "$" : ".")
+
+/* The size in bytes of a DWARF field indicating an offset or length
+   relative to a debug info section, specified to be 4 bytes in the DWARF-2
+   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */
+#define DWARF_OFFSET_SIZE PTR_SIZE
+
+/* GNU/Linux doesn't use the same floating-point format that IRIX uses
+   for long double.  There's no need to override this here, since
+   ieee_quad_format is the default, but let's put this here to make
+   sure nobody thinks we just forgot to set it to something else.  */
+#define MIPS_TFMODE_FORMAT mips_quad_format
diff --git a/gcc/config/mips/mips.h b/gcc/config/mips/mips.h
index ad05be5..7f68098 100644
--- a/gcc/config/mips/mips.h
+++ b/gcc/config/mips/mips.h
@@ -719,11 +719,6 @@ extern void		sbss_section PARAMS ((void));
 #  endif
 #endif
 
-#ifndef MULTILIB_DEFAULTS
-#define MULTILIB_DEFAULTS \
-    { MULTILIB_ENDIAN_DEFAULT, MULTILIB_ISA_DEFAULT, MULTILIB_ABI_DEFAULT }
-#endif
-
 /* We must pass -EL to the linker by default for little endian embedded
    targets using linker scripts with a OUTPUT_FORMAT line.  Otherwise, the
    linker will default to using big-endian output files.  The OUTPUT_FORMAT
@@ -1006,6 +1001,11 @@ extern int mips_abi;
 #define ASM_ABI_DEFAULT_SPEC ""
 #endif
 
+#ifndef MULTILIB_DEFAULTS
+#define MULTILIB_DEFAULTS \
+    { MULTILIB_ENDIAN_DEFAULT, MULTILIB_ISA_DEFAULT, MULTILIB_ABI_DEFAULT }
+#endif
+
 /* Only ELF targets can switch the ABI.  */
 #ifndef OBJECT_FORMAT_ELF
 #undef ASM_ABI_DEFAULT_SPEC
@@ -1227,12 +1227,12 @@ extern int mips_abi;
 #endif
 
 
-#define SDB_DEBUGGING_INFO 1		/* generate info for mips-tfile */
 #define DBX_DEBUGGING_INFO 1		/* generate stabs (OSF/rose) */
 #define MIPS_DEBUGGING_INFO 1		/* MIPS specific debugging info */
+#define DWARF2_DEBUGGING_INFO 1         /* dwarf2 debugging info */
 
-#ifndef PREFERRED_DEBUGGING_TYPE	/* assume SDB_DEBUGGING_INFO */
-#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG
+#ifndef PREFERRED_DEBUGGING_TYPE
+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG
 #endif
 
 /* By default, turn on GDB extensions.  */
diff --git a/gcc/config/mips/t-linux64 b/gcc/config/mips/t-linux64
new file mode 100644
index 0000000..f69d215
--- /dev/null
+++ b/gcc/config/mips/t-linux64
@@ -0,0 +1,19 @@
+MULTILIB_OPTIONS = mabi=n32/mabi=32
+MULTILIB_DIRNAMES = n32 32
+MULTILIB_OSDIRNAMES = ../lib32 ../lib
+
+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o
+
+LIB2FUNCS_EXTRA = $(srcdir)/config/mips/_tilib.c
+
+TPBIT = tp-bit.c
+
+tp-bit.c: $(srcdir)/config/fp-bit.c
+	echo '#ifdef __MIPSEL__' > tp-bit.c
+	echo '# define FLOAT_BIT_ORDER_MISMATCH' >> tp-bit.c
+	echo '#endif' >> tp-bit.c
+	echo '#if __LDBL_MANT_DIG__ == 113' >> tp-bit.c
+	echo '#define QUIET_NAN_NEGATED' >> dp-bit.c
+	echo '# define TFLOAT' >> tp-bit.c
+	cat $(srcdir)/config/fp-bit.c >> tp-bit.c
+	echo '#endif' >> tp-bit.c
diff --git a/gcc/real.c b/gcc/real.c
index f775226..cd2bab6 100644
--- a/gcc/real.c
+++ b/gcc/real.c
@@ -3586,6 +3586,22 @@ const struct real_format ieee_quad_format =
     true,
     true
   };
+
+const struct real_format mips_quad_format =
+  {
+    encode_ieee_quad,
+    decode_ieee_quad,
+    2,
+    1,
+    113,
+    -16381,
+    16384,
+    true,
+    true,
+    true,
+    true,
+    false
+  };
 
 /* Descriptions of VAX floating point formats can be found beginning at
 
diff --git a/gcc/real.h b/gcc/real.h
index 7568a9e..9aef861 100644
--- a/gcc/real.h
+++ b/gcc/real.h
@@ -225,6 +225,7 @@ extern const struct real_format ieee_extended_intel_96_round_53_format;
 extern const struct real_format ieee_extended_intel_128_format;
 extern const struct real_format ibm_extended_format;
 extern const struct real_format ieee_quad_format;
+extern const struct real_format mips_quad_format;
 extern const struct real_format vax_f_format;
 extern const struct real_format vax_d_format;
 extern const struct real_format vax_g_format;
diff --git a/libffi/src/mips/ffi.c b/libffi/src/mips/ffi.c
index 93f7923..ca4f09a 100644
--- a/libffi/src/mips/ffi.c
+++ b/libffi/src/mips/ffi.c
@@ -29,7 +29,7 @@
 
 #include <stdlib.h>
 
-#if _MIPS_SIM == _MIPS_SIM_NABI32
+#if _MIPS_SIM == _ABIN32
 #define FIX_ARGP \
 FFI_ASSERT(argp <= &stack[bytes]); \
 if (argp == &stack[bytes]) \
@@ -55,7 +55,7 @@ static void ffi_prep_args(char *stack,
   register char *argp;
   register ffi_type **p_arg;
 
-#if _MIPS_SIM == _MIPS_SIM_NABI32
+#if _MIPS_SIM == _ABIN32
   /* If more than 8 double words are used, the remainder go
      on the stack. We reorder stuff on the stack here to 
      support this easily. */
@@ -69,7 +69,7 @@ static void ffi_prep_args(char *stack,
 
   memset(stack, 0, bytes);
 
-#if _MIPS_SIM == _MIPS_SIM_NABI32
+#if _MIPS_SIM == _ABIN32
   if ( ecif->cif->rstruct_flag != 0 )
 #else
   if ( ecif->cif->rtype->type == FFI_TYPE_STRUCT )
@@ -92,7 +92,7 @@ static void ffi_prep_args(char *stack,
 	FIX_ARGP;
       }
 
-#if _MIPS_SIM == _MIPS_SIM_ABI32
+#if _MIPS_SIM == _ABIO32
 #define OFFSET 0
 #else
 #define OFFSET sizeof(int)
@@ -146,7 +146,7 @@ static void ffi_prep_args(char *stack,
 	    }
 	  else
 	    {
-#if _MIPS_SIM == _MIPS_SIM_ABI32	      
+#if _MIPS_SIM == _ABIO32
 	      memcpy(argp, *p_argv, z);
 #else
 	      {
@@ -178,7 +178,7 @@ static void ffi_prep_args(char *stack,
   return;
 }
 
-#if _MIPS_SIM == _MIPS_SIM_NABI32
+#if _MIPS_SIM == _ABIN32
 
 /* The n32 spec says that if "a chunk consists solely of a double 
    float field (but not a double, which is part of a union), it
@@ -267,7 +267,7 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)
 {
   cif->flags = 0;
 
-#if _MIPS_SIM == _MIPS_SIM_ABI32
+#if _MIPS_SIM == _ABIO32
   /* Set the flags necessary for O32 processing */
 
   if (cif->rtype->type != FFI_TYPE_STRUCT)
@@ -322,7 +322,7 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)
     }
 #endif
 
-#if _MIPS_SIM == _MIPS_SIM_NABI32
+#if _MIPS_SIM == _ABIN32
   /* Set the flags necessary for N32 processing */
   {
     unsigned shift = 0;
@@ -441,14 +441,14 @@ void ffi_call(ffi_cif *cif, void (*fn)(), void *rvalue, void **avalue)
     
   switch (cif->abi) 
     {
-#if _MIPS_SIM == _MIPS_SIM_ABI32
+#if _MIPS_SIM == _ABIO32
     case FFI_O32:
       ffi_call_O32(ffi_prep_args, &ecif, cif->bytes, 
 		   cif->flags, ecif.rvalue, fn);
       break;
 #endif
 
-#if _MIPS_SIM == _MIPS_SIM_NABI32
+#if _MIPS_SIM == _ABIN32
     case FFI_N32:
       ffi_call_N32(ffi_prep_args, &ecif, cif->bytes, 
 		   cif->flags, ecif.rvalue, fn);
