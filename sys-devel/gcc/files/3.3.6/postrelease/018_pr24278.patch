diff --git a/gcc/cp/init.c b/gcc/cp/init.c
index 4d9b244..2357e5e 100644
--- a/gcc/cp/init.c
+++ b/gcc/cp/init.c
@@ -1013,11 +1013,11 @@ expand_member_init (tree name)
       if (!binfo)
 	{
 	  if (TYPE_USES_VIRTUAL_BASECLASSES (current_class_type))
-	    error ("type `%D' is not a direct or virtual base of `%T'",
-		   name, current_class_type);
+	    error ("type `%T' is not a direct or virtual base of `%T'",
+		   basetype, current_class_type);
 	  else
-	    error ("type `%D' is not a direct base of `%T'",
-		   name, current_class_type);
+	    error ("type `%T' is not a direct base of `%T'",
+		   basetype, current_class_type);
 	  return NULL_TREE;
 	}
 
diff --git a/gcc/testsuite/g++.dg/ext/ctor5.C b/gcc/testsuite/g++.dg/ext/ctor5.C
new file mode 100644
index 0000000..18e55d1
--- /dev/null
+++ b/gcc/testsuite/g++.dg/ext/ctor5.C
@@ -0,0 +1,8 @@
+// PR c++/24278
+
+template<typename T> struct A
+{
+  A() : T(0) {} // { dg-error "base" }
+};
+
+A<int*> a; // { dg-error "instantiated" }
diff --git a/gcc/testsuite/g++.dg/other/init1.C b/gcc/testsuite/g++.dg/other/init1.C
index bf4c079..9a93cc6 100644
--- a/gcc/testsuite/g++.dg/other/init1.C
+++ b/gcc/testsuite/g++.dg/other/init1.C
@@ -17,7 +17,7 @@ struct B : A
 class T
 {
   typedef int Foo;
-  T () : Foo () {}	// { dg-error "type `T::Foo' is not" "" }
+  T () : Foo () {}	// { dg-error "type `int' is not" "" }
 };
 
 struct S : B
