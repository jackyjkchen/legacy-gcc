diff --git a/Makefile.in b/Makefile.in
index 05f86e7..9950f76 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -29,7 +29,7 @@
 # See below for how to change them for certain systems.
 
 # Selection of languages to be made.
-LANGUAGES = c c++ objective-c proto
+LANGUAGES = c
 
 ALLOCA =
 ALLOCA_FLAGS =
@@ -50,7 +50,7 @@ T_CFLAGS =
 X_CPPFLAGS =
 T_CPPFLAGS =
 
-CC = cc
+CC = @CC@
 BISON = bison
 BISONFLAGS =
 AR = ar
@@ -78,7 +78,7 @@ RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]
 # OLDCC should not be the GNU C compiler,
 # since that would compile typical libgcc1.a functions such as mulsi3
 # into infinite recursions.
-OLDCC = cc
+OLDCC = ${CC}
 
 # CFLAGS for use with OLDCC, for compiling libgcc1.a.
 # NOTE: -O does not work on some Unix systems!
@@ -133,6 +133,11 @@ srcdir = .
 # Common prefix for installation directories.
 # NOTE: This directory must exist when you start installation.
 prefix = /usr/local
+# Directory in which to put localized header files. On the systems with
+# gcc as the native cc, `local_prefix' may not be `prefix' which is
+# `/usr'.
+# NOTE: local_prefix *should not* default from prefix.
+local_prefix = /usr/local
 # Directory in which to put host dependent programs and libraries
 exec_prefix = $(prefix)
 # Directory in which to put the executable for the command `gcc'
@@ -196,6 +201,10 @@ EXTRA_OBJS =
 # Often this is edited directly by `configure'.
 EXTRA_HEADERS =
 
+# Target to use whe installing assert.h.  Some systems may
+# want to set this empty.
+INSTALL_ASSERT_H = assert.h
+
 # Set this to `ld' to enable use of collect2.
 # USE_COLLECT2 =
 # It is convenient for configure to add the assignment at the beginning,
@@ -512,7 +521,7 @@ enquire.o: $(srcdir)/enquire.c $(GCC_PASSES)
 #	-if [ "$(srcdir)" != "." ]; then rm -f ./enquire.c; else true; fi
 #	-cp $(srcdir)/enquire.c . > /dev/null 2>&1
 # Breaking this line caused a problem with one version of GNU make.
-	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. -c $(srcdir)/enquire.c
+	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. -I$(srcdir) -c $(srcdir)/enquire.c
 
 # Build the version of limits.h that we will install.
 xlimits.h: glimits.h limitx.h limity.h
@@ -702,6 +711,15 @@ crtbegin.o:	crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h
 crtend.o:	crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h
 	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_END \
 	  -finhibit-size-directive -g0 -c $(srcdir)/crtstuff.c -o crtend.o
+
+crtbeginS.o:	crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h
+	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_BEGIN -fPIC \
+	  -finhibit-size-directive -g0 -c $(srcdir)/crtstuff.c -o crtbeginS.o
+
+crtendS.o:	crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h
+	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -DCRT_END -fPIC \
+	  -finhibit-size-directive -g0 -c $(srcdir)/crtstuff.c -o crtendS.o
+
 
 # Compiling object files from source files.
 
@@ -811,6 +829,7 @@ gcc.o: gcc.c $(CONFIG_H) gvarargs.h obstack.h
   -DSTANDARD_STARTFILE_PREFIX=\"$(libdir)/\" \
   -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc-lib/\" \
   -DDEFAULT_TARGET_MACHINE=\"$(target)\" \
+  -DTOOLDIR_BASE_PREFIX=\"$(exec_prefix)/\" \
   -DTOOLDIR=\"$(tooldir)/\" \
   -c `echo $(srcdir)/gcc.c | sed 's,^\./,,'`
 
@@ -1170,8 +1189,9 @@ cccp.o: cccp.c $(CONFIG_H) pcp.h version.c
 	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
 	  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
 	  -DGPLUSPLUS_INCLUDE_DIR=\"$(libdir)/g++-include\" \
-	  -DLOCAL_INCLUDE_DIR=\"$(prefix)/include\" \
+	  -DLOCAL_INCLUDE_DIR=\"$(local_prefix)/include\" \
 	  -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
+	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
 	  -DTOOLDIR=\"$(tooldir)/\" \
 	  -c `echo $(srcdir)/cccp.c | sed 's,^\./,,'`
 
@@ -1192,7 +1212,8 @@ stamp-proto:	$(srcdir)/protoize.c getopt.h $(CONFIG_H)
           -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
           -DGPLUSPLUS_INCLUDE_DIR=\"$(libdir)/g++-include\" \
           -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
-	  -DLOCAL_INCLUDE_DIR=\"$(prefix)/include\" \
+	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
+	  -DLOCAL_INCLUDE_DIR=\"$(local_prefix)/include\" \
 	  -DSTD_PROTO_DIR=\"$(libsubdir)\" \
 	  -DUNPROTOIZE $(srcdir)/protoize.c
 	mv protoize.o unprotoize.o
@@ -1200,7 +1221,8 @@ stamp-proto:	$(srcdir)/protoize.c getopt.h $(CONFIG_H)
           -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
           -DGPLUSPLUS_INCLUDE_DIR=\"$(libdir)/g++-include\" \
           -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
-	  -DLOCAL_INCLUDE_DIR=\"$(prefix)/include\" \
+	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" \
+	  -DLOCAL_INCLUDE_DIR=\"$(local_prefix)/include\" \
 	  -DSTD_PROTO_DIR=\"$(libsubdir)\" \
 	  $(srcdir)/protoize.c
 	touch stamp-proto
@@ -1227,6 +1249,7 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)
 	  -DGCC_INCLUDE_DIR=0 \
 	  -DGPLUSPLUS_INCLUDE_DIR=0 \
 	  -DCROSS_INCLUDE_DIR=0 \
+	  -DTOOL_INCLUDE_DIR=0 \
 	  -DSTD_PROTO_DIR=0" tmp-proto.c
 	@echo '**********' Expect 400 lines of differences.
 	-diff $(srcdir)/protoize.c tmp-proto.c > tmp-proto.diff
@@ -1236,6 +1259,7 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)
 	  -DGCC_INCLUDE_DIR=0 \
 	  -DGPLUSPLUS_INCLUDE_DIR=0 \
 	  -DCROSS_INCLUDE_DIR=0 \
+	  -DTOOL_INCLUDE_DIR=0 \
 	  -DSTD_PROTO_DIR=0" tmp-proto.c
 	@echo Expect zero differences.
 	diff $(srcdir)/protoize.c tmp-proto.c | cat
@@ -1381,35 +1405,35 @@ install-cross-tools: install-dir
 # leading us to overwrite the real file through the symlink.
 	-if [ -f gcc-cross ] ; \
 	then \
-	  if [ -d $(tooldir)/. ] ; \
+	  if [ -d $(DESTDIR)$(tooldir)/. ] ; \
 	  then \
 	    for file in as ld ar nm ranlib; do \
-	      if [ -f $(libsubdir)/$$file ] ; \
+	      if [ -f $(DESTDIR)$(libsubdir)/$$file ] ; \
 	      then true; \
 	      else  \
-		rm -rf $(libsubdir)/$$file; \
-		$(SYMLINK) $(tooldir)/bin/$$file $(libsubdir)/$$file \
-		|| (echo "#!/bin/sh"; echo $(tooldir)/bin/$$file "$$@") > $(libsubdir)/$$file; \
+		rm -rf $(DESTDIR)$(libsubdir)/$$file; \
+		$(SYMLINK) $(DESTDIR)$(tooldir)/bin/$$file $(DESTDIR)$(libsubdir)/$$file \
+		|| (echo "#!/bin/sh"; echo $(DESTDIR)$(tooldir)/bin/$$file "$$@") > $(DESTDIR)$(libsubdir)/$$file; \
 	      fi; \
 	    done; \
-	    for file in $(tooldir)/lib/*; do \
+	    for file in $(DESTDIR)$(tooldir)/lib/*; do \
 	      if [ -f $$file ] ; \
 	      then \
-		if [ -f $(libsubdir)/`basename $$file` ] ; \
+		if [ -f $(DESTDIR)$(libsubdir)/`basename $$file` ] ; \
 		then true; \
 		else  \
-		  rm -rf $(libsubdir)/`basename $$file`; \
-		  $(SYMLINK) $$file $(libsubdir)/`basename $$file` \
-		  || $(INSTALL_DATA) $$file $(libsubdir)/`basename $$file`; \
+		  rm -rf $(DESTDIR)$(libsubdir)/`basename $$file`; \
+		  $(SYMLINK) $$file $(DESTDIR)$(libsubdir)/`basename $$file` \
+		  || $(INSTALL_DATA) $$file $(DESTDIR)$(libsubdir)/`basename $$file`; \
 		fi; \
 	      else true; \
 	      fi; \
 	    done; \
-	    if [ -d $(tooldir)/include/. ] ; then \
-	      rm -rf $(libsubdir)/sys-include; \
-	      $(SYMLINK) $(tooldir)/include $(libsubdir)/sys-include \
-	      || (if [ -d $(libsubdir)/sys-include ] ; then true ; else mkdir $(libsubdir)/sys-include ; fi; \
-		  (cd $(tooldir)/include; tar cf - .) | (cd $(libsubdir)/sys-include; tar xpf -)); \
+	    if [ -d $(DESTDIR)$(tooldir)/include/. ] ; then \
+	      rm -rf $(DESTDIR)$(libsubdir)/sys-include; \
+	      $(SYMLINK) $(DESTDIR)$(tooldir)/include $(DESTDIR)$(libsubdir)/sys-include \
+	      || (if [ -d $(DESTDIR)$(libsubdir)/sys-include ] ; then true ; else mkdir -p $(DESTDIR)$(libsubdir)/sys-include ; fi; \
+		  (cd $(DESTDIR)$(tooldir)/include; tar cf - .) | (cd $(DESTDIR)$(libsubdir)/sys-include; tar xpf -)); \
 	    else true; fi; \
 	  else true; \
 	  fi; \
@@ -1427,34 +1451,34 @@ install-float-h-cross:
 # If you see what good it does, please tell me.  -- rms.
 	if [ -f enquire ] ; then true; else false; fi
 	-./enquire -f > $(tmpdir)/float.h
-	-rm -f $(libsubdir)/include/float.h
-	$(INSTALL_DATA) $(tmpdir)/float.h $(libsubdir)/include/float.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/float.h
+	$(INSTALL_DATA) $(tmpdir)/float.h $(DESTDIR)$(libsubdir)/include/float.h
 	-rm -f $(tmpdir)/float.h
-	chmod a-x $(libsubdir)/include/float.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/float.h
 
 # Create the installation directory.
 install-dir:
-	-if [ -d $(libdir) ] ; then true ; else mkdir $(libdir) ; fi
-	-if [ -d $(libdir)/gcc-lib ] ; then true ; else mkdir $(libdir)/gcc-lib ; fi
-	-if [ -d $(libdir)/gcc-lib/include ] ; then true ; else mkdir $(libdir)/gcc-lib/include ; fi
-	-if [ -d $(libdir)/gcc-lib/$(target) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target) ; fi
-	-if [ -d $(libdir)/gcc-lib/$(target)/$(version) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version) ; fi
-	-if [ -d $(libdir)/gcc-lib/$(target)/$(version)/include ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version)/include ; fi
-	-if [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; fi
-	-if [ -d $(includedir) ] ; then true ; else mkdir $(includedir) ; fi
-	-if [ -d $(includedir) ] ; then true ; else mkdir $(includedir) ; fi
+	-if [ -d $(DESTDIR)$(libdir) ] ; then true ; else mkdir -p $(DESTDIR)$(libdir) ; fi
+	-if [ -d $(DESTDIR)$(libdir)/gcc-lib ] ; then true ; else mkdir -p $(DESTDIR)$(libdir)/gcc-lib ; fi
+	-if [ -d $(DESTDIR)$(libdir)/gcc-lib/include ] ; then true ; else mkdir -p $(DESTDIR)$(libdir)/gcc-lib/include ; fi
+	-if [ -d $(DESTDIR)$(libdir)/gcc-lib/$(target) ] ; then true ; else mkdir -p $(DESTDIR)$(libdir)/gcc-lib/$(target) ; fi
+	-if [ -d $(DESTDIR)$(libdir)/gcc-lib/$(target)/$(version) ] ; then true ; else mkdir -p $(DESTDIR)$(libdir)/gcc-lib/$(target)/$(version) ; fi
+	-if [ -d $(DESTDIR)$(libdir)/gcc-lib/$(target)/$(version)/include ] ; then true ; else mkdir -p $(DESTDIR)$(libdir)/gcc-lib/$(target)/$(version)/include ; fi
+	-if [ -d $(DESTDIR)$(bindir) ] ; then true ; else mkdir -p $(DESTDIR)$(bindir) ; fi
+	-if [ -d $(DESTDIR)$(includedir) ] ; then true ; else mkdir -p $(DESTDIR)$(includedir) ; fi
+	-if [ -d $(DESTDIR)$(includedir) ] ; then true ; else mkdir -p $(DESTDIR)$(includedir) ; fi
 	-if [ -f gcc-cross ] ; \
 	then \
-	  if [ -d $(tooldir) ] ; then true ; else mkdir $(tooldir) ; fi ; \
-	  if [ -d $(assertdir) ] ; then true ; else mkdir $(assertdir) ; fi ; \
+	  if [ -d $(DESTDIR)$(tooldir) ] ; then true ; else mkdir -p $(DESTDIR)$(tooldir) ; fi ; \
+	  if [ -d $(DESTDIR)$(assertdir) ] ; then true ; else mkdir -p $(DESTDIR)$(assertdir) ; fi ; \
 	else true; \
 	fi
 # We don't use mkdir -p to create the parents of mandir,
 # because some systems don't support it.
 # Instead, we use this technique to create the immediate parent of mandir.
-	-parent=`echo $(mandir)|sed -e 's@/[^/]*$$@@'`; \
+	-parent=`echo $(DESTDIR)$(mandir)|sed -e 's@/[^/]*$$@@'`; \
 	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
-	-if [ -d $(mandir) ] ; then true ; else mkdir $(mandir) ; fi
+	-if [ -d $(DESTDIR)$(mandir) ] ; then true ; else mkdir -p $(DESTDIR)$(mandir) ; fi
 
 # Install the compiler executables built during cross compilation.
 # Deps on  $(srcdir)/g++ $(srcdir)/c++  would be natural here,
@@ -1462,84 +1486,84 @@ install-dir:
 install-common: native install-dir xgcc $(EXTRA_PARTS)
 	for file in $(COMPILERS); do \
 	  if [ -f $$file ] ; then \
-	    rm -f $(libsubdir)/$$file; \
-	    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \
+	    rm -f $(DESTDIR)$(libsubdir)/$$file; \
+	    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libsubdir)/$$file; \
 	  else true; \
 	  fi; \
 	done
 	for file in $(EXTRA_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do \
 	  if [ x"$$file" != x.. ]; then \
-	    rm -f $(libsubdir)/$$file; \
-	    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \
+	    rm -f $(DESTDIR)$(libsubdir)/$$file; \
+	    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libsubdir)/$$file; \
 	  else true; fi; \
 	done
 # Don't mess with specs if it doesn't exist yet.
 	-if [ -f specs ] ; then \
-	  rm -f $(libsubdir)/specs; \
-	  $(INSTALL_DATA) specs $(libsubdir)/specs; \
+	  rm -f $(DESTDIR)$(libsubdir)/specs; \
+	  $(INSTALL_DATA) specs $(DESTDIR)$(libsubdir)/specs; \
 	fi
 # Install the driver program as gcc-$(target)
 # and also as either gcc (if native) or $(tooldir)/bin/gcc.
 	-if [ -f gcc-cross ] ; then \
-	  $(INSTALL_PROGRAM) gcc-cross $(bindir)/gcc-$(target); \
-	  if [ -d $(tooldir)/bin/. ] ; then \
-	    rm -f $(tooldir)/bin/gcc; \
-	    $(INSTALL_PROGRAM) gcc-cross $(tooldir)/bin/gcc; \
+	  $(INSTALL_PROGRAM) gcc-cross $(DESTDIR)$(bindir)/gcc-$(target); \
+	  if [ -d $(DESTDIR)$(tooldir)/bin/. ] ; then \
+	    rm -f $(DESTDIR)$(tooldir)/bin/gcc; \
+	    $(INSTALL_PROGRAM) gcc-cross $(DESTDIR)$(tooldir)/bin/gcc; \
 	  else true; fi; \
 	else \
-	  rm -f $(bindir)/gcc; \
-	  $(INSTALL_PROGRAM) xgcc $(bindir)/gcc; \
-	  rm -f $(bindir)/gcc-$(target)-1; \
-	  ln $(bindir)/gcc $(bindir)/gcc-$(target)-1; \
-	  mv $(bindir)/gcc-$(target)-1 $(bindir)/gcc-$(target); \
+	  rm -f $(DESTDIR)$(bindir)/gcc; \
+	  $(INSTALL_PROGRAM) xgcc $(DESTDIR)$(bindir)/gcc; \
+	  rm -f $(DESTDIR)$(bindir)/gcc-$(target)-1; \
+	  ln $(DESTDIR)$(bindir)/gcc $(DESTDIR)$(bindir)/gcc-$(target)-1; \
+	  mv $(DESTDIR)$(bindir)/gcc-$(target)-1 $(DESTDIR)$(bindir)/gcc-$(target); \
 	fi
 # Install protoize if it was compiled.
 	-if [ -f protoize ]; \
 	then \
-	    rm -f $(bindir)/protoize; \
-	    $(INSTALL_PROGRAM) protoize $(bindir)/protoize; \
+	    rm -f $(DESTDIR)$(bindir)/protoize; \
+	    $(INSTALL_PROGRAM) protoize $(DESTDIR)$(bindir)/protoize; \
 	    rm -f $(bindir)/unprotoize; \
-	    $(INSTALL_PROGRAM) unprotoize $(bindir)/unprotoize; \
+	    $(INSTALL_PROGRAM) unprotoize $(DESTDIR)$(bindir)/unprotoize; \
 	    rm -f $(libsubdir)/SYSCALLS.c.X; \
-	    $(INSTALL_DATA) SYSCALLS.c.X $(libsubdir)/SYSCALLS.c.X; \
-	    chmod a-x $(libsubdir)/SYSCALLS.c.X; \
+	    $(INSTALL_DATA) SYSCALLS.c.X $(DESTDIR)$(libsubdir)/SYSCALLS.c.X; \
+	    chmod a-x $(DESTDIR)$(libsubdir)/SYSCALLS.c.X; \
 	fi
-	-rm -f $(bindir)/c++
-	$(INSTALL_PROGRAM) $(srcdir)/c++ $(bindir)/c++
-	-rm -f $(bindir)/g++
-	$(INSTALL_PROGRAM) $(srcdir)/g++ $(bindir)/g++
-	-rm -f $(libsubdir)/cpp
-	$(INSTALL_PROGRAM) cpp $(libsubdir)/cpp
+	-rm -f $(DESTDIR)$(bindir)/c++
+	$(INSTALL_PROGRAM) $(srcdir)/c++ $(DESTDIR)$(bindir)/c++
+	-rm -f $(DESTDIR)$(bindir)/g++
+	$(INSTALL_PROGRAM) $(srcdir)/g++ $(DESTDIR)$(bindir)/g++
+	-rm -f $(DESTDIR)$(libsubdir)/cpp
+	$(INSTALL_PROGRAM) cpp $(DESTDIR)$(libsubdir)/cpp
 
 # Install the man pages.
 install-man: install-dir $(srcdir)/gcc.1 $(srcdir)/cccp.1 $(srcdir)/g++.1
-	-rm -f $(mandir)/gcc$(manext)
-	-$(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/gcc$(manext)
-	-chmod a-x $(mandir)/gcc$(manext)
-	-rm -f $(mandir)/cccp$(manext)
-	-$(INSTALL_DATA) $(srcdir)/cccp.1 $(mandir)/cccp$(manext)
-	-chmod a-x $(mandir)/cccp$(manext)
-	-$(INSTALL_DATA) $(srcdir)/g++.1 $(mandir)/g++$(manext)
-	-chmod a-x $(mandir)/g++$(manext)
+	-rm -f $(DESTDIR)$(mandir)/gcc$(manext)
+	-$(INSTALL_DATA) $(srcdir)/gcc.1 $(DESTDIR)$(mandir)/gcc$(manext)
+	-chmod a-x $(DESTDIR)$(mandir)/gcc$(manext)
+	-rm -f $(DESTDIR)$(mandir)/cccp$(manext)
+	-$(INSTALL_DATA) $(srcdir)/cccp.1 $(DESTDIR)$(mandir)/cccp$(manext)
+	-chmod a-x $(DESTDIR)$(mandir)/cccp$(manext)
+	-$(INSTALL_DATA) $(srcdir)/g++.1 $(DESTDIR)$(mandir)/g++$(manext)
+	-chmod a-x $(DESTDIR)$(mandir)/g++$(manext)
 
 # Install the library.
 install-libgcc: libgcc.a install-dir
 	-if [ -f libgcc.a ] ; then \
-	  rm -f $(libsubdir)/libgcc.a; \
-	  $(INSTALL_DATA) libgcc.a $(libsubdir)/libgcc.a; \
+	  rm -f $(DESTDIR)$(libsubdir)/libgcc.a; \
+	  $(INSTALL_DATA) libgcc.a $(DESTDIR)$(libsubdir)/libgcc.a; \
 	  if $(RANLIB_TEST) ; then \
-	    (cd $(libsubdir); $(RANLIB) libgcc.a); else true; fi; \
-	  chmod a-x $(libsubdir)/libgcc.a; \
+	    (cd $(DESTDIR)$(libsubdir); $(RANLIB) libgcc.a); else true; fi; \
+	  chmod a-x $(DESTDIR)$(libsubdir)/libgcc.a; \
 	else true; fi
 
 # Install the objc run time library.
 install-libobjc: libobjc.a install-dir
 	-if [ -f libobjc.a ] ; then \
-	  rm -f $(libsubdir)/libobjc.a; \
-	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \
+	  rm -f $(DESTDIR)$(libsubdir)/libobjc.a; \
+	  $(INSTALL_DATA) libobjc.a $(DESTDIR)$(libsubdir)/libobjc.a; \
 	  if $(RANLIB_TEST) ; then \
-	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \
-	  chmod a-x $(libsubdir)/libobjc.a; \
+	    (cd $(DESTDIR)$(libsubdir); $(RANLIB) libobjc.a); else true; fi; \
+	  chmod a-x $(DESTDIR)$(libsubdir)/libobjc.a; \
 	else true; fi
 
 # Install all the header files for native compiler.
@@ -1547,22 +1571,22 @@ install-headers: install-common-headers install-float-h install-limits-h
 
 # Install float.h for native compiler.
 install-float-h: float.h install-dir
-	-rm -f $(libsubdir)/include/float.h
-	$(INSTALL_DATA) float.h $(libsubdir)/include/float.h
-	chmod a-x $(libsubdir)/include/float.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/float.h
+	$(INSTALL_DATA) float.h $(DESTDIR)$(libsubdir)/include/float.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/float.h
 
 # Install limits.h.
 install-limits-h: xlimits.h install-dir
-	-rm -f $(libsubdir)/include/limits.h
-	$(INSTALL_DATA) xlimits.h $(libsubdir)/include/limits.h
-	chmod a-x $(libsubdir)/include/limits.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/limits.h
+	$(INSTALL_DATA) xlimits.h $(DESTDIR)$(libsubdir)/include/limits.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/limits.h
 
 # Install the fixed headers that are the same for all machines.
-install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h gsyslimits.h assert.h
-	-if [ -d $(libsubdir)/include ] ; then true ; else mkdir $(libsubdir)/include ; fi
-	-chmod ugo+rx $(libsubdir)/include
+install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h gsyslimits.h $(INSTALL_ASSERT_H)
+	-if [ -d $(DESTDIR)$(libsubdir)/include ] ; then true ; else mkdir $(DESTDIR)$(libsubdir)/include ; fi
+	-chmod ugo+rx $(DESTDIR)$(libsubdir)/include
 # Must compute $(libsubdir) before the cd; the awk script won't work after.
-	shelllibsubdir=$(libsubdir); \
+	shelllibsubdir=$(DESTDIR)$(libsubdir); \
 	cd $(srcdir); \
 	for file in $(USER_H); do \
 	   rm -f $$shelllibsubdir/include/`basename $$file`; \
@@ -1573,32 +1597,32 @@ install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h gsy
 # Don't replace the assert.h already there if it is not from GCC.
 # This code would be simpler if it tested for -f ... && ! grep ...
 # but supposedly the ! operator is missing in sh on some systems.
-	if [ -f $(assertdir)/assert.h ]; \
+	if [ -f $(DESTDIR)$(assertdir)/assert.h ]; \
 	then \
-	  if grep "__eprintf" $(assertdir)/assert.h; \
+	  if grep "__eprintf" $(DESTDIR)$(assertdir)/assert.h; \
 	    then \
-	    rm -f $(assertdir)/assert.h; \
-	    $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \
-	    chmod a-x $(assertdir)/assert.h; \
+	    rm -f $(DESTDIR)$(assertdir)/assert.h; \
+	    $(INSTALL_DATA) $(srcdir)/assert.h $(DESTDIR)$(assertdir)/assert.h; \
+	    chmod a-x $(DESTDIR)$(assertdir)/assert.h; \
 	  else true; \
 	  fi; \
 	else \
-	  rm -f $(assertdir)/assert.h; \
-	  $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h; \
-	  chmod a-x $(assertdir)/assert.h; \
+	  rm -f $(DESTDIR)$(assertdir)/assert.h; \
+	  $(INSTALL_DATA) $(srcdir)/assert.h $(DESTDIR)$(assertdir)/assert.h; \
+	  chmod a-x $(DESTDIR)$(assertdir)/assert.h; \
 	fi
-	-rm -f $(libsubdir)/include/syslimits.h
-	$(INSTALL_DATA) $(srcdir)/gsyslimits.h $(libsubdir)/include/syslimits.h
-	chmod a-x $(libsubdir)/include/syslimits.h
-	-rm -f $(libsubdir)/include/varargs.h
-	$(INSTALL_DATA) $(srcdir)/gvarargs.h $(libsubdir)/include/varargs.h
-	chmod a-x $(libsubdir)/include/varargs.h
-	-rm -f $(libsubdir)/include/stdarg.h
-	$(INSTALL_DATA) $(srcdir)/gstdarg.h $(libsubdir)/include/stdarg.h
-	chmod a-x $(libsubdir)/include/stdarg.h
-	-rm -f $(libsubdir)/include/stddef.h
-	$(INSTALL_DATA) $(srcdir)/gstddef.h $(libsubdir)/include/stddef.h
-	chmod a-x $(libsubdir)/include/stddef.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/syslimits.h
+	$(INSTALL_DATA) $(srcdir)/gsyslimits.h $(DESTDIR)$(libsubdir)/include/syslimits.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/syslimits.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/varargs.h
+	$(INSTALL_DATA) $(srcdir)/gvarargs.h $(DESTDIR)$(libsubdir)/include/varargs.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/varargs.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/stdarg.h
+	$(INSTALL_DATA) $(srcdir)/gstdarg.h $(DESTDIR)$(libsubdir)/include/stdarg.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/stdarg.h
+	-rm -f $(DESTDIR)$(libsubdir)/include/stddef.h
+	$(INSTALL_DATA) $(srcdir)/gstddef.h $(DESTDIR)$(libsubdir)/include/stddef.h
+	chmod a-x $(DESTDIR)$(libsubdir)/include/stddef.h
 # This is turned off because fixinc.svr4 can now get it directly from srcdir.
 ## Copy byteorder.h into the object file directory 
 ## so that fixinc.svr4 can get at it if necessary.
@@ -1619,13 +1643,13 @@ install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h gsy
 
 # Run fixincludes in the proper directory.
 install-fixincludes: install-headers
-	rm -rf $(libsubdir)/tmp
-	mkdir $(libsubdir)/tmp
+	rm -rf $(DESTDIR)$(libsubdir)/tmp
+	mkdir $(DESTDIR)$(libsubdir)/tmp
 # Move aside the headers that come from GCC; delete all else.
 # The sed command gets just the last file name component;
 # this is necessary because VPATH could add a dirname.
 # Using basename would be simpler, but some systems don't have it.
-	cd $(libsubdir)/include; \
+	cd $(DESTDIR)$(libsubdir)/include; \
 	for file in $(INSTALLED_H); do \
 	  realfile=`echo $$file | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
 	  mv $$realfile ../tmp; \
@@ -1635,36 +1659,36 @@ install-fixincludes: install-headers
 	for dir in $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS); do \
 	  if [ -d $$dir ]; \
 	  then \
-	    $(srcdir)/$(FIXINCLUDES) $(libsubdir)/include $$dir $(srcdir); \
+	    $(srcdir)/$(FIXINCLUDES) $(DESTDIR)$(libsubdir)/include $$dir $(srcdir); \
 	  else true; fi; \
 	done
-	-cd $(libsubdir)/include; \
+	-cd $(DESTDIR)$(libsubdir)/include; \
 	if [ -f limits.h ]; then \
 	  rm -f ../tmp/syslimits.h; \
 	  cp limits.h ../tmp/syslimits.h; \
 	else true; fi
 # Bring back gcc's header files.
-	cd $(libsubdir)/include; mv ../tmp/* .; rmdir ../tmp
+	cd $(DESTDIR)$(libsubdir)/include; mv ../tmp/* .; rmdir ../tmp
 # Install the README
-	$(INSTALL_DATA) $(srcdir)/README-fixinc $(libsubdir)/include/README
-	chmod a-x $(libsubdir)/include/README
+	$(INSTALL_DATA) $(srcdir)/README-fixinc $(DESTDIR)$(libsubdir)/include/README
+	chmod a-x $(DESTDIR)$(libsubdir)/include/README
 
 # Use this target to install the program `collect2' under the name `ld'.
 install-collect2: collect2
-	$(INSTALL_PROGRAM) collect2 $(libsubdir)/ld
+	$(INSTALL_PROGRAM) collect2 $(DESTDIR)$(libsubdir)/ld
 # Install the driver program as $(libsubdir)/gcc for collect2.
-	$(INSTALL_PROGRAM) xgcc $(libsubdir)/gcc
+	$(INSTALL_PROGRAM) xgcc $(DESTDIR)$(libsubdir)/gcc
 
 # Cancel installation by deleting the installed files.
 uninstall:
-	-rm -rf $(libsubdir)
-	-rm -rf $(bindir)/gcc
-	-rm -rf $(bindir)/protoize
-	-rm -rf $(bindir)/unprotoize
-	-rm -rf $(mandir)/gcc$(manext)
-	-rm -rf $(mandir)/cccp$(manext)
-	-rm -rf $(mandir)/protoize$(manext)
-	-rm -rf $(mandir)/unprotoize$(manext)
+	-rm -rf $(DESTDIR)$(libsubdir)
+	-rm -rf $(DESTDIR)$(bindir)/gcc
+	-rm -rf $(DESTDIR)$(bindir)/protoize
+	-rm -rf $(DESTDIR)$(bindir)/unprotoize
+	-rm -rf $(DESTDIR)$(mandir)/gcc$(manext)
+	-rm -rf $(DESTDIR)$(mandir)/cccp$(manext)
+	-rm -rf $(DESTDIR)$(mandir)/protoize$(manext)
+	-rm -rf $(DESTDIR)$(mandir)/unprotoize$(manext)
 
 # These exist for maintenance purposes.
 
diff --git a/c-decl.c b/c-decl.c
index 0532418..7de04f0 100644
--- a/c-decl.c
+++ b/c-decl.c
@@ -2805,7 +2805,7 @@ init_decl_processing ()
   builtin_function ("__builtin_classify_type", default_function_type,
 		    BUILT_IN_CLASSIFY_TYPE, NULL_PTR);
   builtin_function ("__builtin_next_arg",
-		    build_function_type (ptr_type_node, endlink),
+		    build_function_type (ptr_type_node, NULL_TREE),
 		    BUILT_IN_NEXT_ARG, NULL_PTR);
   builtin_function ("__builtin_args_info",
 		    build_function_type (integer_type_node,
diff --git a/cccp.c b/cccp.c
index 887db79..6dcc347 100644
--- a/cccp.c
+++ b/cccp.c
@@ -75,9 +75,11 @@ typedef unsigned char U_CHAR;
 #include <sys/stat.h>
 #include <ctype.h>
 #include <stdio.h>
+#include <errno.h>		/* This defines "errno" properly */
 
 #ifndef VMS
 #ifndef USG
+#include <time.h>
 #include <sys/time.h>		/* for __DATE__ and __TIME__ */
 #include <sys/resource.h>
 #else
@@ -179,8 +181,13 @@ extern char *getenv ();
 extern FILE *fdopen ();
 extern char *version_string;
 extern struct tm *localtime ();
+
+#ifndef HAVE_STRERROR
 extern int sys_nerr;
 extern char *sys_errlist[];
+#else
+char *strerror ();
+#endif
 
 #ifndef errno
 extern int errno;
@@ -534,13 +541,25 @@ static struct default_include { char *fname; int cplusplus; } include_defaults_a
   = {
     /* Pick up GNU C++ specific include files.  */
     { GPLUSPLUS_INCLUDE_DIR, 1},
-    { GCC_INCLUDE_DIR, 0},
 #ifdef CROSS_COMPILE
+    /* This is the dir for fixincludes.  Put it just before
+       the files that we fix.  */
+    { GCC_INCLUDE_DIR, 0},
     /* For cross-compilation, this dir name is generated
        automatically in Makefile.in.  */
     { CROSS_INCLUDE_DIR, 0 },
+    /* This is another place that the target system's headers might be.  */
+    { TOOL_INCLUDE_DIR, 0},
 #else /* not CROSS_COMPILE */
+    /* This should be /use/local/include and should come before
+       the fixincludes-fixed header files.  */
     { LOCAL_INCLUDE_DIR, 0},
+    /* This is here ahead of GCC_INCLUDE_DIR because assert.h goes here.
+       Likewise, behind LOCAL_INCLUDE_DIR, where glibc puts its assert.h.  */
+    { TOOL_INCLUDE_DIR, 0},
+    /* This is the dir for fixincludes.  Put it just before
+       the files that we fix.  */
+    { GCC_INCLUDE_DIR, 0},
     /* Some systems have an extra dir of include files.  */
 #ifdef SYSTEM_INCLUDE_DIR
     { SYSTEM_INCLUDE_DIR, 0},
@@ -7589,6 +7608,27 @@ delete_newlines (start, length)
   return obp - start;
 }
 
+/*
+ * my_strerror - return the descriptive text associated with an `errno' code.
+ */
+
+char *
+my_strerror (errnum)
+     int errnum;
+{
+  char *result;
+
+#ifndef HAVE_STRERROR
+  result = (char *) ((errnum < sys_nerr) ? sys_errlist[errnum] : 0);
+#else
+  result = strerror (errnum);
+#endif
+  if (!result)
+    result = "undocumented I/O error";
+
+  return result;
+}
+
 /*
  * error - print error message and increment count of errors.
  */
@@ -7635,11 +7675,7 @@ error_from_errno (name)
 
   if (ip != NULL)
     fprintf (stderr, "%s:%d: ", ip->nominal_fname, ip->lineno);
-
-  if (errno < sys_nerr)
-    fprintf (stderr, "%s: %s\n", name, sys_errlist[errno]);
-  else
-    fprintf (stderr, "%s: undocumented I/O error\n", name);
+  fprintf (stderr, "%s: %s\n", name, my_strerror (errno));
 
   errors++;
 }
@@ -8539,10 +8575,7 @@ perror_with_name (name)
      char *name;
 {
   fprintf (stderr, "%s: ", progname);
-  if (errno < sys_nerr)
-    fprintf (stderr, "%s: %s\n", name, sys_errlist[errno]);
-  else
-    fprintf (stderr, "%s: undocumented I/O error\n", name);
+  fprintf (stderr, "%s: %s\n", name, my_strerror (errno));
   errors++;
 }
 
diff --git a/collect2.c b/collect2.c
index 70c14ec..50b9b9c 100644
--- a/collect2.c
+++ b/collect2.c
@@ -230,6 +230,9 @@ char *
 my_strerror (e)
      int e;
 {
+#ifdef HAVE_STRERROR
+  return strerror (e);
+#else
   extern char *sys_errlist[];
   extern int sys_nerr;
   static char buffer[30];
@@ -242,6 +245,7 @@ my_strerror (e)
 
   sprintf (buffer, "Unknown error %d", e);
   return buffer;
+#endif
 }
 
 /* Delete tempfiles and exit function.  */
diff --git a/combine.c b/combine.c
index 331e6ce..532376e 100644
--- a/combine.c
+++ b/combine.c
@@ -74,7 +74,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
    combine anyway.  */
 
 #include "config.h"
+#ifdef __STDC__
+#include <stdarg.h>
+#else
 #include "gvarargs.h"
+#endif
 #include "rtl.h"
 #include "flags.h"
 #include "regs.h"
@@ -366,7 +370,7 @@ static int merge_outer_ops ();
 static rtx simplify_shift_const ();
 static int recog_for_combine ();
 static rtx gen_lowpart_for_combine ();
-static rtx gen_rtx_combine ();
+static rtx gen_rtx_combine PVPROTO((enum rtx_code code, enum machine_mode mode, ...));
 static rtx gen_binary ();
 static rtx gen_unary ();
 static enum rtx_code simplify_comparison ();
@@ -7495,21 +7499,26 @@ gen_lowpart_for_combine (mode, x)
 
 /*VARARGS2*/
 static rtx
-gen_rtx_combine (va_alist)
-     va_dcl
+gen_rtx_combine VPROTO((enum rtx_code code, enum machine_mode mode, ...))
 {
-  va_list p;
+#ifndef __STDC__
   enum rtx_code code;
   enum machine_mode mode;
+#endif
+  va_list p;
   int n_args;
   rtx args[3];
   int i, j;
   char *fmt;
   rtx rt;
 
-  va_start (p);
+  VA_START (p, mode);
+
+#ifndef __STDC__
   code = va_arg (p, enum rtx_code);
   mode = va_arg (p, enum machine_mode);
+#endif
+
   n_args = GET_RTX_LENGTH (code);
   fmt = GET_RTX_FORMAT (code);
 
diff --git a/config/i386linux-aout.h b/config/i386linux-aout.h
new file mode 100644
index 0000000..a469c58
--- /dev/null
+++ b/config/i386linux-aout.h
@@ -0,0 +1,76 @@
+/* Definitions for Intel 386 running Linux
+   Copyright (C) 1992, 1994, 1995 Free Software Foundation, Inc.
+   Contributed by H.J. Lu (hjl@nynexst.com)
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* This is tested by i386/gas.h.  */
+#define YES_UNDERSCORES
+
+#include <i386gstabs.h>
+#include <linux-aout.h>	/* some common stuff */
+
+/* Specify predefined symbols in preprocessor.  */
+
+#undef CPP_PREDEFINES
+#define CPP_PREDEFINES "-Dunix -Di386 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(i386) -Amachine(i386)"
+
+#undef CPP_SPEC
+#if TARGET_CPU_DEFAULT == 2
+#define CPP_SPEC "%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{!m386:-D__i486__} %{posix:-D_POSIX_SOURCE}"
+#else
+#define CPP_SPEC "%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{m486:-D__i486__} %{posix:-D_POSIX_SOURCE}"
+#endif
+
+#undef SIZE_TYPE
+#define SIZE_TYPE "unsigned int"
+
+#undef PTRDIFF_TYPE
+#define PTRDIFF_TYPE "int"
+
+#undef WCHAR_TYPE
+#define WCHAR_TYPE "long int"
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE BITS_PER_WORD
+
+/* Don't default to pcc-struct-return, because gcc is the only compiler,
+   and we want to retain compatibility with older gcc versions.  */
+#define DEFAULT_PCC_STRUCT_RETURN 0
+
+#undef LIB_SPEC
+
+#if 1
+/* We no longer link with libc_p.a or libg.a by default. If you
+ * want to profile or debug the Linux C library, please add
+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.
+ */
+#define LIB_SPEC \
+"%{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} %{!ggdb:-lc} %{ggdb:-lg}"
+#else    
+#define LIB_SPEC \
+"%{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \
+ %{!p:%{!pg:%{!g*:-lc} %{g*:-lg -static}}}" 
+#endif
+
+
+#undef LINK_SPEC
+#define LINK_SPEC	"-m i386linux"
+
+/* Get perform_* macros to build libgcc.a.  */
+#include "i386perform.h"
diff --git a/config/i386linux.h b/config/i386linux.h
index 5b2e96a..ef217b3 100644
--- a/config/i386linux.h
+++ b/config/i386linux.h
@@ -1,84 +1,235 @@
-/* Definitions for Intel 386 running Linux
- * Copyright (C) 1992 Free Software Foundation, Inc.
- *
- * Written by H.J. Lu (hlu@eecs.wsu.edu)
- *
- * Linux is a POSIX.1 compatible UNIX clone for i386, which uses GNU
- * stuffs as the native stuffs.
- */
-
-#if 0	/* The FSF has fixed the known bugs. But ....... */
-
-/* Linux has a hacked gas 1.38.1, which can handle repz, repnz
- * and fildll.
- */
-
-#define GOOD_GAS
-
-#endif
-
-/* This is tested by i386gas.h.  */
-#define YES_UNDERSCORES
-
-#include "i386gstabs.h"
-
-/* Specify predefined symbols in preprocessor.  */
-
-#undef CPP_PREDEFINES
-#define CPP_PREDEFINES "-Dunix -Di386 -Dlinux"
+/* Definitions for Intel 386 running Linux with ELF format
+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.
+   Contributed by Eric Youngdale.
+   Modified for stabs-in-ELF by H.J. Lu.
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#define LINUX_DEFAULT_ELF
+
+/* A lie, I guess, but the general idea behind linux/ELF is that we are
+   supposed to be outputting something that will assemble under SVr4.
+   This gets us pretty close.  */
+#include <i386.h>	/* Base i386 target machine definitions */
+#include <att386.h>	/* Use the i386 AT&T assembler syntax */
+#include <linux.h>	/* some common stuff */
+
+#undef TARGET_VERSION
+#define TARGET_VERSION fprintf (stderr, " (i386 Linux/ELF)");
+
+/* The svr4 ABI for the i386 says that records and unions are returned
+   in memory.  */
+#undef DEFAULT_PCC_STRUCT_RETURN
+#define DEFAULT_PCC_STRUCT_RETURN 1
+
+/* This is how to output an element of a case-vector that is relative.
+   This is only used for PIC code.  See comments by the `casesi' insn in
+   i386.md for an explanation of the expression this outputs. */
+#undef ASM_OUTPUT_ADDR_DIFF_ELT
+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) \
+  fprintf (FILE, "\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\n", LPREFIX, VALUE)
+
+/* Indicate that jump tables go in the text section.  This is
+   necessary when compiling PIC code.  */
+#define JUMP_TABLES_IN_TEXT_SECTION
+
+/* Copy this from the svr4 specifications... */
+/* Define the register numbers to be used in Dwarf debugging information.
+   The SVR4 reference port C compiler uses the following register numbers
+   in its Dwarf output code:
+	0 for %eax (gnu regno = 0)
+	1 for %ecx (gnu regno = 2)
+	2 for %edx (gnu regno = 1)
+	3 for %ebx (gnu regno = 3)
+	4 for %esp (gnu regno = 7)
+	5 for %ebp (gnu regno = 6)
+	6 for %esi (gnu regno = 4)
+	7 for %edi (gnu regno = 5)
+   The following three DWARF register numbers are never generated by
+   the SVR4 C compiler or by the GNU compilers, but SDB on x86/svr4
+   believes these numbers have these meanings.
+	8  for %eip    (no gnu equivalent)
+	9  for %eflags (no gnu equivalent)
+	10 for %trapno (no gnu equivalent)
+   It is not at all clear how we should number the FP stack registers
+   for the x86 architecture.  If the version of SDB on x86/svr4 were
+   a bit less brain dead with respect to floating-point then we would
+   have a precedent to follow with respect to DWARF register numbers
+   for x86 FP registers, but the SDB on x86/svr4 is so completely
+   broken with respect to FP registers that it is hardly worth thinking
+   of it as something to strive for compatibility with.
+   The version of x86/svr4 SDB I have at the moment does (partially)
+   seem to believe that DWARF register number 11 is associated with
+   the x86 register %st(0), but that's about all.  Higher DWARF
+   register numbers don't seem to be associated with anything in
+   particular, and even for DWARF regno 11, SDB only seems to under-
+   stand that it should say that a variable lives in %st(0) (when
+   asked via an `=' command) if we said it was in DWARF regno 11,
+   but SDB still prints garbage when asked for the value of the
+   variable in question (via a `/' command).
+   (Also note that the labels SDB prints for various FP stack regs
+   when doing an `x' command are all wrong.)
+   Note that these problems generally don't affect the native SVR4
+   C compiler because it doesn't allow the use of -O with -g and
+   because when it is *not* optimizing, it allocates a memory
+   location for each floating-point variable, and the memory
+   location is what gets described in the DWARF AT_location
+   attribute for the variable in question.
+   Regardless of the severe mental illness of the x86/svr4 SDB, we
+   do something sensible here and we use the following DWARF
+   register numbers.  Note that these are all stack-top-relative
+   numbers.
+	11 for %st(0) (gnu regno = 8)
+	12 for %st(1) (gnu regno = 9)
+	13 for %st(2) (gnu regno = 10)
+	14 for %st(3) (gnu regno = 11)
+	15 for %st(4) (gnu regno = 12)
+	16 for %st(5) (gnu regno = 13)
+	17 for %st(6) (gnu regno = 14)
+	18 for %st(7) (gnu regno = 15)
+*/
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(n) \
+((n) == 0 ? 0 \
+ : (n) == 1 ? 2 \
+ : (n) == 2 ? 1 \
+ : (n) == 3 ? 3 \
+ : (n) == 4 ? 6 \
+ : (n) == 5 ? 7 \
+ : (n) == 6 ? 5 \
+ : (n) == 7 ? 4 \
+ : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+3 \
+ : (-1))
+
+/* Output assembler code to FILE to increment profiler label # LABELNO
+   for profiling a function entry.  */
+
+#undef FUNCTION_PROFILER
+#define FUNCTION_PROFILER(FILE, LABELNO)  \
+{									\
+  if (flag_pic)								\
+    {									\
+      fprintf (FILE, "\tleal %sP%d@GOTOFF(%%ebx),%%edx\n",		\
+	       LPREFIX, (LABELNO));					\
+      fprintf (FILE, "\tcall *mcount@GOT(%%ebx)\n");			\
+    }									\
+  else									\
+    {									\
+      fprintf (FILE, "\tmovl $%sP%d,%%edx\n", LPREFIX, (LABELNO));	\
+      fprintf (FILE, "\tcall mcount\n");				\
+    }									\
+}
 
 #undef SIZE_TYPE
 #define SIZE_TYPE "unsigned int"
-
+ 
 #undef PTRDIFF_TYPE
 #define PTRDIFF_TYPE "int"
-
+  
 #undef WCHAR_TYPE
 #define WCHAR_TYPE "long int"
-
+   
 #undef WCHAR_TYPE_SIZE
 #define WCHAR_TYPE_SIZE BITS_PER_WORD
+    
+#undef CPP_PREDEFINES
+#define CPP_PREDEFINES "-D__ELF__ -Dunix -Di386 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(i386) -Amachine(i386)"
 
-#undef HAVE_ATEXIT
-#define HAVE_ATEXIT
-
-/* Linux uses ctype from glibc.a. I am not sure how complete it is.
- * For now, we play safe. It may change later.
- */
-#if 0
-#undef MULTIBYTE_CHARS
-#define MULTIBYTE_CHARS	1
+#undef CPP_SPEC
+#ifdef USE_GNULIBC_1
+#if TARGET_CPU_DEFAULT == 2
+#define CPP_SPEC "%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{!m386:-D__i486__} %{posix:-D_POSIX_SOURCE}"
+#else
+#define CPP_SPEC "%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{m486:-D__i486__} %{posix:-D_POSIX_SOURCE}"
 #endif
-
-#undef LIB_SPEC
-#define LIB_SPEC "%{g*:-lg} %{!g*:%{!p:%{!pg:-lc}}%{p:-lgmon -lc_p}%{pg:-lgmon -lc_p}}"
-
-
-#undef STARTFILE_SPEC
-#undef GPLUSPLUS_INCLUDE_DIR
-
-#ifdef CROSS_COMPILE
-
-/*
- * For cross-compile, we just need to search `$(tooldir)/lib'
- */
-
-#define STARTFILE_SPEC  \
-  "%{g*:crt0.o%s -static} %{!g*:%{pg:gcrt0.o%s -static} %{!pg:%{p:gcrt0.o%s -static} %{!p:crt0.o%s %{!static:%{nojump:-nojump}} %{static:-static}}}} -L"TOOLDIR"/lib"
-
-/*
- *The cross-compile uses this.
+#else /* not USE_GNULIBC_1 */
+#define CPP_SPEC "%(cpp_cpu) %[cpp_cpu] %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}"
+#endif /* not USE_GNULIBC_1 */
+
+#undef LIBGCC_SPEC
+#define LIBGCC_SPEC "-lgcc"
+
+#undef	LIB_SPEC
+#ifdef USE_GNULIBC_1
+#if 1
+/* We no longer link with libc_p.a or libg.a by default. If you
+ * want to profile or debug the Linux C library, please add
+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.
  */
-#define GPLUSPLUS_INCLUDE_DIR TOOLDIR"/g++-include"
-
+#define LIB_SPEC \
+  "%{!shared: %{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} \
+     %{!ggdb:-lc} %{ggdb:-lg}}"
 #else
-
-#define STARTFILE_SPEC  \
-  "%{g*:crt0.o%s -static} %{!g*:%{pg:gcrt0.o%s -static} %{!pg:%{p:gcrt0.o%s -static} %{!p:crt0.o%s %{!static:%{nojump:-nojump}} %{static:-static}}}}"
-
-/*
- *The native Linux system uses this.
- */
-#define GPLUSPLUS_INCLUDE_DIR "/usr/g++-include"
-
+#define LIB_SPEC \
+  "%{!shared: \
+     %{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \
+       %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}}"
+#endif
+#else
+#define LIB_SPEC \
+  "%{!shared: %{mieee-fp:-lieee} %{pthread:-lpthread} \
+	%{profile:-lc_p} %{!profile: -lc}}"
+#endif /* not USE_GNULIBC_1 */
+
+/* Provide a LINK_SPEC appropriate for Linux.  Here we provide support
+   for the special GCC options -static and -shared, which allow us to
+   link things in one of these three modes by applying the appropriate
+   combinations of options at link-time. We like to support here for
+   as many of the other GNU linker options as possible. But I don't
+   have the time to search for those flags. I am sure how to add
+   support for -soname shared_object_name. H.J.
+
+   I took out %{v:%{!V:-V}}. It is too much :-(. They can use
+   -Wl,-V.
+
+   When the -shared link option is used a final link is not being
+   done.  */
+
+/* If ELF is the default format, we should not use /lib/elf. */
+
+#undef	LINK_SPEC
+#ifdef USE_GNULIBC_1
+#ifndef LINUX_DEFAULT_ELF
+#define LINK_SPEC "-m elf_i386 %{shared:-shared} \
+  %{!shared: \
+    %{!ibcs: \
+      %{!static: \
+	%{rdynamic:-export-dynamic} \
+	%{!dynamic-linker:-dynamic-linker /lib/elf/ld-linux.so.1} \
+	%{!rpath:-rpath /lib/elf/}} %{static:-static}}}"
+#else
+#define LINK_SPEC "-m elf_i386 %{shared:-shared} \
+  %{!shared: \
+    %{!ibcs: \
+      %{!static: \
+	%{rdynamic:-export-dynamic} \
+	%{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.1}} \
+	%{static:-static}}}"
 #endif
+#else /* not USE_GNULIBC_1 */
+#define LINK_SPEC "-m elf_i386 %{shared:-shared} \
+  %{!shared: \
+    %{!ibcs: \
+      %{!static: \
+	%{rdynamic:-export-dynamic} \
+	%{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.2}} \
+	%{static:-static}}}"
+#endif /* not USE_GNULIBC_1 */
+
+/* Get perform_* macros to build libgcc.a.  */
+#include "i386perform.h"
diff --git a/config/i386perform.h b/config/i386perform.h
new file mode 100644
index 0000000..c1a4170
--- /dev/null
+++ b/config/i386perform.h
@@ -0,0 +1,93 @@
+/* Definitions for AT&T assembler syntax for the Intel 80386.
+   Copyright (C) 1988 Free Software Foundation, Inc.
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
+
+/* Defines to be able to build libgcc.a with GCC.  */
+
+/* It might seem that these are not important, since gcc 2 will never
+   call libgcc for these functions.  But programs might be linked with
+   code compiled by gcc 1, and then these will be used.  */
+
+/* The arg names used to be a and b, but `a' appears inside strings
+   and that confuses non-ANSI cpp.  */
+
+#define perform_udivsi3(arg0,arg1)					\
+{									\
+  register int dx asm("dx");						\
+  register int ax asm("ax");						\
+									\
+  dx = 0;								\
+  ax = arg0;								\
+  asm ("divl %3" : "=a" (ax), "=d" (dx) : "a" (ax), "g" (arg1), "d" (dx)); \
+  return ax;								\
+}
+
+#define perform_divsi3(arg0,arg1)					\
+{									\
+  register int dx asm("dx");						\
+  register int ax asm("ax");						\
+									\
+  ax = arg0;								\
+  asm ("cltd\n\tidivl %3" : "=a" (ax), "=d" (dx) : "a" (ax), "g" (arg1)); \
+  return ax;								\
+}
+
+#define perform_umodsi3(arg0,arg1)					\
+{									\
+  register int dx asm("dx");						\
+  register int ax asm("ax");						\
+									\
+  dx = 0;								\
+  ax = arg0;								\
+  asm ("divl %3" : "=a" (ax), "=d" (dx) : "a" (ax), "g" (arg1), "d" (dx)); \
+  return dx;								\
+}
+
+#define perform_modsi3(arg0,arg1)					\
+{									\
+  register int dx asm("dx");						\
+  register int ax asm("ax");						\
+									\
+  ax = arg0;								\
+  asm ("cltd\n\tidivl %3" : "=a" (ax), "=d" (dx) : "a" (ax), "g" (arg1)); \
+  return dx;								\
+}
+
+#define perform_fixdfsi(arg0)						\
+{									\
+  auto unsigned short ostatus;						\
+  auto unsigned short nstatus;						\
+  auto int ret;								\
+  auto double tmp;							\
+									\
+  &ostatus;			/* guarantee these land in memory */	\
+  &nstatus;								\
+  &ret;									\
+  &tmp;									\
+									\
+  asm volatile ("fnstcw %0" : "=m" (ostatus));				\
+  nstatus = ostatus | 0x0c00;						\
+  asm volatile ("fldcw %0" : /* no outputs */ : "m" (nstatus));		\
+  tmp = arg0;								\
+  asm volatile ("fldl %0" : /* no outputs */ : "m" (tmp));		\
+  asm volatile ("fistpl %0" : "=m" (ret));				\
+  asm volatile ("fldcw %0" : /* no outputs */ : "m" (ostatus));		\
+									\
+  return ret;								\
+}
+
diff --git a/config/linux-aout.h b/config/linux-aout.h
new file mode 100644
index 0000000..29fb8e9
--- /dev/null
+++ b/config/linux-aout.h
@@ -0,0 +1,51 @@
+/* Definitions for Linux
+   Copyright (C) 1995 Free Software Foundation, Inc.
+   Contributed by H.J. Lu (hjl@nynexst.com)
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* Don't assume anything about the header files. */
+#define NO_IMPLICIT_EXTERN_C
+
+#undef HAVE_ATEXIT
+#define HAVE_ATEXIT
+
+/* Linux uses ctype from glibc.a. I am not sure how complete it is.
+   For now, we play safe. It may change later. */
+
+#if 0
+#undef MULTIBYTE_CHARS
+#define MULTIBYTE_CHARS	1
+#endif
+
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC  "%{pg:gcrt0.o%s} %{!pg:%{p:gcrt0.o%s} %{!p:crt0.o%s}} %{static:-static}"
+
+/* There are conflicting reports about whether this system uses
+   a different assembler syntax.  wilson@cygnus.com says # is right.  */
+#undef COMMENT_BEGIN
+#define COMMENT_BEGIN "#"
+
+#undef ASM_APP_ON
+#define ASM_APP_ON "#APP\n"
+
+#undef ASM_APP_OFF
+#define ASM_APP_OFF "#NO_APP\n"
+
+/* We need that too. */
+#define HANDLE_SYSV_PRAGMA
diff --git a/config/linux.h b/config/linux.h
new file mode 100644
index 0000000..c82cfe2
--- /dev/null
+++ b/config/linux.h
@@ -0,0 +1,88 @@
+/* Definitions for Linux with ELF format
+   Copyright (C) 1995 Free Software Foundation, Inc.
+   Contributed by Eric Youngdale.
+   Modified for stabs-in-ELF by H.J. Lu.
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+/* Don't assume anything about the header files. */
+#define NO_IMPLICIT_EXTERN_C
+
+#undef HAVE_ATEXIT
+#define HAVE_ATEXIT
+
+/* Linux uses ctype from glibc.a. I am not sure how complete it is.
+   For now, we play safe. It may change later. */
+
+#if 0
+#undef MULTIBYTE_CHARS
+#define MULTIBYTE_CHARS 1
+#endif
+
+/* There are conflicting reports about whether this system uses
+   a different assembler syntax.  wilson@cygnus.com says # is right.  */
+#undef COMMENT_BEGIN
+#define COMMENT_BEGIN "#"
+
+#undef ASM_APP_ON
+#define ASM_APP_ON "#APP\n"
+
+#undef ASM_APP_OFF
+#define ASM_APP_OFF "#NO_APP\n"
+
+/* Use stabs instead of DWARF debug format.  */
+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG
+#include "svr4.h"
+
+#undef MD_EXEC_PREFIX
+#undef MD_STARTFILE_PREFIX
+
+/* Output at beginning of assembler file.  */
+/* The .file command should always begin the output.  */
+#undef ASM_FILE_START
+#define ASM_FILE_START(FILE)						\
+  do {									\
+	output_file_directive (FILE, main_input_filename);		\
+	fprintf (FILE, "\t.version\t\"01.01\"\n");			\
+  } while (0)
+
+#undef	LIBGCC_SPEC
+#define LIBGCC_SPEC \
+  "%{!shared:-lgcc}"
+
+
+/* Provide a STARTFILE_SPEC appropriate for Linux.  Here we add
+   the Linux magical crtbegin.o file (see crtstuff.c) which
+   provides part of the support for getting C++ file-scope static
+   object constructed before entering `main'. */
+   
+#undef	STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "%{!shared: \
+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\
+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}"
+
+/* Provide a ENDFILE_SPEC appropriate for Linux.  Here we tack on
+   the Linux magical crtend.o file (see crtstuff.c) which
+   provides part of the support for getting C++ file-scope static
+   object constructed before entering `main', followed by a normal
+   Linux "finalizer" file, `crtn.o'.  */
+
+#undef	ENDFILE_SPEC
+#define ENDFILE_SPEC \
+  "%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s"
diff --git a/config/svr4.h b/config/svr4.h
index c0fd18f..7f0cbad 100644
--- a/config/svr4.h
+++ b/config/svr4.h
@@ -1,8 +1,7 @@
-/* svr4.h  --  operating system specific defines to be used when
-   targeting GCC for some generic System V Release 4 system.
-   Copyright (C) 1991 Free Software Foundation, Inc.
-
-   Written by Ron Guilmette (rfg@ncd.com).
+/* Operating system specific defines to be used when targeting GCC for some
+   generic System V Release 4 system.
+   Copyright (C) 1991, 1994, 1995 Free Software Foundation, Inc.
+   Contributed by Ron Guilmette (rfg@segfault.us.com).
 
 This file is part of GNU CC.
 
@@ -18,7 +17,8 @@ GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to
-the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.
 
    To use this file, make up a file with a name like:
 
@@ -65,13 +65,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
    || (CHAR) == 'h' \
    || (CHAR) == 'z')
 
-/* This defines which multi-letter switches take arguments.  On svr4,
-   there are no such switches except those implemented by GCC itself.  */
-
-#define WORD_SWITCH_TAKES_ARG(STR)			\
- (!strcmp (STR, "include") || !strcmp (STR, "imacros")	\
-  || !strcmp (STR, "aux-info"))
-
 /* You should redefine CPP_PREDEFINES in any file which includes this one.
    The definition should be appropriate for the type of target system
    involved, and it should include any -A (assertion) options which are
@@ -122,17 +115,25 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 #define MD_STARTFILE_PREFIX "/usr/ccs/lib/"
 
 /* Provide a LIB_SPEC appropriate for svr4.  Here we tack on the default
-   standard C library (unless we are building a shared library) followed by
-   our own magical crtend.o file (see crtstuff.c) which provides part of
-   the support for getting C++ file-scope static object constructed before
+   standard C library (unless we are building a shared library).  */
+
+#undef	LIB_SPEC
+#define LIB_SPEC "%{!shared:%{!symbolic:-lc}}"
+
+/* Provide a LIBGCC_SPEC appropriate for svr4.  We also want to exclude
+   libgcc when -symbolic.  */
+
+#undef  LIBGCC_SPEC
+#define LIBGCC_SPEC "%{!shared:%{!symbolic:-lgcc}}"
+
+/* Provide an ENDFILE_SPEC appropriate for svr4.  Here we tack on our own
+   magical crtend.o file (see crtstuff.c) which provides part of the
+   support for getting C++ file-scope static object constructed before
    entering `main', followed by the normal svr3/svr4 "finalizer" file,
    which is either `gcrtn.o' or `crtn.o'.  */
 
-#undef	LIB_SPEC
-#define LIB_SPEC \
-  "%{!shared:%{!symbolic:-lc}} \
-  crtend.o%s \
-  %{!shared:%{!symbolic:%{pg:gcrtn.o}%{!pg:crtn.o%s}}}"
+#undef  ENDFILE_SPEC
+#define ENDFILE_SPEC "crtend.o%s %{pg:gcrtn.o}%{!pg:crtn.o%s}"
 
 /* Provide a LINK_SPEC appropriate for svr4.  Here we provide support
    for the special GCC options -static, -shared, and -symbolic which
@@ -161,8 +162,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 #define LINK_SPEC "%{h*} %{V} %{v:%{!V:-V}} \
 		   %{b} %{Wl,*:%*} \
 		   %{static:-dn -Bstatic} \
-		   %{shared:-G -dy} \
-		   %{symbolic:-Bsymbolic -G -dy} \
+		   %{shared:-G -dy -z text %{!h*:%{o*:-h %*}}} \
+		   %{symbolic:-Bsymbolic -G -dy -z text %{!h*:%{o*:-h %*}}} \
 		   %{G:-G} \
 		   %{YP,*} \
 		   %{!YP,*:%{p:-Y P,/usr/ccs/lib/libp:/usr/lib/libp:/usr/ccs/lib:/usr/lib} \
@@ -184,12 +185,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 #undef	STARTFILE_SPEC
 #define STARTFILE_SPEC "%{!shared: \
 			 %{!symbolic: \
-			  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}} \
-			  %{pg:gcrti.o%s}%{!pg:crti.o%s} \
-			  %{ansi:values-Xc.o%s} \
-			  %{!ansi: \
-			   %{traditional:values-Xt.o%s} \
-			   %{!traditional:values-Xa.o%s}}}} crtbegin.o%s"
+			  %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}\
+			%{pg:gcrti.o%s}%{!pg:crti.o%s} \
+			%{ansi:values-Xc.o%s} \
+			%{!ansi: \
+			 %{traditional:values-Xt.o%s} \
+			 %{!traditional:values-Xa.o%s}} \
+ 			crtbegin.o%s"
 
 /* Attach a special .ident directive to the end of the file to identify
    the version of GCC which compiled this code.  The format of the
@@ -244,6 +246,75 @@ do {				 				\
 
 #undef DBX_REGISTER_NUMBER
 
+/* gas on SVR4 supports the use of .stabs.  Permit -gstabs to be used
+   in general, although it will only work when using gas.  */
+
+#define DBX_DEBUGGING_INFO
+
+/* Use DWARF debugging info by default.  */
+
+#ifndef PREFERRED_DEBUGGING_TYPE
+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG
+#endif
+
+/* Make LBRAC and RBRAC addresses relative to the start of the
+   function.  The native Solaris stabs debugging format works this
+   way, gdb expects it, and it reduces the number of relocation
+   entries.  */
+
+#define DBX_BLOCKS_FUNCTION_RELATIVE 1
+
+/* When using stabs, gcc2_compiled must be a stabs entry, not an
+   ordinary symbol, or gdb won't see it.  Furthermore, since gdb reads
+   the input piecemeal, starting with each N_SO, it's a lot easier if
+   the gcc2 flag symbol is *after* the N_SO rather than before it.  So
+   we emit an N_OPT stab there.  */
+
+#define ASM_IDENTIFY_GCC(FILE)						\
+do									\
+  {									\
+    if (write_symbols != DBX_DEBUG)					\
+      fputs ("gcc2_compiled.:\n", FILE);				\
+  }									\
+while (0)
+
+#define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE)				\
+do									\
+  {									\
+    if (write_symbols == DBX_DEBUG)					\
+      fputs ("\t.stabs\t\"gcc2_compiled.\", 0x3c, 0, 0, 0\n", FILE);	\
+  }									\
+while (0)
+
+/* Like block addresses, stabs line numbers are relative to the
+   current function.  */
+
+#define ASM_OUTPUT_SOURCE_LINE(file, line)				\
+do									\
+  {									\
+    static int sym_lineno = 1;						\
+    fprintf (file, ".stabn 68,0,%d,.LM%d-",				\
+	     line, sym_lineno);						\
+    assemble_name (file,						\
+		   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\
+    fprintf (file, "\n.LM%d:\n", sym_lineno);				\
+    sym_lineno += 1;							\
+  }									\
+while (0)
+
+/* In order for relative line numbers to work, we must output the
+   stabs entry for the function name first.  */
+
+#define DBX_FUNCTION_FIRST
+
+/* Generate a blank trailing N_SO to mark the end of the .o file, since
+   we can't depend upon the linker to mark .o file boundaries with
+   embedded stabs.  */
+
+#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)			\
+  fprintf (FILE,							\
+	   "\t.text\n\t.stabs \"\",%d,0,0,.Letext\n.Letext:\n", N_SO)
+
 /* Define the actual types of some ANSI-mandated types.  (These
    definitions should work for most SVR4 systems).  */
 
@@ -324,7 +395,7 @@ do {									\
   sprintf (LABEL, "*.%s%d", PREFIX, NUM);				\
 } while (0)
 
-/* Output the label which preceeds a jumptable.  Note that for all svr4
+/* Output the label which precedes a jumptable.  Note that for all svr4
    systems where we actually generate jumptables (which is to say every
    svr4 target except i386, where we use casesi instead) we put the jump-
    tables into the .rodata section and since other stuff could have been
@@ -408,16 +479,33 @@ do {									\
 #define USE_CONST_SECTION	1
 
 #define CONST_SECTION_ASM_OP	".section\t.rodata"
-#define CTORS_SECTION_ASM_OP	".section\t.ctors,\"a\",@progbits"
-#define DTORS_SECTION_ASM_OP	".section\t.dtors,\"a\",@progbits"
 
-/* On svr4, we *do* have support for the .init section, and we can put
-   stuff in there to be executed before `main'.  We let crtstuff.c and
-   other files know this by defining the following symbol.  The definition
-   says how to change sections to the .init section.  This is the same
-   for all know svr4 assemblers.  */
+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.
+
+   Note that we want to give these sections the SHF_WRITE attribute
+   because these sections will actually contain data (i.e. tables of
+   addresses of functions in the current root executable or shared library
+   file) and, in the case of a shared library, the relocatable addresses
+   will have to be properly resolved/relocated (and then written into) by
+   the dynamic linker when it actually attaches the given shared library
+   to the executing process.  (Note that on SVR4, you may wish to use the
+   `-z text' option to the ELF linker, when building a shared library, as
+   an additional check that you are doing everything right.  But if you do
+   use the `-z text' option when building a shared library, you will get
+   errors unless the .ctors and .dtors sections are marked as writable
+   via the SHF_WRITE attribute.)  */
+
+#define CTORS_SECTION_ASM_OP	".section\t.ctors,\"aw\""
+#define DTORS_SECTION_ASM_OP	".section\t.dtors,\"aw\""
+
+/* On svr4, we *do* have support for the .init and .fini sections, and we
+   can put stuff in there to be executed before and after `main'.  We let
+   crtstuff.c and other files know this by defining the following symbols.
+   The definitions say how to change sections to the .init and .fini
+   sections.  This is the same for all known svr4 assemblers.  */
 
 #define INIT_SECTION_ASM_OP	".section\t.init"
+#define FINI_SECTION_ASM_OP	".section\t.fini"
 
 /* A default list of other sections which we might be "in" at any given
    time.  For targets that use additional sections (e.g. .tdesc) you
@@ -439,7 +527,7 @@ do {									\
 
 #define READONLY_DATA_SECTION() const_section ()
 
-extern void text_section();
+extern void text_section ();
 
 #define CONST_SECTION_FUNCTION						\
 void									\
@@ -513,7 +601,10 @@ dtors_section ()							\
   else if (TREE_CODE (DECL) == VAR_DECL)				\
     {									\
       if ((flag_pic && RELOC)						\
-	  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL))		\
+	  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)		\
+	  || !DECL_INITIAL (DECL)					\
+	  || (DECL_INITIAL (DECL) != error_mark_node			\
+	      && !TREE_CONSTANT (DECL_INITIAL (DECL))))			\
 	data_section ();						\
       else								\
 	const_section ();						\
@@ -539,7 +630,12 @@ dtors_section ()							\
 
 #define TYPE_ASM_OP	".type"
 #define SIZE_ASM_OP	".size"
-#define WEAK_ASM_OP	".weak"
+
+/* This is how we tell the assembler that a symbol is weak.  */
+
+#define ASM_WEAKEN_LABEL(FILE,NAME) \
+  do { fputs ("\t.weak\t", FILE); assemble_name (FILE, NAME); \
+       fputc ('\n', FILE); } while (0)
 
 /* The following macro defines the format used to output the second
    operand of the .type assembler directive.  Different svr4 assemblers
@@ -577,24 +673,6 @@ dtors_section ()							\
     ASM_OUTPUT_LABEL(FILE, NAME);					\
   } while (0)
 
-/* Write the extra assembler code needed to declare an object properly.  */
-
-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)			\
-  do {									\
-    fprintf (FILE, "\t%s\t ", TYPE_ASM_OP);				\
-    assemble_name (FILE, NAME);						\
-    putc (',', FILE);							\
-    fprintf (FILE, TYPE_OPERAND_FMT, "object");				\
-    putc ('\n', FILE);							\
-    if (!flag_inhibit_size_directive)					\
-      {									\
-	fprintf (FILE, "\t%s\t ", SIZE_ASM_OP);				\
-	assemble_name (FILE, NAME);					\
-	fprintf (FILE, ",%d\n",  int_size_in_bytes (TREE_TYPE (decl)));	\
-      }									\
-    ASM_OUTPUT_LABEL(FILE, NAME);					\
-  } while (0)
-
 /* This is how to declare the size of a function.  */
 
 #define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)			\
@@ -627,10 +705,11 @@ dtors_section ()							\
    in the table.  Note that we can use standard UN*X escape
    sequences for many control characters, but we don't use
    \a to represent BEL because some svr4 assemblers (e.g. on
-   the i386) don't know about that.   */
+   the i386) don't know about that.  Also, we don't use \v
+   since some versions of gas, such as 2.2 did not accept it.  */
 
 #define ESCAPES \
-"\1\1\1\1\1\1\1\1btnvfr\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\
+"\1\1\1\1\1\1\1\1btn\1fr\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\
 \0\0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\\\0\0\0\
 \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\
@@ -751,3 +830,6 @@ dtors_section ()							\
         fprintf ((FILE), "\"\n");					\
     }									\
   while (0)
+
+/* All SVR4 targets use the ELF object file format.  */
+#define OBJECT_FORMAT_ELF
diff --git a/config/t-linux b/config/t-linux
new file mode 100644
index 0000000..843fa1b
--- /dev/null
+++ b/config/t-linux
@@ -0,0 +1,10 @@
+# Don't run fixproto
+STMP_FIXPROTO =
+
+# Don't install "assert.h" in gcc. We use the one in glibc.
+INSTALL_ASSERT_H =
+
+# Compile crtbeginS.o and crtendS.o with pic.
+CRTSTUFF_T_CFLAGS_S = -fPIC
+# Compile libgcc2.a with pic.
+TARGET_LIBGCC2_CFLAGS = -fPIC
diff --git a/config/x-linux b/config/x-linux
index 76fc916..db1539e 100644
--- a/config/x-linux
+++ b/config/x-linux
@@ -1,5 +1,3 @@
 X_CFLAGS=-DPOSIX
 # we are native.
 prefix=/usr
-# no object c, why bother.
-LANGUAGES = c c++ proto
diff --git a/config/xm-i386.h b/config/xm-i386.h
index b617d9b..eb90681 100644
--- a/config/xm-i386.h
+++ b/config/xm-i386.h
@@ -38,6 +38,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
 
 /* If compiled with GNU C, use the built-in alloca */
 #ifdef __GNUC__
+#undef alloca
 #define alloca __builtin_alloca
 #endif
 
diff --git a/config/xm-linux.h b/config/xm-linux.h
index 39cd2f2..c9795dc 100644
--- a/config/xm-linux.h
+++ b/config/xm-linux.h
@@ -1,10 +1,39 @@
 /* Configuration for GCC for Intel i386 running Linux.
- *
- * Written by H.J. Lu (hlu@eecs.wsu.edu)
- */
+   Copyright (C) 1995 Free Software Foundation, Inc.
+   Contributed by H.J. Lu (hjl@nynexst.com)
+
+This file is part of GNU CC.
+
+GNU CC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU CC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU CC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
 
 #include "xm-i386.h"
-#include "xm-svr3.h"
+
+#define HAVE_VPRINTF
+
+#define HAVE_STRERROR
+
+#ifndef POSIX
+#define POSIX
+#endif
+
+#define DONT_DECLARE_SYS_SIGLIST
+
+/* We do have one, but I'd like to use the one come with gcc since
+   we have been doing that for a long time with USG defined.  H.J. */
+#define NO_STAB_H
 
 #undef BSTRING
 #define BSTRING
@@ -13,11 +42,3 @@
 #undef bzero
 #undef index
 #undef rindex
-
-#if 0 /* These conflict with stdlib.h in protoize, it is said,
-	 and there's no evidence they are actually needed.  */
-#undef malloc(n)
-#define malloc(n)	malloc ((n) ? (n) : 1)
-#undef calloc(n,e)
-#define calloc(n,e)	calloc (((n) ? (n) : 1), ((e) ? (e) : 1))
-#endif
diff --git a/configure b/configure
index f75c015..9bb1bdf 100755
--- a/configure
+++ b/configure
@@ -254,6 +254,7 @@ for machine in $canon_build $canon_host $canon_target; do
 	xmake_file=
 	tmake_file=
 	header_files=
+	extra_parts=
 	# Set this to force installation and use of collect2.
 	use_collect2=
 	# Set this to override the default target model.
@@ -375,12 +376,23 @@ for machine in $canon_build $canon_host $canon_target; do
 		tm_file=i386sun.h
 		use_collect2=yes
 		;;
-	i[34]86-*-linux*)               # Intel 80386's running Linux
+	i[34]86-*-linux*aout)               # Intel 80386's running Linux
 		cpu_type=i386
 		xm_file=xm-linux.h
 		xmake_file=x-linux
+		tm_file=i386linux-aout.h
+		fixincludes=Makefile.in
+		broken_install=yes
+		;;
+	i[34]86-*-linux*)               # Intel 80386's running Linux
+		cpu_type=i386               # with ELF support
+		xm_file=xm-linux.h
+		xmake_file=x-linux
 		tm_file=i386linux.h
+		tmake_file=t-linux
+		fixincludes=Makefile.in
 		broken_install=yes
+		extra_parts="crtbegin.o crtend.o crtbeginS.o crtendS.o"
 		;;
 	i486-ncr-sysv4*)		# NCR 3000 - i486 running system V.4
 		cpu_type=i386
@@ -1230,6 +1242,17 @@ else
 	mv Makefile.xx Makefile.tem
 fi
 
+# Set EXTRA_PARTS according to extra_parts.
+# This substitutes for lots of t-* files.
+if [ "x$extra_parts" = x ]
+then true
+else
+	rm -f Makefile.xx
+	sed "s/^EXTRA_PARTS =/EXTRA_PARTS = $extra_parts/" Makefile.tem > Makefile.xx
+	rm -f Makefile.tem
+	mv Makefile.xx Makefile.tem
+fi
+
 # Add a definition of USE_COLLECT2 if system wants one.
 # Also tell toplev.c what to do.
 # This substitutes for lots of t-* files.
diff --git a/crtstuff.c b/crtstuff.c
index 0b8fc36..d15a863 100644
--- a/crtstuff.c
+++ b/crtstuff.c
@@ -1,9 +1,9 @@
 /* Specialized bits of code needed to support construction and
    destruction of file-scope objects in C++ code.
 
-   Written by Ron Guilmette (rfg@ncd.com) with help from Richard Stallman.
+   Written by Ron Guilmette (rfg@netcom.com) with help from Richard Stallman.
 
-Copyright (C) 1991 Free Software Foundation, Inc.
+Copyright (C) 1991, 1994, 1995 Free Software Foundation, Inc.
 
 This file is part of GNU CC.
 
@@ -19,7 +19,8 @@ GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to
-the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
 
 /* As a special exception, if you link this library with files
    compiled with GCC to produce an executable, this does not cause
@@ -54,23 +55,89 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
 
 #include "tm.h"
 
+/* Provide default definitions for the pseudo-ops used to switch to the
+   .ctors and .dtors sections.
+ 
+   Note that we want to give these sections the SHF_WRITE attribute
+   because these sections will actually contain data (i.e. tables of
+   addresses of functions in the current root executable or shared library
+   file) and, in the case of a shared library, the relocatable addresses
+   will have to be properly resolved/relocated (and then written into) by
+   the dynamic linker when it actually attaches the given shared library
+   to the executing process.  (Note that on SVR4, you may wish to use the
+   `-z text' option to the ELF linker, when building a shared library, as
+   an additional check that you are doing everything right.  But if you do
+   use the `-z text' option when building a shared library, you will get
+   errors unless the .ctors and .dtors sections are marked as writable
+   via the SHF_WRITE attribute.)  */
+
 #ifndef CTORS_SECTION_ASM_OP
-#define CTORS_SECTION_ASM_OP	".section\t.ctors,\"a\",@progbits"
+#define CTORS_SECTION_ASM_OP	".section\t.ctors,\"aw\""
 #endif
 #ifndef DTORS_SECTION_ASM_OP
-#define DTORS_SECTION_ASM_OP	".section\t.dtors,\"a\",@progbits"
+#define DTORS_SECTION_ASM_OP	".section\t.dtors,\"aw\""
 #endif
 
+#ifdef OBJECT_FORMAT_ELF
+
+/*  Declare a pointer to void function type.  */
+typedef void (*func_ptr) (void);
+#define STATIC static
+
+#else  /* OBJECT_FORMAT_ELF */
+
 #include "gbl-ctors.h"
 
 #ifndef ON_EXIT
 #define ON_EXIT(a, b)
 #endif
+#define STATIC
+
+#endif /* OBJECT_FORMAT_ELF */
 
 #ifdef CRT_BEGIN
 
 #ifdef INIT_SECTION_ASM_OP
 
+#ifdef OBJECT_FORMAT_ELF
+
+/* Run all the global destructors on exit from the program.  */
+ 
+/* Some systems place the number of pointers in the first word of the
+   table.  On SVR4 however, that word is -1.  In all cases, the table is
+   null-terminated.  On SVR4, we start from the beginning of the list and
+   invoke each per-compilation-unit destructor routine in order
+   until we find that null.
+
+   Note that this function MUST be static.  There will be one of these
+   functions in each root executable and one in each shared library, but
+   although they all have the same code, each one is unique in that it
+   refers to one particular associated `__DTOR_LIST__' which belongs to the
+   same particular root executable or shared library file.  */
+
+static func_ptr __DTOR_LIST__[1];
+static void
+__do_global_dtors_aux ()
+{
+  func_ptr *p;
+  for (p = __DTOR_LIST__ + 1; *p; p++)
+    (*p) ();
+}
+
+/* Stick a call to __do_global_dtors_aux into the .fini section.  */
+static void
+fini_dummy ()
+{
+  asm (FINI_SECTION_ASM_OP);
+  __do_global_dtors_aux ();
+#ifdef FORCE_FINI_SECTION_ALIGN
+  FORCE_FINI_SECTION_ALIGN;
+#endif
+  asm (TEXT_SECTION_ASM_OP);
+}
+
+#else  /* OBJECT_FORMAT_ELF */
+
 /* The function __do_global_ctors_aux is compiled twice (once in crtbegin.o
    and once in crtend.o).  It must be declared static to avoid a link
    error.  Here, we define __do_global_ctors as an externally callable
@@ -92,12 +159,12 @@ void __do_global_ctors ()
 
 asm (INIT_SECTION_ASM_OP);	/* cc1 doesn't know that we are switching! */
 
-/* On some svr4 systems, the .init section preamble code provided in
-   crti.o may do some evil things which we have to undo before we reach
-   the function prologue code for __do_global_ctors (directly below).
-   For such systems, define the macro INIT_SECTION_PREAMBLE to
-   expand into the code needed to undo the actions of the crti.o file.  */
-   
+/* On some svr4 systems, the initial .init section preamble code provided in
+   crti.o may do something, such as bump the stack, which we have to 
+   undo before we reach the function prologue code for __do_global_ctors 
+   (directly below).  For such systems, define the macro INIT_SECTION_PREAMBLE
+   to expand into the code needed to undo the actions of the crti.o file. */
+
 #ifdef INIT_SECTION_PREAMBLE
   INIT_SECTION_PREAMBLE;
 #endif
@@ -110,30 +177,46 @@ asm (INIT_SECTION_ASM_OP);	/* cc1 doesn't know that we are switching! */
 static void
 __do_global_ctors_aux ()	/* prologue goes in .init section */
 {
+#ifdef FORCE_INIT_SECTION_ALIGN
+  FORCE_INIT_SECTION_ALIGN;	/* Explicit align before switch to .text */
+#endif
   asm (TEXT_SECTION_ASM_OP);	/* don't put epilogue and body in .init */
   DO_GLOBAL_CTORS_BODY;
   ON_EXIT (__do_global_dtors, 0);
 }
 
+#endif /* OBJECT_FORMAT_ELF */
 #endif /* defined(INIT_SECTION_ASM_OP) */
 
 /* Force cc1 to switch to .data section.  */
 static func_ptr force_to_data[0] = { };
 
+/* NOTE:  In order to be able to support SVR4 shared libraries, we arrange
+   to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,
+   __DTOR_END__ } per root executable and also one set of these symbols
+   per shared library.  So in any given whole process image, we may have
+   multiple definitions of each of these symbols.  In order to prevent
+   these definitions from conflicting with one another, and in order to
+   ensure that the proper lists are used for the initialization/finalization
+   of each individual shared library (respectively), we give these symbols
+   only internal (i.e. `static') linkage, and we also make it a point to
+   refer to only the __CTOR_END__ symbol in crtend.o and the __DTOR_LIST__
+   symbol in crtbegin.o, where they are defined.  */
+
 /* The -1 is a flag to __do_global_[cd]tors
    indicating that this table does not start with a count of elements.  */
 #ifdef CTOR_LIST_BEGIN
 CTOR_LIST_BEGIN;
 #else
 asm (CTORS_SECTION_ASM_OP);	/* cc1 doesn't know that we are switching! */
-func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) };
+STATIC func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) };
 #endif
 
 #ifdef DTOR_LIST_BEGIN
 DTOR_LIST_BEGIN;
 #else
 asm (DTORS_SECTION_ASM_OP);	/* cc1 doesn't know that we are switching! */
-func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };
+STATIC func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };
 #endif
 
 #endif /* defined(CRT_BEGIN) */
@@ -142,17 +225,66 @@ func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };
 
 #ifdef INIT_SECTION_ASM_OP
 
-/* A routine to invoke all of the global constructors upon entry to the
-   program.  We put this into the .init section (for systems that have
-   such a thing) so that we can properly perform the construction of
-   file-scope static-storage C++ objects within shared libraries.
+#ifdef OBJECT_FORMAT_ELF
 
-   This must be virtually identical to the one above so that we can
-   insure that the function prologue from the one above works correctly
-   with the epilogue from this one.  (They will both go into the .init
-   section as the first and last things (respectively) that the linker
-   will put in that section.)
-*/
+static func_ptr __CTOR_END__[1];
+static void
+__do_global_ctors_aux ()
+{
+  func_ptr *p;
+  for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)
+    (*p) ();
+}
+
+/* Stick a call to __do_global_ctors_aux into the .init section.  */
+static void
+init_dummy ()
+{
+  asm (INIT_SECTION_ASM_OP);
+  __do_global_ctors_aux ();
+#ifdef FORCE_INIT_SECTION_ALIGN
+  FORCE_INIT_SECTION_ALIGN;
+#endif
+  asm (TEXT_SECTION_ASM_OP);
+
+/* This is a kludge. The Linux dynamic linker needs  ___brk_addr, __environ
+   and atexit (). We have to make sure they are in the .dynsym section. We
+   accomplish it by making a dummy call here. This
+   code is never reached. */
+ 
+#if defined(__linux__) && defined(__PIC__)
+  {
+    extern void *___brk_addr;
+    extern char **__environ;
+
+    ___brk_addr = __environ;
+    atexit ();
+  }
+#endif
+}
+
+#else  /* OBJECT_FORMAT_ELF */
+
+/* Stick the real initialization code, followed by a normal sort of
+   function epilogue at the very end of the .init section for this
+   entire root executable file or for this entire shared library file.
+
+   Note that we use some tricks here to get *just* the body and just
+   a function epilogue (but no function prologue) into the .init
+   section of the crtend.o file.  Specifically, we switch to the .text
+   section, start to define a function, and then we switch to the .init
+   section just before the body code.
+
+   Earlier on, we put the corresponding function prologue into the .init
+   section of the crtbegin.o file (which will be linked in first).
+
+   Note that we want to invoke all constructors for C++ file-scope static-
+   storage objects AFTER any other possible initialization actions which
+   may be performed by the code in the .init section contributions made by
+   other libraries, etc.  That's because those other initializations may
+   include setup operations for very primitive things (e.g. initializing
+   the state of the floating-point coprocessor, etc.) which should be done
+   before we start to execute any of the user's code. */
 
 static void
 __do_global_ctors_aux ()	/* prologue goes in .text section */
@@ -162,23 +294,31 @@ __do_global_ctors_aux ()	/* prologue goes in .text section */
   ON_EXIT (__do_global_dtors, 0);
 }				/* epilogue and body go in .init section */
 
+#endif /* OBJECT_FORMAT_ELF */
+
 #endif /* defined(INIT_SECTION_ASM_OP) */
 
 /* Force cc1 to switch to .data section.  */
 static func_ptr force_to_data[0] = { };
 
+/* Put a word containing zero at the end of each of our two lists of function
+   addresses.  Note that the words defined here go into the .ctors and .dtors
+   sections of the crtend.o file, and since that file is always linked in
+   last, these words naturally end up at the very ends of the two lists
+   contained in these two sections.  */
+
 #ifdef CTOR_LIST_END
 CTOR_LIST_END;
 #else
 asm (CTORS_SECTION_ASM_OP);	/* cc1 doesn't know that we are switching! */
-func_ptr __CTOR_END__[1] = { (func_ptr) 0 };
+STATIC func_ptr __CTOR_END__[1] = { (func_ptr) 0 };
 #endif
 
 #ifdef DTOR_LIST_END
 DTOR_LIST_END;
 #else
 asm (DTORS_SECTION_ASM_OP);	/* cc1 doesn't know that we are switching! */
-func_ptr __DTOR_END__[1] = { (func_ptr) 0 };
+STATIC func_ptr __DTOR_END__[1] = { (func_ptr) 0 };
 #endif
 
 #endif /* defined(CRT_END) */
diff --git a/emit-rtl.c b/emit-rtl.c
index 1335308..357e23b 100644
--- a/emit-rtl.c
+++ b/emit-rtl.c
@@ -34,7 +34,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
    is the kind of rtx's they make and what arguments they use.  */
 
 #include "config.h"
+#ifdef __STDC__
+#include <stdarg.h>
+#else
 #include "gvarargs.h"
+#endif
 #include "rtl.h"
 #include "flags.h"
 #include "function.h"
@@ -231,19 +235,23 @@ void init_emit ();
 
 /*VARARGS2*/
 rtx
-gen_rtx (va_alist)
-     va_dcl
+gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))
 {
-  va_list p;
+#ifndef __STDC__
   enum rtx_code code;
   enum machine_mode mode;
+#endif
+  va_list p;
   register int i;		/* Array indices...			*/
   register char *fmt;		/* Current rtx's format...		*/
   register rtx rt_val;		/* RTX to return to caller...		*/
 
-  va_start (p);
+  VA_START (p, mode);
+
+#ifndef __STDC__
   code = va_arg (p, enum rtx_code);
   mode = va_arg (p, enum machine_mode);
+#endif
 
   if (code == CONST_INT)
     {
@@ -346,15 +354,20 @@ gen_rtx (va_alist)
 
 /*VARARGS1*/
 rtvec
-gen_rtvec (va_alist)
-     va_dcl
+gen_rtvec VPROTO((int n, ...))
 {
-  int n, i;
+#ifndef __STDC__
+  int n;
+#endif
+  int i;
   va_list p;
   rtx *vector;
 
-  va_start (p);
+  VA_START (p, n);
+
+#ifndef __STDC__
   n = va_arg (p, int);
+#endif
 
   if (n == 0)
     return NULL_RTVEC;		/* Don't allocate an empty rtvec...	*/
diff --git a/expr.c b/expr.c
index 1881da4..1de50a3 100644
--- a/expr.c
+++ b/expr.c
@@ -29,7 +29,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
 #include "insn-config.h"
 #include "recog.h"
 #include "output.h"
+#ifdef __STDC__
+#include <stdarg.h>
+#else
 #include "gvarargs.h"
+#endif
 #include "typeclass.h"
 
 #define CEIL(x,y) (((x) + (y) - 1) / (y))
@@ -1941,16 +1945,19 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,
    move memory references across the non-const call.  */
 
 void
-emit_library_call (va_alist)
-     va_dcl
+emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,
+                          int nargs, ...))
 {
+#ifndef __STDC__
+  rtx orgfun;
+  int no_queue;
+  enum machine_mode outmode;
+  int nargs;
+#endif
   va_list p;
   struct args_size args_size;
   register int argnum;
-  enum machine_mode outmode;
-  int nargs;
   rtx fun;
-  rtx orgfun;
   int inc;
   int count;
   rtx argblock = 0;
@@ -1959,14 +1966,18 @@ emit_library_call (va_alist)
 	       struct args_size offset; struct args_size size; };
   struct arg *argvec;
   int old_inhibit_defer_pop = inhibit_defer_pop;
-  int no_queue = 0;
   rtx use_insns;
 
-  va_start (p);
-  orgfun = fun = va_arg (p, rtx);
+  VA_START (p, nargs);
+
+#ifndef __STDC__
+  orgfun = va_arg (p, rtx);
   no_queue = va_arg (p, int);
   outmode = va_arg (p, enum machine_mode);
   nargs = va_arg (p, int);
+#endif
+
+  fun = orgfun;
 
   /* Copy all the libcall-arguments out of the varargs data
      and into a vector ARGVEC.
diff --git a/expr.h b/expr.h
index 4bcdc17..af9fcd9 100644
--- a/expr.h
+++ b/expr.h
@@ -527,7 +527,8 @@ extern rtx convert_to_mode ();
 /* Emit code to push some arguments and call a library routine,
    storing the value in a specified place.  Calling sequence is
    complicated.  */
-extern void emit_library_call ();
+extern void emit_library_call PVPROTO((rtx orgfun, int no_queue,
+  enum machine_mode outmode, int nargs, ...));
 
 /* Given an rtx that may include add and multiply operations,
    generate them as insns and return a pseudo-reg containing the value.
diff --git a/final.c b/final.c
index 7c3a61b..08b2a18 100644
--- a/final.c
+++ b/final.c
@@ -44,7 +44,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
    FUNCTION_EPILOGUE.  Those instructions never exist as rtl.  */
 
 #include "config.h"
+#ifdef __STDC__
+#include <stdarg.h>
+#else
 #include "gvarargs.h"
+#endif
+#include <stdio.h>
 #include "rtl.h"
 #include "regs.h"
 #include "insn-config.h"
@@ -58,7 +63,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
 #include "hard-reg-set.h"
 #include "defaults.h"
 
-#include <stdio.h>
 
 #include "output.h"
 
@@ -2374,18 +2378,23 @@ output_addr_const (file, x)
    Also supported are %d, %x, %s, %e, %f, %g and %%.  */
 
 void
-asm_fprintf (va_alist)
-     va_dcl
+asm_fprintf VPROTO((FILE *file, char *p, ...))
 {
-  va_list argptr;
+#ifndef __STDC__
   FILE *file;
+  char *p;
+#endif
+  va_list argptr;
   char buf[10];
-  char *p, *q, c;
+  char *q, c;
 
-  va_start (argptr);
+  VA_START (argptr, p);
 
+#ifndef __STDC__
   file = va_arg (argptr, FILE *);
   p = va_arg (argptr, char *);
+#endif
+
   buf[0] = '%';
 
   while (c = *p++)
diff --git a/gcc.c b/gcc.c
index 80d3edd..70f950d 100644
--- a/gcc.c
+++ b/gcc.c
@@ -38,9 +38,26 @@ compilation is specified by a string called a "spec".  */
 
 #include "config.h"
 #include "obstack.h"
+#include <errno.h>
+#ifdef __STDC__
+#include <stdarg.h>
+#else
 #include "gvarargs.h"
+#endif
 #include <stdio.h>
 
+#ifndef VPROTO
+#ifdef __STDC__
+#define PVPROTO(ARGS)           ARGS
+#define VPROTO(ARGS)            ARGS
+#define VA_START(va_list,var)   va_start(va_list,var)
+#else
+#define PVPROTO(ARGS)           ()
+#define VPROTO(ARGS)            (va_alist) va_dcl
+#define VA_START(va_list,var)   va_start(va_list)
+#endif
+#endif
+
 #ifndef R_OK
 #define R_OK 4
 #define W_OK 2
@@ -176,8 +193,8 @@ static void give_switch ();
 static void pfatal_with_name ();
 static void perror_with_name ();
 static void perror_exec ();
-static void fatal ();
-static void error ();
+static void fatal PVPROTO((char *, ...));
+static void error PVPROTO((char *, ...));
 void fancy_abort ();
 char *xmalloc ();
 char *xrealloc ();
@@ -936,6 +953,12 @@ static char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;
 static char *standard_startfile_prefix_1 = "/lib/";
 static char *standard_startfile_prefix_2 = "/usr/lib/";
 
+#ifndef TOOLDIR_BASE_PREFIX
+#define TOOLDIR_BASE_PREFIX "/usr/local/"
+#endif
+static char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;
+static char *tooldir_prefix;
+
 /* Clear out the vector of arguments (after a command is executed).  */
 
 static void
@@ -2140,6 +2163,40 @@ process_command (argc, argv)
   add_prefix (&startfile_prefix, standard_exec_prefix, 0, 1, NULL_PTR);
   add_prefix (&startfile_prefix, standard_exec_prefix_1, 0, 1, NULL_PTR);
 
+  tooldir_prefix = concat (tooldir_base_prefix, spec_machine, "/");
+
+  /* If tooldir is relative, base it on exec_prefix.  A relative
+     tooldir lets us move the installed tree as a unit.
+
+     If GCC_EXEC_PREFIX is defined, then we want to add two relative
+     directories, so that we can search both the user specified directory
+     and the standard place.  */
+
+  if (*tooldir_prefix != '/')
+    {
+      if (gcc_exec_prefix)
+	{
+	  char *gcc_exec_tooldir_prefix
+	    = concat (concat (gcc_exec_prefix, spec_machine, "/"),
+		      concat (spec_version, "/", tooldir_prefix),
+		      "");
+
+	  add_prefix (&exec_prefix, concat (gcc_exec_tooldir_prefix, "bin", "/"),
+		      0, 0, NULL_PTR);
+	  add_prefix (&startfile_prefix, concat (gcc_exec_tooldir_prefix, "lib", "/"),
+		      0, 0, NULL_PTR);
+	}
+
+      tooldir_prefix = concat (concat (standard_exec_prefix, spec_machine, "/"),
+			       concat (spec_version, "/", tooldir_prefix),
+			       "");
+    }
+
+  add_prefix (&exec_prefix, concat (tooldir_prefix, "bin", "/"),
+	      0, 0, NULL_PTR);
+  add_prefix (&startfile_prefix, concat (tooldir_prefix, "lib", "/"),
+	      0, 0, NULL_PTR);
+
   /* More prefixes are enabled in main, after we read the specs file
      and determine whether this is cross-compilation or not.  */
 
@@ -3668,44 +3725,47 @@ save_string (s, len)
   return result;
 }
 
+char *
+my_strerror(e)
+     int e;
+{
+
+#ifdef HAVE_STRERROR
+  return strerror(e);
+
+#else
+
+  static char buffer[30];
+  if (!e)
+    return "";
+
+  if (e > 0 && e < sys_nerr)
+    return sys_errlist[e];
+
+  sprintf (buffer, "Unknown error %d", e);
+  return buffer;
+#endif
+}
+
 static void
 pfatal_with_name (name)
      char *name;
 {
-  char *s;
-
-  if (errno < sys_nerr)
-    s = concat ("%s: ", sys_errlist[errno], "");
-  else
-    s = "cannot open %s";
-  fatal (s, name);
+  fatal ("%s: %s", name, my_strerror (errno));
 }
 
 static void
 perror_with_name (name)
      char *name;
 {
-  char *s;
-
-  if (errno < sys_nerr)
-    s = concat ("%s: ", sys_errlist[errno], "");
-  else
-    s = "cannot open %s";
-  error (s, name);
+  error ("%s: %s", name, my_strerror (errno));
 }
 
 static void
 perror_exec (name)
      char *name;
 {
-  char *s;
-
-  if (errno < sys_nerr)
-    s = concat ("installation problem, cannot exec %s: ",
-		sys_errlist[errno], "");
-  else
-    s = "installation problem, cannot exec %s";
-  error (s, name);
+  error ("%s: %s", name, my_strerror (errno));
 }
 
 /* More 'friendly' abort that prints the line and file.
@@ -3722,14 +3782,19 @@ fancy_abort ()
 /* Output an error message and exit */
 
 static void
-fatal (va_alist)
-     va_dcl
+fatal VPROTO((char *format, ...))
 {
-  va_list ap;
+#ifndef __STDC__
   char *format;
+#endif
+  va_list ap;
+
+  VA_START (ap, format);
 
-  va_start (ap);
+#ifndef __STDC__
   format = va_arg (ap, char *);
+#endif
+
   fprintf (stderr, "%s: ", programname);
   vfprintf (stderr, format, ap);
   va_end (ap);
@@ -3739,14 +3804,19 @@ fatal (va_alist)
 }
 
 static void
-error (va_alist)
-     va_dcl
+error VPROTO((char *format, ...))
 {
-  va_list ap;
+#ifndef __STDC__
   char *format;
+#endif
+  va_list ap;
+
+  VA_START (ap, format);
 
-  va_start (ap);
+#ifndef __STDC__
   format = va_arg (ap, char *);
+#endif
+
   fprintf (stderr, "%s: ", programname);
   vfprintf (stderr, format, ap);
   va_end (ap);
diff --git a/genattrtab.c b/genattrtab.c
index 4a3e70a..61ff5fb 100644
--- a/genattrtab.c
+++ b/genattrtab.c
@@ -94,8 +94,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
       EQ_ATTR rtx is true if !volatil and false if volatil.  */
 
 
-#include "gvarargs.h"
 #include "hconfig.h"
+#ifdef __STDC__
+#include <stdarg.h>
+#else
+#include "gvarargs.h"
+#endif
 #include "rtl.h"
 #include "insn-config.h"	/* For REGISTER_CONSTRAINTS */
 #include <stdio.h>
@@ -310,8 +314,8 @@ static char *alternative_name;
 
 rtx frame_pointer_rtx, stack_pointer_rtx, arg_pointer_rtx;
 
-static rtx attr_rtx ();
-static char *attr_printf ();
+static rtx attr_rtx PVPROTO((enum rtx_code, ...));
+static char *attr_printf PVPROTO((int, char *, ...));
 static char *attr_string ();
 static rtx check_attr_test ();
 static rtx check_attr_value ();
@@ -468,11 +472,12 @@ attr_hash_add_string (hashcode, str)
 
 /*VARARGS1*/
 static rtx
-attr_rtx (va_alist)
-     va_dcl
+attr_rtx VPROTO((enum rtx_code code, ...))
 {
-  va_list p;
+#ifndef __STDC__
   enum rtx_code code;
+#endif
+  va_list p;
   register int i;		/* Array indices...			*/
   register char *fmt;		/* Current rtx's format...		*/
   register rtx rt_val;		/* RTX to return to caller...		*/
@@ -480,8 +485,11 @@ attr_rtx (va_alist)
   register struct attr_hash *h;
   struct obstack *old_obstack = rtl_obstack;
 
-  va_start (p);
+  VA_START (p, code);
+
+#ifndef __STDC__
   code = va_arg (p, enum rtx_code);
+#endif
 
   /* For each of several cases, search the hash table for an existing entry.
      Use that entry if one is found; otherwise create a new RTL and add it
@@ -663,19 +671,24 @@ attr_rtx (va_alist)
 
 /*VARARGS2*/
 static char *
-attr_printf (va_alist)
-     va_dcl
+attr_printf VPROTO((register int len, char *fmt, ...))
 {
-  va_list p;
+#ifndef __STDC__
   register int len;
   register char *fmt;
+#endif
+  va_list p;
   register char *str;
 
+  VA_START (p, fmt);
+
+#ifndef __STDC__
   /* Print the string into a temporary location.  */
-  va_start (p);
   len = va_arg (p, int);
-  str = (char *) alloca (len);
   fmt = va_arg (p, char *);
+#endif
+
+  str = (char *) alloca (len);
   vsprintf (str, fmt, p);
   va_end (p);
 
diff --git a/gstdarg.h b/gstdarg.h
index 2b36068..ca79a3e 100644
--- a/gstdarg.h
+++ b/gstdarg.h
@@ -11,10 +11,8 @@
 #endif /* not __need___va_list */
 #undef __need___va_list
 
-#ifndef __GNUC__
-/* Use the system's macros with the system's compiler.
-   This is relevant only when building GCC with some other compiler.  */
-#include <stdarg.h>
+#ifdef __clipper__
+#include <va-clipper.h>
 #else
 #ifdef __m88k__
 #include <va-m88k.h>
@@ -37,12 +35,18 @@
 #ifdef __alpha__
 #include <va-alpha.h>
 #else
+#if defined (__H8300__) || defined (__H8300H__)
+#include <va-h8300.h>
+#else
+#if defined (__PPC__) && defined (_CALL_SYSV)
+#include <va-ppc.h>
+#else
 
 /* Define __gnuc_va_list.  */
 
 #ifndef __GNUC_VA_LIST
 #define __GNUC_VA_LIST
-#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX)
+#if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__)
 typedef char *__gnuc_va_list;
 #else
 typedef void *__gnuc_va_list;
@@ -56,20 +60,25 @@ typedef void *__gnuc_va_list;
 /* Amount of space required in an argument list for an arg of type TYPE.
    TYPE may alternatively be an expression whose type is used.  */
 
+#if defined(sysV68)
+#define __va_rounded_size(TYPE)  \
+  (((sizeof (TYPE) + sizeof (short) - 1) / sizeof (short)) * sizeof (short))
+#else
 #define __va_rounded_size(TYPE)  \
   (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))
+#endif
 
 #define va_start(AP, LASTARG) 						\
- (AP = ((__gnuc_va_list) __builtin_next_arg ()))
+ (AP = ((__gnuc_va_list) __builtin_next_arg (LASTARG)))
 
 #undef va_end
 void va_end (__gnuc_va_list);		/* Defined in libgcc.a */
-#define va_end(AP)
+#define va_end(AP)	((void)0)
 
 /* We cast to void * and then to TYPE * because this avoids
    a warning about increasing the alignment requirement.  */
 
-#if defined (__arm__) || defined (__i386__) || defined (__ns32000__) || defined (__vax__)
+#if defined (__arm__) || defined (__i386__) || defined (__i860__) || defined (__ns32000__) || defined (__vax__)
 /* This is for little-endian machines; small args are padded upward.  */
 #define va_arg(AP, TYPE)						\
  (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),	\
@@ -78,12 +87,14 @@ void va_end (__gnuc_va_list);		/* Defined in libgcc.a */
 /* This is for big-endian machines; small args are padded downward.  */
 #define va_arg(AP, TYPE)						\
  (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),	\
-  *((TYPE *) (void *) ((char *) (AP) - ((sizeof (TYPE) < 4		\
-					 ? sizeof (TYPE)		\
-					 : __va_rounded_size (TYPE))))))
+  *((TYPE *) (void *) ((char *) (AP)					\
+		       - ((sizeof (TYPE) < __va_rounded_size (char)	\
+			   ? sizeof (TYPE) : __va_rounded_size (TYPE))))))
 #endif /* big-endian */
 #endif /* _STDARG_H */
 
+#endif /* not powerpc with V.4 calling sequence */
+#endif /* not h8300 */
 #endif /* not alpha */
 #endif /* not i960 */
 #endif /* not sparc */
@@ -91,6 +102,7 @@ void va_end (__gnuc_va_list);		/* Defined in libgcc.a */
 #endif /* not hppa */
 #endif /* not i860 */
 #endif /* not m88k */
+#endif /* not clipper */
 
 #ifdef _STDARG_H
 /* Define va_list, if desired, from __gnuc_va_list. */
@@ -108,34 +120,55 @@ void va_end (__gnuc_va_list);		/* Defined in libgcc.a */
 #undef _BSD_VA_LIST
 #endif
 
-#ifdef __SVR4_2__
+#ifdef __svr4__
 /* SVR4.2 uses _VA_LIST for an internal alias for va_list,
-   so we must avoid testing it and setting it here.  */
+   so we must avoid testing it and setting it here.
+   SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
+   have no conflict with that.  */
 #ifndef _VA_LIST_
 #define _VA_LIST_
+#ifdef __i860__
+#ifndef _VA_LIST
+#define _VA_LIST va_list
+#endif
+#endif /* __i860__ */
 typedef __gnuc_va_list va_list;
 #endif /* _VA_LIST_ */
-#else /* not __SVR4_2__ */
+#else /* not __svr4__ */
 
 /* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
    But on BSD NET2 we must not test or define or undef it.
    (Note that the comments in NET 2's ansi.h
    are incorrect for _VA_LIST_--see stdio.h!)  */
-#if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386BSD____)
+#if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386BSD____) || defined (__bsdi__) || defined (__sequent__) || defined (__FreeBSD__) || defined(WINNT)
+/* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */
+#ifndef _VA_LIST_DEFINED
 /* The macro _VA_LIST is used in SCO Unix 3.2.  */
 #ifndef _VA_LIST
-#if !(defined (__BSD_NET2__) || defined (____386BSD____))
+/* The macro _VA_LIST_T_H is used in the Bull dpx2  */
+#ifndef _VA_LIST_T_H
+typedef __gnuc_va_list va_list;
+#endif /* not _VA_LIST_T_H */
+#endif /* not _VA_LIST */
+#endif /* not _VA_LIST_DEFINED */
+#if !(defined (__BSD_NET2__) || defined (____386BSD____) || defined (__bsdi__) || defined (__sequent__) || defined (__FreeBSD__))
 #define _VA_LIST_
 #endif
+#ifndef _VA_LIST
 #define _VA_LIST
-typedef __gnuc_va_list va_list;
-#endif /* not _VA_LIST */
-#endif /* not _VA_LIST_ */
+#endif
+#ifndef _VA_LIST_DEFINED
+#define _VA_LIST_DEFINED
+#endif
+#ifndef _VA_LIST_T_H
+#define _VA_LIST_T_H
+#endif
+
+#endif /* not _VA_LIST_, except on certain systems */
 
-#endif /* not __SVR4_2__ */
+#endif /* not __svr4__ */
 
 #endif /* _STDARG_H */
 
-#endif /* __GNUC__ */
 #endif /* not _ANSI_STDARG_H_ */
 #endif /* not _STDARG_H */
diff --git a/gstddef.h b/gstddef.h
index 4601547..af3071f 100644
--- a/gstddef.h
+++ b/gstddef.h
@@ -1,6 +1,7 @@
 #ifndef _STDDEF_H
 #ifndef _STDDEF_H_
 #ifndef _ANSI_STDDEF_H
+#ifndef __STDDEF_H__
 
 /* Any one of these symbols __need_* means that GNU libc
    wants us just to define one data type.  So don't define
@@ -11,6 +12,8 @@
 #define _STDDEF_H_
 /* snaroff@next.com says the NeXT needs this.  */
 #define _ANSI_STDDEF_H
+/* Irix 5.1 needs this.  */
+#define __STDDEF_H__
 #endif
 
 #ifndef __sys_stdtypes_h
@@ -19,28 +22,66 @@
 
 /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    one less case to deal with in the following.  */
-#if defined (__BSD_NET2__) || defined (____386BSD____)
+#if defined (__BSD_NET2__) || defined (____386BSD____) || defined (__FreeBSD__) || defined(__NetBSD__)
 #include <machine/ansi.h>
 #endif
 
 /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
-    defined if the corresponding type is *not* defined.  */
-#ifdef _ANSI_H_
-#ifndef _SIZE_T_
+   defined if the corresponding type is *not* defined.
+   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_ */
+#if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_)
+#if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
 #define _SIZE_T
 #endif
-#ifndef _PTRDIFF_T_
+#if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
 #define _PTRDIFF_T
 #endif
-#ifndef _WCHAR_T_
+/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
+   instead of _WCHAR_T_. */
+#if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
+#ifndef _BSD_WCHAR_T_
 #define _WCHAR_T
 #endif
+#endif
+/* Undef _FOO_T_ if we are supposed to define foo_t.  */
+#if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
 #undef _PTRDIFF_T_
-#ifndef __need_ptrdiff_t
+#undef _BSD_PTRDIFF_T_
+#endif
+#if defined (__need_size_t) || defined (_STDDEF_H_)
 #undef _SIZE_T_
+#undef _BSD_SIZE_T_
+#endif
+#if defined (__need_wchar_t) || defined (_STDDEF_H_)
 #undef _WCHAR_T_
+#undef _BSD_WCHAR_T_
+#endif
+#endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) */
+
+/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
+   Just ignore it.  */
+#if defined (__sequent__) && defined (_PTRDIFF_T_)
+#undef _PTRDIFF_T_
+#endif
+
+/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
+   _TYPE_size_t which will typedef size_t.  fixincludes patched the
+   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
+   not defined, and so that defining this macro defines _GCC_SIZE_T.
+   If we find that the macros are still defined at this point, we must
+   invoke them so that the type is defined as expected.  */
+#if defined (TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined (_STDDEF_H_))
+_TYPE_ptrdiff_t;
+#undef _TYPE_ptrdiff_t
+#endif
+#if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STDDEF_H_))
+_TYPE_size_t;
+#undef _TYPE_size_t
+#endif
+#if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_STDDEF_H_))
+_TYPE_wchar_t;
+#undef _TYPE_wchar_t
 #endif
-#endif /* _ANSI_H_ */
 
 /* In case nobody has defined these types, but we aren't running under
    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE__TYPE__, and
@@ -58,6 +99,7 @@
 #ifndef _T_PTRDIFF
 #ifndef __PTRDIFF_T
 #ifndef _PTRDIFF_T_
+#ifndef _BSD_PTRDIFF_T_
 #ifndef ___int_ptrdiff_t_h
 #ifndef _GCC_PTRDIFF_T
 #define _PTRDIFF_T
@@ -65,6 +107,7 @@
 #define _T_PTRDIFF
 #define __PTRDIFF_T
 #define _PTRDIFF_T_
+#define _BSD_PTRDIFF_T_
 #define ___int_ptrdiff_t_h
 #define _GCC_PTRDIFF_T
 #ifndef __PTRDIFF_TYPE__
@@ -73,6 +116,7 @@
 typedef __PTRDIFF_TYPE__ ptrdiff_t;
 #endif /* _GCC_PTRDIFF_T */
 #endif /* ___int_ptrdiff_t_h */
+#endif /* _BSD_PTRDIFF_T_ */
 #endif /* _PTRDIFF_T_ */
 #endif /* __PTRDIFF_T */
 #endif /* _T_PTRDIFF */
@@ -90,32 +134,49 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;
    or if we want this type in particular.  */
 #if defined (_STDDEF_H) || defined (__need_size_t)
 #ifndef _SIZE_T	/* in case <sys/types.h> has defined it. */
+#ifndef _SYS_SIZE_T_H
 #ifndef _T_SIZE_
 #ifndef _T_SIZE
 #ifndef __SIZE_T
 #ifndef _SIZE_T_
+#ifndef _BSD_SIZE_T_
+#ifndef _SIZE_T_DEFINED_
+#ifndef _SIZE_T_DEFINED
 #ifndef ___int_size_t_h
 #ifndef _GCC_SIZE_T
 #ifndef _SIZET_
+#ifndef __size_t
 #define _SIZE_T
+#define _SYS_SIZE_T_H
 #define _T_SIZE_
 #define _T_SIZE
 #define __SIZE_T
 #define _SIZE_T_
+#define _BSD_SIZE_T_
+#define _SIZE_T_DEFINED_
+#define _SIZE_T_DEFINED
 #define ___int_size_t_h
 #define _GCC_SIZE_T
 #define _SIZET_
+#define __size_t
 #ifndef __SIZE_TYPE__
 #define __SIZE_TYPE__ long unsigned int
 #endif
+#if !(defined (__GNUG__) && defined (size_t))
 typedef __SIZE_TYPE__ size_t;
+#endif /* !(defined (__GNUG__) && defined (size_t)) */
+#endif /* __size_t */
 #endif /* _SIZET_ */
 #endif /* _GCC_SIZE_T */
 #endif /* ___int_size_t_h */
+#endif /* _SIZE_T_DEFINED */
+#endif /* _SIZE_T_DEFINED_ */
+#endif /* _BSD_SIZE_T_ */
 #endif /* _SIZE_T_ */
 #endif /* __SIZE_T */
 #endif /* _T_SIZE */
 #endif /* _T_SIZE_ */
+#endif /* _SYS_SIZE_T_H */
 #endif /* _SIZE_T */
 #undef	__need_size_t
 #endif /* _STDDEF_H or __need_size_t.  */
@@ -134,24 +195,49 @@ typedef __SIZE_TYPE__ size_t;
 #ifndef _T_WCHAR
 #ifndef __WCHAR_T
 #ifndef _WCHAR_T_
+#ifndef _BSD_WCHAR_T_
+#ifndef _WCHAR_T_DEFINED_
+#ifndef _WCHAR_T_DEFINED
+#ifndef _WCHAR_T_H
 #ifndef ___int_wchar_t_h
+#ifndef __INT_WCHAR_T_H
 #ifndef _GCC_WCHAR_T
 #define _WCHAR_T
 #define _T_WCHAR_
 #define _T_WCHAR
 #define __WCHAR_T
 #define _WCHAR_T_
+#define _BSD_WCHAR_T_
+#define _WCHAR_T_DEFINED_
+#define _WCHAR_T_DEFINED
+#define _WCHAR_T_H
 #define ___int_wchar_t_h
+#define __INT_WCHAR_T_H
 #define _GCC_WCHAR_T
+
+/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
+   instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
+   symbols in the _FOO_T_ family, stays defined even after its
+   corresponding type is defined).  If we define wchar_t, then we
+   must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
+   we undef _WCHAR_T_, then we must also define rune_t, since 
+   headers like runetype.h assume that if machine/ansi.h is included,
+   and _BSD_WCHAR_T_ is not defined, then rune_t is available.
+   machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
+   the same type." */
+#ifdef _BSD_WCHAR_T_
+#undef _BSD_WCHAR_T_
+#ifdef _BSD_RUNE_T_
+#if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
+typedef _BSD_RUNE_T_ rune_t;
+#endif
+#endif
+#endif
+
 #ifndef __WCHAR_TYPE__
 #define __WCHAR_TYPE__ int
 #endif
-#ifdef __GNUG__
-/* In C++, wchar_t is a distinct basic type,
-   and we can expect __wchar_t to be defined by cc1plus.  */
-typedef __wchar_t wchar_t;
-#else
-/* In C, cpp tells us which type to make an alias for.  */
+#ifndef __cplusplus
 typedef __WCHAR_TYPE__ wchar_t;
 #endif
 #endif
@@ -161,22 +247,45 @@ typedef __WCHAR_TYPE__ wchar_t;
 #endif
 #endif
 #endif
+#endif
+#endif
+#endif
+#endif
+#endif
 #undef	__need_wchar_t
 #endif /* _STDDEF_H or __need_wchar_t.  */
 
 /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
-    are already defined.  We need not worry about the case of wanting just
-    one of these types, not on 4.3bsd-net2, because only the GNU libc
-    header files do that.  */
+    are already defined.  */
 #ifdef _ANSI_H_
+/*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
+    are probably typos and should be removed before 2.8 is released.  */
+#ifdef _GCC_PTRDIFF_T_
 #undef _PTRDIFF_T_
-#ifdef _STDDEF_H /* This is a kludge.
-		    _STDDEF_H is defined when we are using the whole file,
-		    undefined when obstack.h wants just ptrdiff_t.  */
+#undef _BSD_PTRDIFF_T_
+#endif
+#ifdef _GCC_SIZE_T_
 #undef _SIZE_T_
+#undef _BSD_SIZE_T_
+#endif
+#ifdef _GCC_WCHAR_T_
 #undef _WCHAR_T_
+#undef _BSD_WCHAR_T_
+#endif
+/*  The following ones are the real ones.  */
+#ifdef _GCC_PTRDIFF_T
+#undef _PTRDIFF_T_
+#undef _BSD_PTRDIFF_T_
 #endif
+#ifdef _GCC_SIZE_T
+#undef _SIZE_T_
+#undef _BSD_SIZE_T_
+#endif
+#ifdef _GCC_WCHAR_T
+#undef _WCHAR_T_
+#undef _BSD_WCHAR_T_
 #endif
+#endif /* _ANSI_H_ */
 
 #endif /* __sys_stdtypes_h */
 
@@ -196,6 +305,7 @@ typedef __WCHAR_TYPE__ wchar_t;
 
 #endif /* _STDDEF_H was defined this time */
 
+#endif /* __STDDEF_H__ was not defined before */
 #endif /* _ANSI_STDDEF_H was not defined before */
 #endif /* _STDDEF_H_ was not defined before */
 #endif /* _STDDEF_H was not defined before */
diff --git a/output.h b/output.h
index 480c9e3..6726466 100644
--- a/output.h
+++ b/output.h
@@ -18,13 +18,33 @@ You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to
 the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
 
+#ifndef STDIO_PROTO
+#ifdef BUFSIZ
+#define STDIO_PROTO(ARGS) PROTO(ARGS)
+#else
+#define STDIO_PROTO(ARGS) ()
+#endif
+#endif
+
+#ifndef VPROTO
+#ifdef __STDC__
+#define PVPROTO(ARGS)           ARGS
+#define VPROTO(ARGS)            ARGS
+#define VA_START(va_list,var)   va_start(va_list,var)
+#else
+#define PVPROTO(ARGS)           ()
+#define VPROTO(ARGS)            (va_alist) va_dcl
+#define VA_START(va_list,var)   va_start(va_list)
+#endif
+#endif
+
 /* Output a string of assembler code, substituting insn operands.
    Defined in final.c.  */
 extern void output_asm_insn ();
 
 /* Output a string of assembler code, substituting numbers, strings
    and fixed syntactic prefixes.  */
-extern void asm_fprintf ();
+extern void asm_fprintf STDIO_PROTO(PVPROTO((FILE *file, char *p, ...)));
 
 /* Print an integer constant expression in assembler syntax.
    Addition and subtraction are the only arithmetic
diff --git a/protoize.c b/protoize.c
index 5a65334..16a96f3 100644
--- a/protoize.c
+++ b/protoize.c
@@ -276,13 +276,25 @@ struct default_include { const char *fname; int cplusplus; } include_defaults[]
   = {
     /* Pick up GNU C++ specific include files.  */
     { GPLUSPLUS_INCLUDE_DIR, 1},
-    { GCC_INCLUDE_DIR, 0},
 #ifdef CROSS_COMPILE
+    /* This is the dir for fixincludes.  Put it just before
+       the files that we fix.  */
+    { GCC_INCLUDE_DIR, 0},
     /* For cross-compilation, this dir name is generated
        automatically in Makefile.in.  */
     { CROSS_INCLUDE_DIR, 0 },
+    /* This is another place that the target system's headers might be.  */
+    { TOOL_INCLUDE_DIR, 0},
 #else /* not CROSS_COMPILE */
+    /* This should be /use/local/include and should come before
+       the fixincludes-fixed header files.  */
     { LOCAL_INCLUDE_DIR, 0},
+    /* This is here ahead of GCC_INCLUDE_DIR because assert.h goes here.
+       Likewise, behind LOCAL_INCLUDE_DIR, where glibc puts its assert.h.  */
+    { TOOL_INCLUDE_DIR, 0},
+    /* This is the dir for fixincludes.  Put it just before
+       the files that we fix.  */
+    { GCC_INCLUDE_DIR, 0},
     /* Some systems have an extra dir of include files.  */
 #ifdef SYSTEM_INCLUDE_DIR
     { SYSTEM_INCLUDE_DIR, 0},
@@ -2057,7 +2069,7 @@ gen_aux_info_file (base_filename)
 	  write (f, ": ", 2);
 	  write (f, sys_errlist[e], strlen (sys_errlist[e]));
 	  write (f, "\n", 1);
-          _exit (1);
+          exit (1);
         }
       return 1;		/* Never executed.  */
     }
diff --git a/rtl.h b/rtl.h
index 8ee49f1..dcf26b8 100644
--- a/rtl.h
+++ b/rtl.h
@@ -148,6 +148,18 @@ typedef struct rtx_def
 #endif
 #endif
 
+#ifndef VPROTO
+#ifdef __STDC__
+#define PVPROTO(ARGS)           ARGS
+#define VPROTO(ARGS)            ARGS
+#define VA_START(va_list,var)   va_start(va_list,var)
+#else
+#define PVPROTO(ARGS)           ()
+#define VPROTO(ARGS)            (va_alist) va_dcl
+#define VA_START(va_list,var)   va_start(va_list)
+#endif
+#endif
+
 #define NULL_RTX (rtx) 0
 
 /* Define a generic NULL if one hasn't already been defined.  */
@@ -620,18 +632,8 @@ extern rtx plus_constant_for_output_wide PROTO((rtx, HOST_WIDE_INT));
 
 #define GEN_INT(N) gen_rtx (CONST_INT, VOIDmode, (N))
 
-#if 0
-/* We cannot define prototypes for the variable argument functions,
-   since they have not been ANSI-fied, and an ANSI compiler would
-   complain when compiling the definition of these functions.  */
-
-extern rtx gen_rtx			PROTO((enum rtx_code, enum machine_mode, ...));
-extern rtvec gen_rtvec			PROTO((int, ...));
-
-#else
-extern rtx gen_rtx ();
-extern rtvec gen_rtvec ();
-#endif
+extern rtx gen_rtx			PVPROTO((enum rtx_code, enum machine_mode, ...));
+extern rtvec gen_rtvec			PVPROTO((int, ...));
 
 #ifdef BUFSIZ			/* stdio.h has been included */
 extern rtx read_rtx			PROTO((FILE *));
diff --git a/stdarg.h b/stdarg.h
new file mode 120000
index 0000000..883f582
--- /dev/null
+++ b/stdarg.h
@@ -0,0 +1 @@
+gstdarg.h
\ No newline at end of file
diff --git a/stddef.h b/stddef.h
new file mode 120000
index 0000000..4d44230
--- /dev/null
+++ b/stddef.h
@@ -0,0 +1 @@
+gstddef.h
\ No newline at end of file
diff --git a/tree.c b/tree.c
index 98c06bd..2c9502d 100644
--- a/tree.c
+++ b/tree.c
@@ -37,7 +37,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
 #include "tree.h"
 #include "function.h"
 #include "obstack.h"
+#ifdef __STDC__
+#include <stdarg.h>
+#else
 #include "gvarargs.h"
+#endif
 #include <stdio.h>
 
 #define obstack_chunk_alloc xmalloc
@@ -1954,21 +1958,27 @@ stabilize_reference_1 (e)
    Constants, decls, types and misc nodes cannot be.  */
 
 tree
-build (va_alist)
-     va_dcl
+build VPROTO((enum tree_code code, tree tt, ...))
 {
-  va_list p;
+#ifndef __STDC__
   enum tree_code code;
+  tree tt;
+#endif
+  va_list p;
   register tree t;
   register int length;
   register int i;
 
-  va_start (p);
+  VA_START (p, tt);
 
+#ifndef __STDC__
   code = va_arg (p, enum tree_code);
+  tt = va_arg (p, tree);
+#endif
+
   t = make_node (code);
   length = tree_code_length[(int) code];
-  TREE_TYPE (t) = va_arg (p, tree);
+  TREE_TYPE (t) = tt;
 
   if (length == 2)
     {
@@ -2072,18 +2082,22 @@ build1 (code, type, node)
    or even garbage if their values do not matter.  */
 
 tree
-build_nt (va_alist)
-     va_dcl
+build_nt VPROTO((enum tree_code code, ...))
 {
+#ifndef __STDC__
+  enum tree_code code;
+#endif
   va_list p;
-  register enum tree_code code;
   register tree t;
   register int length;
   register int i;
 
-  va_start (p);
+  VA_START (p, code);
 
+#ifndef __STDC__
   code = va_arg (p, enum tree_code);
+#endif
+
   t = make_node (code);
   length = tree_code_length[(int) code];
 
@@ -2098,21 +2112,24 @@ build_nt (va_alist)
    on the temp_decl_obstack, regardless.  */
 
 tree
-build_parse_node (va_alist)
-     va_dcl
+build_parse_node VPROTO((enum tree_code code, ...))
 {
+#ifndef __STDC__
+  enum tree_code code;
+#endif
   register struct obstack *ambient_obstack = expression_obstack;
   va_list p;
-  register enum tree_code code;
   register tree t;
   register int length;
   register int i;
 
-  expression_obstack = &temp_decl_obstack;
-
-  va_start (p);
+  VA_START (p, code);
 
+#ifndef __STDC__
   code = va_arg (p, enum tree_code);
+#endif
+
+  expression_obstack = &temp_decl_obstack;
   t = make_node (code);
   length = tree_code_length[(int) code];
 
diff --git a/tree.h b/tree.h
index eda62c0..3a2a0bd 100644
--- a/tree.h
+++ b/tree.h
@@ -943,6 +943,17 @@ union tree_node
 #endif
 #endif
 
+#ifndef VPROTO
+#ifdef __STDC__
+#define PVPROTO(ARGS)           ARGS
+#define VPROTO(ARGS)            ARGS
+#define VA_START(va_list,var)   va_start(va_list,var)
+#else
+#define PVPROTO(ARGS)           ()
+#define VPROTO(ARGS)            (va_alist) va_dcl
+#define VA_START(va_list,var)   va_start(va_list)
+#endif
+#endif
 
 #define NULL_TREE (tree) NULL
 
@@ -1027,19 +1038,9 @@ extern tree get_identifier		PROTO((char *));
 #define build_int_2(LO,HI)  \
   build_int_2_wide ((HOST_WIDE_INT) (LO), (HOST_WIDE_INT) (HI))
 
-#if 0
-/* We cannot define prototypes for the variable argument functions,
-   since they have not been ANSI-fied, and an ANSI compiler would
-   complain when compiling the definition of these functions.  */
-
-extern tree build			PROTO((enum tree_code, tree, ...));
-extern tree build_nt			PROTO((enum tree_code, ...));
-extern tree build_parse_node		PROTO((enum tree_code, ...));
-#else
-extern tree build ();
-extern tree build_nt ();
-extern tree build_parse_node ();
-#endif
+extern tree build			PVPROTO((enum tree_code, tree, ...));
+extern tree build_nt			PVPROTO((enum tree_code, ...));
+extern tree build_parse_node		PVPROTO((enum tree_code, ...));
 
 extern tree build_int_2_wide		PROTO((HOST_WIDE_INT, HOST_WIDE_INT));
 extern tree build_real			PROTO((tree, REAL_VALUE_TYPE));
