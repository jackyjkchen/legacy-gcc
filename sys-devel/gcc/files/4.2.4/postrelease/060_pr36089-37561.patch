diff --git a/gcc/cp/init.c b/gcc/cp/init.c
index 993b49af..fd4838b4 100644
--- a/gcc/cp/init.c
+++ b/gcc/cp/init.c
@@ -1492,6 +1492,15 @@ constant_value_1 (tree decl, bool integral_p)
 	}
       if (init == error_mark_node)
 	return decl;
+      /* Initializers in templates are generally expanded during
+	 instantiation, so before that for const int i(2)
+	 INIT is a TREE_LIST with the actual initializer as
+	 TREE_VALUE.  */
+      if (processing_template_decl
+	  && init
+	  && TREE_CODE (init) == TREE_LIST
+	  && TREE_CHAIN (init) == NULL_TREE)
+	init = TREE_VALUE (init);
       if (!init
 	  || !TREE_TYPE (init)
 	  || (integral_p
diff --git a/gcc/testsuite/g++.dg/template/init8.C b/gcc/testsuite/g++.dg/template/init8.C
new file mode 100644
index 00000000..1bcda125
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/init8.C
@@ -0,0 +1,68 @@
+// PR c++/36089
+// { dg-do run }
+
+extern "C" void abort ();
+
+int f ()
+{
+  const int c(2);
+  int d[c] = { 0, 0 };
+  return d[0] + sizeof d;
+}
+
+struct A
+{
+  static int f ()
+  {
+    const int c(2);
+    int d[c] = { 0, 0 };
+    return d[0] + sizeof d;
+  }
+};
+
+template <int> struct B
+{
+  static int f ()
+  {
+    const int c = 2;
+    int d[c] = { 0, 0 };
+    return d[0] + sizeof d;
+  }
+};
+
+template <int> struct C
+{
+  static int f ()
+  {
+    const int c(2);
+    int d[c] = { 0, 0 };
+    return d[0] + sizeof d;
+  }
+};
+
+template <int> struct D
+{
+  static int f ()
+  {
+    const int e(2);
+    const int c(e);
+    int d[c] = { 0, 0 };
+    return d[0] + sizeof d;
+  }
+};
+
+int
+main (void)
+{
+  int v = f ();
+  if (v != 2 * sizeof (int))
+    abort ();
+  if (v != A::f ())
+    abort ();
+  if (v != B<6>::f ())
+    abort ();
+  if (v != C<0>::f ())
+    abort ();
+  if (v != D<1>::f ())
+    abort ();
+}
