diff --git a/gcc/testsuite/g++.dg/ext/packed8.C b/gcc/testsuite/g++.dg/ext/packed8.C
index 1f86cfc0..91ee8b3e 100644
--- a/gcc/testsuite/g++.dg/ext/packed8.C
+++ b/gcc/testsuite/g++.dg/ext/packed8.C
@@ -2,7 +2,7 @@
 // NOTE: This test assumes packed structure layout differs from unpacked
 //       structure layout.  This isn't true, e.g., with the default
 //       arm-none-elf options.
-// { dg-options "-mstructure-size-boundary=8" { target arm-*-* } }
+// { dg-options "-mstructure-size-boundary=8" { target arm*-*-* } }
 
 class A
 {
diff --git a/gcc/testsuite/g++.dg/init/array16.C b/gcc/testsuite/g++.dg/init/array16.C
index be652190..188d1a84 100644
--- a/gcc/testsuite/g++.dg/init/array16.C
+++ b/gcc/testsuite/g++.dg/init/array16.C
@@ -1,7 +1,7 @@
 // Causes timeout for the MMIX simulator on a 3GHz P4 and we can't
 // have "compile" for some targets and "run" for others.
 // { dg-do run { target { ! mmix-*-* } } }
-// { dg-options "-mstructure-size-boundary=8" { target arm-*-* } }
+// { dg-options "-mstructure-size-boundary=8" { target arm*-*-* } }
 
 // Copyright (C) 2004 Free Software Foundation, Inc.
 // Contributed by Nathan Sidwell 8 Dec 2004 <nathan@codesourcery.com>
diff --git a/gcc/testsuite/g++.dg/other/crash-4.C b/gcc/testsuite/g++.dg/other/crash-4.C
index a37b8b2f..ee30f016 100644
--- a/gcc/testsuite/g++.dg/other/crash-4.C
+++ b/gcc/testsuite/g++.dg/other/crash-4.C
@@ -7,7 +7,7 @@
 // NOTE: This test assumes packed structure layout differs from unpacked
 //       structure layout.  This isn't true, e.g., with the default
 //       arm-none-elf options.
-// { dg-options "-mstructure-size-boundary=8" { target arm-*-* } }
+// { dg-options "-mstructure-size-boundary=8" { target arm*-*-* } }
 
 struct a
 {
diff --git a/gcc/testsuite/g++.dg/other/packed1.C b/gcc/testsuite/g++.dg/other/packed1.C
index 5d19eb0e..0b14653b 100644
--- a/gcc/testsuite/g++.dg/other/packed1.C
+++ b/gcc/testsuite/g++.dg/other/packed1.C
@@ -1,4 +1,4 @@
-// { dg-do run { xfail arm-*-* sh-*-* ia64-hp-hpux* } }
+// { dg-do run { xfail sh-*-* ia64-hp-hpux* } }
 
 // NMS:2003-04-21 this fails on strict aligned architectures again,
 // the patch was reverted because it broke something more important.
diff --git a/gcc/testsuite/g++.old-deja/g++.law/weak.C b/gcc/testsuite/g++.old-deja/g++.law/weak.C
index ea07afe4..c4173b02 100644
--- a/gcc/testsuite/g++.old-deja/g++.law/weak.C
+++ b/gcc/testsuite/g++.old-deja/g++.law/weak.C
@@ -1,5 +1,5 @@
 // { dg-do link { target i?86-*-linux* x86_64-*-linux* } }
-// { dg-options "-static" }
+// { dg-options "-static-libstdc++ -static-libgcc" }
 // Bug: g++ fails to instantiate operator<<.
 
 // libc-5.4.xx has __IO_putc in its static C library, which can conflict
diff --git a/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c b/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c
index f401d39c..e9fb7db5 100644
--- a/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c
+++ b/gcc/testsuite/gcc.dg/builtin-stringop-chk-1.c
@@ -2,7 +2,7 @@
    are emitted properly.  */
 /* { dg-do compile } */
 /* { dg-options "-O2 -std=gnu99" } */
-/* { dg-options "-mstructure-size-boundary=8 -O2 -std=gnu99" { target arm-*-* } } */
+/* { dg-options "-mstructure-size-boundary=8 -O2 -std=gnu99" { target arm*-*-* } } */
 
 extern void abort (void);
 
diff --git a/gcc/testsuite/gcc.dg/cpp/trad/include.c b/gcc/testsuite/gcc.dg/cpp/trad/include.c
deleted file mode 100644
index 9ca184b5..00000000
--- a/gcc/testsuite/gcc.dg/cpp/trad/include.c
+++ /dev/null
@@ -1,9 +0,0 @@
-/* Copyright (c) 2002 Free Software Foundation Inc.  */
-
-/* Test that macros are not expanded in the <> quotes of #inlcude.  */
-
-/* { dg-do preprocess } */
-
-#define __STDC__ 1	/* Stop complaints about non-ISO compilers.  */
-#define stdio 1
-#include <stdio.h>		/* { dg-bogus "o such file or directory" } */
diff --git a/gcc/testsuite/gcc.dg/special/gcsec-1.c b/gcc/testsuite/gcc.dg/special/gcsec-1.c
index 68d4066f..c96e7497 100644
--- a/gcc/testsuite/gcc.dg/special/gcsec-1.c
+++ b/gcc/testsuite/gcc.dg/special/gcsec-1.c
@@ -3,8 +3,8 @@
 /* { dg-do run { xfail rs6000-*-aix* powerpc*-*-aix* } } */
 /* { dg-require-gc-sections "" } */
 
-/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static" } */
-/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static" { target native } } */
+/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static-libgcc" } */
+/* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections -static-libgcc" { target native } } */
 /* { dg-options "-ffunction-sections -fdata-sections -Wl,--gc-sections" { target *-*-netware* } } */
 
 #include <stdlib.h>
diff --git a/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c b/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c
index 7d090e16..c0c54a10 100644
--- a/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c
+++ b/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c
@@ -1,7 +1,6 @@
 /* Test floating-point conversions.  __float128 type with TImode.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do run { target { ia64-*-* || { { i?86-*-* x86_64-*-*} && lp64 } } } } */
-/* { dg-xfail-if "" { i?86-*-* x86_64-*-* } { "*" } { "" } } */
+/* { dg-do run { target { ia64-*-* } } } */
 /* { dg-xfail-if "" { ia64-*-* && lp64 } { "*" } { "" } } */
 /* { dg-options "" } */
 
diff --git a/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c b/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c
index 0e774e0a..f07c1e73 100644
--- a/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c
+++ b/gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c
@@ -1,7 +1,6 @@
 /* Test floating-point conversions.  __float128 type.  */
 /* Origin: Joseph Myers <joseph@codesourcery.com> */
-/* { dg-do run { target { ia64-*-* || { { i?86-*-* x86_64-*-*} && lp64 } } } } */
-/* { dg-xfail-if "" { i?86-*-* x86_64-*-* } { "*" } { "" } } */
+/* { dg-do run { target { ia64-*-* } } } */
 /* { dg-options "" } */
 
 #include "fp-int-convert.h"
diff --git a/gcc/testsuite/gcc.dg/vect/vect-1.c b/gcc/testsuite/gcc.dg/vect/vect-1.c
index 938a7b3d..6039aae1 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-1.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-1.c
@@ -19,9 +19,6 @@ foo (int n)
   int ia[N];
   int ib[N];
   int ic[N];
-  short sa[N];
-  short sb[N];
-  short sc[N];
   int i,j;
   int diff = 0;
   char cb[N];
@@ -62,7 +59,8 @@ foo (int n)
   fbar (a);
 
 
-  /* Not vectorizable yet (access pattern).  */
+  /* Strided access. Vectorizable on platforms that support load of strided 
+     accesses (extract of even/odd vector elements).  */
   for (i = 0; i < N/2; i++){
     a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];
     d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];
@@ -80,16 +78,6 @@ foo (int n)
   fbar (a);
   fbar (d);
 
-
-  /* Not vectorizable yet (two types with different nunits in vector).  */
-  for (i = 0; i < N; i++){
-    ia[i] = ib[i] + ic[i];
-    sa[i] = sb[i] + sc[i];
-  }
-  ibar (ia);
-  sbar (sa);
-
-
   /* Not vetorizable yet (too conservative dependence test).  */
   for (i = 0; i < N; i++){
     a[i] = b[i] + c[i];
@@ -99,5 +87,4 @@ foo (int n)
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 3 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-13.c b/gcc/testsuite/gcc.dg/vect/vect-13.c
index dcafcaf2..ba8665bd 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-13.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-13.c
@@ -7,11 +7,12 @@
 
 int a[N];
 int results[N] = {0,1,2,3,0,0,0,0,0,0,0,0,12,13,14,15};
+int b[N] = {0,1,2,3,-4,-5,-6,-7,-8,-9,-10,-11,12,13,14,15};
 
+__attribute__ ((noinline))
 int main1()
 {
   int i;
-  int b[N] = {0,1,2,3,-4,-5,-6,-7,-8,-9,-10,-11,12,13,14,15};
 
   /* Max pattern.  */
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-17.c b/gcc/testsuite/gcc.dg/vect/vect-17.c
index 347b9a1a..f1bef7f4 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-17.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-17.c
@@ -5,10 +5,6 @@
 
 #define N 64
 
-int
-main1 ()
-{
-  int i;
   int ia[N];
   int ib[N]= 
     {1,1,0,0,1,0,1,0,
@@ -72,6 +68,10 @@ main1 ()
      1,1,0,0,1,0,1,0,
      1,1,0,0,1,0,1,0};
 
+__attribute__ ((noinline)) int
+main1 ()
+{
+  int i;
   /* Check ints.  */
 
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-18.c b/gcc/testsuite/gcc.dg/vect/vect-18.c
index eab298a8..8a2baab3 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-18.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-18.c
@@ -5,10 +5,6 @@
 
 #define N 64
 
-int
-main1 ()
-{
-  int i;
   int ia[N];
   int ib[N]= 
     {1,1,0,0,1,0,1,0,
@@ -71,6 +67,10 @@ main1 ()
      1,1,0,0,1,0,1,0,
      1,1,0,0,1,0,1,0};
 
+__attribute__ ((noinline)) int
+main1 ()
+{
+  int i;
   /* Check ints.  */
 
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-19.c b/gcc/testsuite/gcc.dg/vect/vect-19.c
index 6d3ea732..022ba1f7 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-19.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-19.c
@@ -5,10 +5,6 @@
 
 #define N 64
 
-int
-main1 ()
-{
-  int i;
   int ia[N];
   int ib[N]= 
     {1,1,0,0,1,0,1,0,
@@ -71,6 +67,10 @@ main1 ()
      1,1,0,0,1,0,1,0,
      1,1,0,0,1,0,1,0};
 
+__attribute__ ((noinline)) int
+main1 ()
+{
+  int i;
   /* Check ints.  */
 
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-2.c b/gcc/testsuite/gcc.dg/vect/vect-2.c
index 2bf5ba71..5d4fc914 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-2.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-2.c
@@ -4,11 +4,13 @@
 #include "tree-vect.h"
 
 #define N 16
- 
+
+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+char ca[N];
+
+__attribute__ ((noinline)) 
 int main1 ()
 {  
-  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  char ca[N];
   int i;
 
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-20.c b/gcc/testsuite/gcc.dg/vect/vect-20.c
index aa272852..deed2da4 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-20.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-20.c
@@ -5,10 +5,6 @@
 
 #define N 64
 
-int
-main1 ()
-{
-  int i;
   int ia[N];
   int ib[N]= 
     {1,1,0,0,1,0,1,0,
@@ -42,6 +38,10 @@ main1 ()
      1,1,0,0,1,0,1,0,
      1,1,0,0,1,0,1,0};
 
+__attribute__ ((noinline)) int
+main1 ()
+{
+  int i;
 
   /* Check ints.  */
 
diff --git a/gcc/testsuite/gcc.dg/vect/vect-21.c b/gcc/testsuite/gcc.dg/vect/vect-21.c
index 904a4ab6..7a57506a 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-21.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-21.c
@@ -5,10 +5,6 @@
 
 #define N 64
 
-int
-main1 ()
-{
-  int i;
   int ia[N];
   int ib[N]= 
     {1,1,0,0,1,0,1,0,
@@ -71,6 +67,10 @@ main1 ()
      1,1,0,0,1,0,1,0,
      1,1,0,0,1,0,1,0};
 
+__attribute__ ((noinline)) int
+main1 ()
+{
+  int i;
   /* Check ints.  */
 
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-22.c b/gcc/testsuite/gcc.dg/vect/vect-22.c
index a71f141b..369fab11 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-22.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-22.c
@@ -6,10 +6,6 @@
 
 #define N 64
 
-int
-main1 ()
-{
-  int i;
   int ia[N];
   int ib[N]= 
     {1,1,0,0,1,0,1,0,
@@ -54,6 +50,10 @@ main1 ()
      1,1,0,0,1,0,1,0,
      1,1,0,0,1,0,1,0};
 
+__attribute__ ((noinline)) int
+main1 ()
+{
+  int i;
   /* Check ints.  */
 
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/vect-27.c b/gcc/testsuite/gcc.dg/vect/vect-27.c
index 2f75e098..ea444deb 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-27.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-27.c
@@ -7,13 +7,15 @@
 
 /* unaligned load.  */
 
+int ia[N];
+int ib[N+1];
+
+__attribute__ ((noinline))
 int main1 ()
 {
   int i;
-  int ia[N];
-  int ib[N+1];
 
-  for (i=0; i < N; i++)
+  for (i=0; i <= N; i++)
     {
       ib[i] = i;
     }
diff --git a/gcc/testsuite/gcc.dg/vect/vect-29.c b/gcc/testsuite/gcc.dg/vect/vect-29.c
index ac398148..a704c024 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-29.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-29.c
@@ -8,11 +8,13 @@
 
 /* unaligned load.  */
 
+int ia[N];
+int ib[N+OFF];
+
+__attribute__ ((noinline))
 int main1 (int off)
 {
   int i;
-  int ia[N];
-  int ib[N+OFF];
 
   for (i = 0; i < N+OFF; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-3.c b/gcc/testsuite/gcc.dg/vect/vect-3.c
index cb1daebd..d494deb8 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-3.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-3.c
@@ -6,18 +6,19 @@
 
 #define N 20
 
-int
+float a[N];
+float e[N];
+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};
+int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+int ia[N];
+
+__attribute__ ((noinline)) int
 main1 ()
 {
   int i;
-  float a[N];
-  float e[N];
-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};
-  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  int ia[N];
 
   for (i = 0; i < N; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-31.c b/gcc/testsuite/gcc.dg/vect/vect-31.c
index 44a10f6e..8719fc9d 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-31.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-31.c
@@ -18,6 +18,7 @@ struct s{
   struct t e;   /* unaligned (offset 2N+4N+4 B) */
 };
  
+__attribute__ ((noinline))
 int main1 ()
 {  
   int i;
@@ -86,6 +87,4 @@ int main (void)
 } 
 
 /* { dg-final { scan-tree-dump-times "vectorized 4 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 2 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-34.c b/gcc/testsuite/gcc.dg/vect/vect-34.c
index f83d4142..4e80bd4c 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-34.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-34.c
@@ -5,13 +5,14 @@
 
 #define N 16
  
+__attribute__ ((noinline))
 int main1 ()
 {  
+  int i;
   struct {
     char ca[N];
   } s;
   char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  int i;
 
   for (i = 0; i < N; i++)
     {
@@ -36,5 +37,4 @@ int main (void)
 } 
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-36.c b/gcc/testsuite/gcc.dg/vect/vect-36.c
index deaf729a..bc6232dd 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-36.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-36.c
@@ -5,13 +5,15 @@
 
 #define N 16
  
+__attribute__ ((noinline))
 int main1 ()
 {  
+  int i;
   struct {
     char ca[N];
     char cb[N];
   } s;
-  int i;
+
 
   for (i = 0; i < N; i++)
     {
@@ -41,6 +43,4 @@ int main (void)
 } 
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 0 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-4.c b/gcc/testsuite/gcc.dg/vect/vect-4.c
index 05c0b363..d86fea11 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-4.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-4.c
@@ -5,13 +5,14 @@
 
 #define N 20
 
-int
+float a[N];
+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};
+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
+
+__attribute__ ((noinline)) int
 main1 ()
 {
   int i;
-  float a[N];
-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};
-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
 
   for (i = 0; i < N; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-5.c b/gcc/testsuite/gcc.dg/vect/vect-5.c
index 5ecf4e7d..b5938cea 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-5.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-5.c
@@ -5,12 +5,14 @@
 
 #define N 16
 
+float a[N];
+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};
+
+__attribute__ ((noinline))
 int main1 ()
 {
   int i, j;
-  float a[N];
-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};
 
   i = 0;
   j = 0;
diff --git a/gcc/testsuite/gcc.dg/vect/vect-6.c b/gcc/testsuite/gcc.dg/vect/vect-6.c
index 1b3383a4..5f2e0ea5 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-6.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-6.c
@@ -7,14 +7,15 @@
 
 float results1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,0.00};
 float results2[N] = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};
+float a[N] = {0};
+float e[N] = {0};
+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 
+__attribute__ ((noinline))
 int main1 ()
 {
   int i;
-  float a[N] = {0};
-  float e[N] = {0};
-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 
   for (i = 0; i < N/2; i++)
     { 
diff --git a/gcc/testsuite/gcc.dg/vect/vect-64.c b/gcc/testsuite/gcc.dg/vect/vect-64.c
index e63f93e8..4f9d97bb 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-64.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-64.c
@@ -5,10 +5,12 @@
 
 #define N 16
 
+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+
+__attribute__ ((noinline))
 int main1 ()
 {
   int i, j;
-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
   int ia[N][4][N+1];
   int ic[N][N][3][13];
   int id[N][N][N];
@@ -81,6 +83,4 @@ int main (void)
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 3 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 2 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-65.c b/gcc/testsuite/gcc.dg/vect/vect-65.c
index 4215441c..ba3ab3a9 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-65.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-65.c
@@ -6,6 +6,7 @@
 #define N 16
 #define M 4
 
+__attribute__ ((noinline))
 int main1 ()
 {
   int i, j;
@@ -79,5 +80,4 @@ int main (void)
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 2 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-66.c b/gcc/testsuite/gcc.dg/vect/vect-66.c
index 683cd737..4f93bc05 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-66.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-66.c
@@ -5,6 +5,7 @@
 
 #define N 16
 
+__attribute__ ((noinline))
 int main1 ()
 {
   int i, j;
@@ -77,6 +78,4 @@ int main (void)
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 3 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 1 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-68.c b/gcc/testsuite/gcc.dg/vect/vect-68.c
index 05ab1ddc..c4f8857b 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-68.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-68.c
@@ -17,6 +17,7 @@ struct test1{
   struct s e; /* array e.n is aligned */
 };
 
+__attribute__ ((noinline))
 int main1 ()
 {  
   int i,j;
@@ -85,6 +86,4 @@ int main (void)
 } 
 
 /* { dg-final { scan-tree-dump-times "vectorized 4 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 2 "vect" } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-7.c b/gcc/testsuite/gcc.dg/vect/vect-7.c
index 10cff365..35dc08bb 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-7.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-7.c
@@ -5,11 +5,13 @@
 
 #define N 128
 
+short sa[N];
+short sb[N];
+
+__attribute__ ((noinline))
 int main1 ()
 {
   int i;
-  short sa[N];
-  short sb[N];
   
   for (i = 0; i < N; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-72.c b/gcc/testsuite/gcc.dg/vect/vect-72.c
index d6f0fe4e..95bc7cae 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-72.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-72.c
@@ -7,11 +7,13 @@
 
 /* unaligned load.  */
 
+char ia[N];
+char ib[N+1];
+
+__attribute__ ((noinline))
 int main1 ()
 {
   int i;
-  char ia[N];
-  char ib[N+1];
 
   for (i=0; i < N+1; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-73.c b/gcc/testsuite/gcc.dg/vect/vect-73.c
index d4dd077c..ee3c6e60 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-73.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-73.c
@@ -6,13 +6,14 @@
 #define N 16
 
 int ic[N*2];
+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
 
 #define ia (ic+N)
 
+__attribute__ ((noinline))
 int main1 ()
 {
   int i, j;
-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
 
   for (i = 0; i < N; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-76.c b/gcc/testsuite/gcc.dg/vect/vect-76.c
index 8539b603..908ccd24 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-76.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-76.c
@@ -12,6 +12,7 @@
 
 int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10};
 
+__attribute__ ((noinline))
 int main1 (int *pib)
 {
   int i;
@@ -70,5 +71,4 @@ int main (void)
 
 
 /* { dg-final { scan-tree-dump-times "vectorized 3 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 2 "vect" { xfail vect_no_align } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-77.c b/gcc/testsuite/gcc.dg/vect/vect-77.c
index e182ecaa..a6eb2ad8 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-77.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-77.c
@@ -12,6 +12,7 @@
 
 int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};
 
+__attribute__ ((noinline))
 int main1 (int *ib, int off)
 {
   int i;
@@ -41,11 +42,5 @@ int main (void)
   return 0;
 }
 
-/* For targets that don't support misaligned loads we version for the load.
-   (The store is aligned).  */
-
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 1 "vect" { xfail { vect_no_align } } } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using versioning." 1 "vect" { target vect_no_align } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-78.c b/gcc/testsuite/gcc.dg/vect/vect-78.c
index d1d367da..67ce20fd 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-78.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-78.c
@@ -13,6 +13,7 @@
 int ib[N+OFF] __attribute__ ((__aligned__(16))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};
 int off = 8;
 
+__attribute__ ((noinline))
 int main1 (int *ib)
 {
   int i;
@@ -23,7 +24,6 @@ int main1 (int *ib)
       ia[i] = ib[i+off];
     }
 
-
   /* check results:  */
   for (i = 0; i < N; i++)
     {
@@ -42,11 +42,5 @@ int main (void)
   return 0;
 }
 
-/* For targets that don't support misaligned loads we version for the load.
-   (The store is aligned).  */
-
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 1 "vect" { xfail { vect_no_align } } } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using versioning." 1 "vect" { target vect_no_align } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-86.c b/gcc/testsuite/gcc.dg/vect/vect-86.c
index 66d664c8..334e54ee 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-86.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-86.c
@@ -5,10 +5,13 @@
 
 #define N 16
 
+int a[N];
+
+__attribute__ ((noinline))
 int main1 (int n)
 {
   int i, j, k;
-  int a[N], b[N];
+  int b[N];
 
   for (i = 0; i < n; i++)
     {
diff --git a/gcc/testsuite/gcc.dg/vect/vect-all.c b/gcc/testsuite/gcc.dg/vect/vect-all.c
index 2f4429b6..6adb7bf8 100644
--- a/gcc/testsuite/gcc.dg/vect/vect-all.c
+++ b/gcc/testsuite/gcc.dg/vect/vect-all.c
@@ -13,6 +13,7 @@ float fresults1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,48
 float fresults2[N] = {0.00,6.00,12.00,18.00,24.00,30.00,36.00,42.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};
 
 /****************************************************/
+__attribute__ ((noinline))
 void icheck_results (int *a, int *results)
 {
   int i;
@@ -23,6 +24,7 @@ void icheck_results (int *a, int *results)
     }
 }
 
+__attribute__ ((noinline))
 void fcheck_results (float *a, float *results)
 {
   int i;
@@ -33,54 +35,54 @@ void fcheck_results (float *a, float *results)
     }
 }   
 
-void 
+__attribute__ ((noinline)) void 
 fbar_mul (float *a)
 {
   fcheck_results (a, fmul_results);
 } 
 
-void 
+__attribute__ ((noinline)) void 
 fbar_add (float *a)
 {
   fcheck_results (a, fadd_results);
 } 
 
-void 
+__attribute__ ((noinline)) void 
 ibar_add (int *a)
 {
   icheck_results (a, iadd_results);
 } 
 
-void 
+__attribute__ ((noinline)) void 
 fbar1 (float *a)
 {
   fcheck_results (a, fresults1);
 } 
 
-void 
+__attribute__ ((noinline)) void 
 fbar2 (float *a)
 {
   fcheck_results (a, fresults2);
 } 
 
+float a[N];
+float e[N];
+float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
+float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};
+int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+int ia[N];
+char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
+char ca[N];
+short sa[N];
 
 /* All of the loops below are currently vectorizable.  */
 
-int
+__attribute__ ((noinline)) int
 main1 ()
 {
   int i,j;
-  float a[N];
-  float e[N];
-  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};
-  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  int ia[N];
-  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-  char ca[N];
-  short sa[N];
 
   /* Test 1: copy chars.  */
   for (i = 0; i < N; i++)
diff --git a/gcc/testsuite/gcc.dg/vect/wrapv-vect-7.c b/gcc/testsuite/gcc.dg/vect/wrapv-vect-7.c
index ffc5eaca..5d495440 100644
--- a/gcc/testsuite/gcc.dg/vect/wrapv-vect-7.c
+++ b/gcc/testsuite/gcc.dg/vect/wrapv-vect-7.c
@@ -5,11 +5,12 @@
 
 #define N 128
 
+short sa[N];
+short sb[N];
+
 int main1 ()
 {
   int i;
-  short sa[N];
-  short sb[N];
   
   for (i = 0; i < N; i++)
     {
diff --git a/gcc/testsuite/gcc.misc-tests/arm-isr.exp b/gcc/testsuite/gcc.misc-tests/arm-isr.exp
index 8355e93d..1a828d90 100644
--- a/gcc/testsuite/gcc.misc-tests/arm-isr.exp
+++ b/gcc/testsuite/gcc.misc-tests/arm-isr.exp
@@ -21,7 +21,7 @@
 load_lib gcc-dg.exp
 
 dg-init
-if {[istarget "*arm-*-*"] || [istarget "xscale-*-*"]} {
+if {[istarget "*arm*-*-*"] || [istarget "xscale-*-*"]} {
   dg-runtest "$srcdir/$subdir/arm-isr.c" "" ""
 }
 dg-finish
diff --git a/gcc/testsuite/gcc.target/i386/cleanup-1.c b/gcc/testsuite/gcc.target/i386/cleanup-1.c
index afc1e0ae..87c7b8ae 100644
--- a/gcc/testsuite/gcc.target/i386/cleanup-1.c
+++ b/gcc/testsuite/gcc.target/i386/cleanup-1.c
@@ -4,6 +4,7 @@
 
 #include <unwind.h>
 #include <stdlib.h>
+#include <stddef.h>
 #include <string.h>
 #include <stdio.h>
 #include <unistd.h>
@@ -47,6 +48,14 @@ handler (void *p __attribute__((unused)))
   _exit (0);
 }
 
+static void
+__attribute__((noinline))
+check (intptr_t p)
+{
+  if ((p & 15) != 0)
+    abort ();
+}
+
 static int __attribute__((noinline))
 fn5 (void)
 {
@@ -59,6 +68,8 @@ void
 bar (void)
 {
   char dummy __attribute__((cleanup (counter)));
+  unsigned long tmp[4] __attribute__((aligned(16)));
+  check ((intptr_t) tmp);
   fn5 ();
 }
 
@@ -133,9 +144,9 @@ foo (int x)
 	".type	_L_mutex_lock_%=, @function\n"
 "_L_mutex_lock_%=:\n"
 "1:\t"	"leaq	%1, %%rdi\n"
-"2:\t"	"subq	$128, %%rsp\n"
+"2:\t"	"subq	$136, %%rsp\n"
 "3:\t"	"call	bar\n"
-"4:\t"	"addq	$128, %%rsp\n"
+"4:\t"	"addq	$136, %%rsp\n"
 "5:\t"	"jmp	24f\n"
 "6:\t"	".size _L_mutex_lock_%=, .-_L_mutex_lock_%=\n\t"
 	".previous\n\t"
@@ -179,7 +190,7 @@ foo (int x)
 	".sleb128 4b-3b\n"
 "16:\t"	".byte	0x40 + (4b-3b-1) # DW_CFA_advance_loc\n\t"
 	".byte	0x0e	# DW_CFA_def_cfa_offset\n\t"
-	".uleb128 128\n\t"
+	".uleb128 136\n\t"
 	".byte	0x16	# DW_CFA_val_expression\n\t"
 	".uleb128 0x10\n\t"
 	".uleb128 20f-17f\n"
diff --git a/gcc/testsuite/gcc.target/i386/cleanup-2.c b/gcc/testsuite/gcc.target/i386/cleanup-2.c
index a171077f..30e87a0e 100644
--- a/gcc/testsuite/gcc.target/i386/cleanup-2.c
+++ b/gcc/testsuite/gcc.target/i386/cleanup-2.c
@@ -4,6 +4,7 @@
 
 #include <unwind.h>
 #include <stdlib.h>
+#include <stddef.h>
 #include <string.h>
 #include <stdio.h>
 #include <unistd.h>
@@ -47,6 +48,14 @@ handler (void *p __attribute__((unused)))
   _exit (0);
 }
 
+static void
+__attribute__((noinline))
+check (intptr_t p)
+{
+  if ((p & 15) != 0)
+    abort ();
+}
+
 static int __attribute__((noinline))
 fn5 (void)
 {
@@ -59,6 +68,8 @@ void
 bar (void)
 {
   char dummy __attribute__((cleanup (counter)));
+  unsigned long tmp[4] __attribute__((aligned(16)));
+  check ((intptr_t) tmp);
   fn5 ();
 }
 
@@ -74,9 +85,9 @@ foo (int x)
 	".type	_L_mutex_lock_%=, @function\n"
 "_L_mutex_lock_%=:\n"
 "1:\t"	"leaq	%1, %%rdi\n"
-"2:\t"	"subq	$128, %%rsp\n"
+"2:\t"	"subq	$136, %%rsp\n"
 "3:\t"	"call	bar\n"
-"4:\t"	"addq	$128, %%rsp\n"
+"4:\t"	"addq	$136, %%rsp\n"
 "5:\t"	"jmp	21f\n"
 "6:\t"	".size _L_mutex_lock_%=, .-_L_mutex_lock_%=\n\t"
 	".previous\n\t"
@@ -160,7 +171,7 @@ foo (int x)
 	".uleb128 6b-5b-1\n"
 "19:\t"	".byte	0x40 + (3b-1b) # DW_CFA_advance_loc\n\t"
 	".byte	0xe	# DW_CFA_def_cfa_offset\n\t"
-	".uleb128 128\n\t"
+	".uleb128 136\n\t"
 	".byte	0x40 + (5b-3b) # DW_CFA_advance_loc\n\t"
 	".byte	0xe	# DW_CFA_def_cfa_offset\n\t"
 	".uleb128 0\n\t"
diff --git a/gcc/testsuite/gfortran.dg/csqrt_2.f b/gcc/testsuite/gfortran.dg/csqrt_2.f
index 66e08424..dc3d9a80 100644
--- a/gcc/testsuite/gfortran.dg/csqrt_2.f
+++ b/gcc/testsuite/gfortran.dg/csqrt_2.f
@@ -1,4 +1,4 @@
-c { dg-do run { xfail *-*-linux-gnu } }
+c { dg-do run }
 c Fix PR libgfortran/24313
       complex x, y
       complex z
diff --git a/gcc/testsuite/gfortran.dg/vect/vect-5.f90 b/gcc/testsuite/gfortran.dg/vect/vect-5.f90
index ff71b8a3..7a33fc48 100644
--- a/gcc/testsuite/gfortran.dg/vect/vect-5.f90
+++ b/gcc/testsuite/gfortran.dg/vect/vect-5.f90
@@ -36,14 +36,12 @@
         end
 
 ! { dg-final { scan-tree-dump-times "vectorized 2 loops" 1 "vect"  } }
-! { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 1 "vect" { xfail { vect_no_align } } } }
 ! { dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 2 "vect" { xfail { vect_no_align } } } }
 ! { dg-final { scan-tree-dump-times "Alignment of access forced using versioning." 3 "vect" { target { ilp32 && vect_no_align } } } }
 
 ! We also expect to vectorize one loop for lp64 targets that support 
 ! misaligned access:
 !   scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target { lp64 && !vect_no_align } }
-!   scan-tree-dump-times "Alignment of access forced using peeling" 1 "vect" { target { lp64 && !vect_no_align } }
 !   scan-tree-dump-times "Vectorizing an unaligned access" 1 "vect" { target { lp64 && !vect_no_align } }
 ! but we currently can't combine logical operators. (Could define 
 ! a keyword for "not_vect_no_align" if desired). 
diff --git a/gcc/testsuite/lib/target-supports.exp b/gcc/testsuite/lib/target-supports.exp
index adafe8d5..42879e7c 100644
--- a/gcc/testsuite/lib/target-supports.exp
+++ b/gcc/testsuite/lib/target-supports.exp
@@ -1302,7 +1302,7 @@ proc check_effective_target_arm32 { } {
 	verbose "check-effective_target_arm32: using cached result" 2
     } else {
 	set et_arm32_saved 0
-	if { [istarget arm-*-*]
+	if { [istarget arm*-*-*]
 	      || [istarget strongarm*-*-*]
 	      || [istarget xscale-*-*] } {
 	    if ![string match "*-mthumb *" $compiler_flags] {
diff --git a/libiberty/testsuite/test-demangle.c b/libiberty/testsuite/test-demangle.c
index 93793996..d551097d 100644
--- a/libiberty/testsuite/test-demangle.c
+++ b/libiberty/testsuite/test-demangle.c
@@ -46,7 +46,7 @@ static unsigned int lineno;
 #define LINELEN 80
 
 static void
-getline(buf)
+get_line(buf)
      struct line *buf;
 {
   char *data = buf->data;
@@ -150,12 +150,12 @@ main(argc, argv)
 
   for (;;)
     {
-      getline (&format);
+      get_line (&format);
       if (feof (stdin))
 	break;
 
-      getline (&input);
-      getline (&expect);
+      get_line (&input);
+      get_line (&expect);
 
       tests++;
 
@@ -274,7 +274,7 @@ main(argc, argv)
 
       if (no_params)
 	{
-	  getline (&expect);
+	  get_line (&expect);
 	  result = cplus_demangle (input.data, DMGL_ANSI|DMGL_TYPES);
 
 	  if (result
diff --git a/libstdc++-v3/testsuite/19_diagnostics/23591_thread-1.c b/libstdc++-v3/testsuite/19_diagnostics/23591_thread-1.c
deleted file mode 100644
index 8c953eae..00000000
--- a/libstdc++-v3/testsuite/19_diagnostics/23591_thread-1.c
+++ /dev/null
@@ -1,63 +0,0 @@
-// { dg-require-sharedlib "" }
-// { dg-options "-g -O2 -pthread -ldl -x c" { target *-*-linux* } }
-
-// Copyright (C) 2005 Free Software Foundation, Inc.
-//
-// This file is part of the GNU ISO C++ Library.  This library is free
-// software; you can redistribute it and/or modify it under the
-// terms of the GNU General Public License as published by the
-// Free Software Foundation; either version 2, or (at your option)
-// any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License along
-// with this library; see the file COPYING.  If not, write to the Free
-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
-// USA.
-
-#include <pthread.h>
-#include <dlfcn.h>
-#include <errno.h>
-#include <stdio.h>
-#include <string.h>
-
-// NB: This must be compiled and linked as a "C" executable.
-static void* run(void* arg)
-{
-  typedef void (*function_type) (void);
-  void* lib;
-  void (*cb)();
-
-  lib = dlopen("./testsuite_shared.so", RTLD_NOW);
-  if (lib == NULL)
-    {
-      printf("dlopen failed: %s\n", strerror(errno));
-      return NULL;
-    }
-  cb = (function_type) dlsym(lib, "try_throw_exception");
-  if (cb == NULL)
-    {
-      printf("dlsym failed: %s\n", strerror(errno));
-      return NULL;
-    }
-  cb();
-  dlclose(lib);
-  return NULL;
-}
-
-// libstdc++/23591
-int main(void)
-{
-  pthread_t pt;
-
-  if (pthread_create(&pt, NULL, &run, NULL) != 0)
-    return 1;
-  if (pthread_join(pt, NULL) != 0)
-    return 1;
-
-  return 0;
-}
diff --git a/libstdc++-v3/testsuite/abi/cxx_runtime_only_linkage.cc b/libstdc++-v3/testsuite/abi/cxx_runtime_only_linkage.cc
deleted file mode 100644
index 30e53848..00000000
--- a/libstdc++-v3/testsuite/abi/cxx_runtime_only_linkage.cc
+++ /dev/null
@@ -1,26 +0,0 @@
-// { dg-do link }
-// { dg-options "-x c -lsupc++" }
-// Copyright (C) 2006, 2007 Free Software Foundation, Inc.
-//
-// This file is part of the GNU ISO C++ Library.  This library is free
-// software; you can redistribute it and/or modify it under the
-// terms of the GNU General Public License as published by the
-// Free Software Foundation; either version 2, or (at your option)
-// any later version.
-
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-
-// You should have received a copy of the GNU General Public License
-// along with this library; see the file COPYING.  If not, write to
-// the Free Software Foundation, 51 Franklin Street, Fifth Floor,
-// Boston, MA 02110-1301, USA.
-
-// Must be able to link C++ apps compiled with gcc and libsupc++.
-
-int main()
-{
-  return 0;
-}
diff --git a/libstdc++-v3/testsuite/abi/header_cxxabi.c b/libstdc++-v3/testsuite/abi/header_cxxabi.c
deleted file mode 100644
index de6ae7ec..00000000
--- a/libstdc++-v3/testsuite/abi/header_cxxabi.c
+++ /dev/null
@@ -1,22 +0,0 @@
-// { dg-do compile }
-// { dg-options "-x c" }
-// Copyright (C) 2006 Free Software Foundation, Inc.
-//
-// This file is part of the GNU ISO C++ Library.  This library is free
-// software; you can redistribute it and/or modify it under the
-// terms of the GNU General Public License as published by the
-// Free Software Foundation; either version 2, or (at your option)
-// any later version.
-
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-
-// You should have received a copy of the GNU General Public License along
-// with this library; see the file COPYING.  If not, write to the Free
-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
-// USA.
-
-// Must be compilable as "C"
-#include <cxxabi.h>
diff --git a/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-7.cc b/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-7.cc
index 55ff20aa..240de852 100644
--- a/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-7.cc
+++ b/libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-7.cc
@@ -1,4 +1,5 @@
 // { dg-require-cxa-atexit "" }
+// { dg-options "-static" }
 
 // Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 //
diff --git a/libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc b/libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc
index 53a788d5..c07c18e5 100644
--- a/libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc
+++ b/libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc
@@ -65,7 +65,6 @@
 
 using namespace std;
 using namespace pb_ds;
-using namespace pb_ds;
 
 // The value type of the priority queue.
 // The first entry is the node's id, and the second is the distance.
@@ -151,12 +150,16 @@ int main()
 	  // node to the neighbor.
 	  const size_t pot_dist = dist + a_a_edge_legnth[node_id][neighbor_i];
 
+	  if (a_it[neighbor_i] == a_it[0])
+	    continue;
+
 	  // "Relax" the distance (if appropriate) through modify.
 	  if (pot_dist < a_it[neighbor_i]->second)
 	    p.modify(a_it[neighbor_i], pq_value(neighbor_i, pot_dist));
         }
 
       // Done with the node, so we pop it.
+      a_it[node_id] = a_it[0];
       p.pop();
     }
 
