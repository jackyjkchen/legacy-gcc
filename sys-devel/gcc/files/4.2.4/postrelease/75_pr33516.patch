diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 97a278c6..aa8f2c1e 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -3904,7 +3904,15 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,
 	  && !COMPLETE_TYPE_P (new_scope)
 	  /* Do not try to complete dependent types.  */
 	  && !dependent_type_p (new_scope))
-	new_scope = complete_type (new_scope);
+	{
+	  new_scope = complete_type (new_scope);
+	  /* If it is a typedef to current class, use the current
+	     class instead, as the typedef won't have any names inside
+	     it yet.  */
+	  if (!COMPLETE_TYPE_P (new_scope)
+	      && currently_open_class (new_scope))
+	    new_scope = TYPE_MAIN_VARIANT (new_scope);
+	}
       /* Make sure we look in the right scope the next time through
 	 the loop.  */
       parser->scope = new_scope;
diff --git a/gcc/testsuite/g++.dg/lookup/typedef1.C b/gcc/testsuite/g++.dg/lookup/typedef1.C
new file mode 100644
index 00000000..f712fc25
--- /dev/null
+++ b/gcc/testsuite/g++.dg/lookup/typedef1.C
@@ -0,0 +1,32 @@
+// PR c++/33516
+// { dg-do compile }
+
+struct S1;
+typedef S1 T1;
+struct S1 {
+  typedef int U;
+  T1::U i;
+};
+struct S2;
+typedef S2 T2;
+struct S2 {
+  typedef int U;
+};
+T2::U j;
+struct S3;
+typedef S3 T3;
+struct S3 {
+  typedef int U;
+  S3::U i;
+};
+
+void
+foo ()
+{
+  S1 s1;
+  S2 s2;
+  S3 s3;
+  s1.i = 6;
+  j = 7;
+  s3.i = 8;
+}
