diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 27a417ce..20a306cd 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -10763,7 +10763,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)
 	 template-parameter exactly, except that a template-argument
 	 deduced from an array bound may be of any integral type.
 	 The non-type parameter might use already deduced type parameters.  */
+      ++processing_template_decl;
       tparm = tsubst (TREE_TYPE (parm), targs, 0, NULL_TREE);
+      --processing_template_decl;
       if (!TREE_TYPE (arg))
 	/* Template-parameter dependent expression.  Just accept it for now.
 	   It will later be processed in convert_template_argument.  */
diff --git a/gcc/testsuite/g++.dg/pr84001.C b/gcc/testsuite/g++.dg/pr84001.C
new file mode 100644
index 00000000..d638adcb
--- /dev/null
+++ b/gcc/testsuite/g++.dg/pr84001.C
@@ -0,0 +1,18 @@
+/* { dg-do compile } */
+
+struct X {
+	typedef int Obj;
+};
+
+template <int I>
+struct Y {};
+
+template <typename A, typename A::Obj I>
+void foo (A a, Y<I>) {  }
+
+int main () {
+	X x;
+	Y<42> y;
+	foo (x, y);
+}
+
