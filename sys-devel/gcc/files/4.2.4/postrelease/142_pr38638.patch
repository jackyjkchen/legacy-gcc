diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index f571e8cc..58ad254e 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -10276,7 +10276,11 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,
 	type = make_typename_type (parser->scope, decl,
 				   typename_type,
 				   /*complain=*/tf_error);
-      else
+      /* If the `typename' keyword is in effect and DECL is not a type
+	 decl. Then type is non existant.   */
+      else if (tag_type == typename_type && TREE_CODE (decl) != TYPE_DECL)
+        type = NULL_TREE; 
+      else 
 	type = TREE_TYPE (decl);
     }
 
diff --git a/gcc/testsuite/g++.dg/template/typename17.C b/gcc/testsuite/g++.dg/template/typename17.C
new file mode 100644
index 00000000..748b1f7a
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/typename17.C
@@ -0,0 +1,10 @@
+// { dg-do compile }
+
+// This should fail as A::foo<0> is not a typename at all.
+struct A
+{
+  template<int> void foo(int i)
+  {
+    typename A::foo<0>(i1); // { dg-error "" }
+  }
+};
diff --git a/gcc/testsuite/g++.dg/template/typename18.C b/gcc/testsuite/g++.dg/template/typename18.C
new file mode 100644
index 00000000..4134ef6f
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/typename18.C
@@ -0,0 +1,14 @@
+// { dg-do compile }
+
+// These typename should work as they are types.
+struct A
+{
+  typedef int a;
+  template <int>
+  struct f {};
+  template<int> void foo(int i)
+  {
+    typename A::a(i1);
+    typename A::f<0>(i2);
+  }
+};
