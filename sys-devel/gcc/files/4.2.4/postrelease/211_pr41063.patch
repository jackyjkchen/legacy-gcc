diff --git a/gcc/dwarf2out.c b/gcc/dwarf2out.c
index 9a3c594c..93c691e6 100644
--- a/gcc/dwarf2out.c
+++ b/gcc/dwarf2out.c
@@ -12680,6 +12680,15 @@ gen_type_die (tree type, dw_die_ref context_die)
 	  context_die = lookup_type_die (TYPE_CONTEXT (type));
 	  need_pop = 1;
 	}
+      else if (TYPE_CONTEXT (type) != NULL_TREE
+	       && (TREE_CODE (TYPE_CONTEXT (type)) == FUNCTION_DECL))
+	{
+	  /* If this type is local to a function that hasn't been written
+	     out yet, use a NULL context for now; it will be fixed up in
+	     decls_for_scope.  */
+	  context_die = lookup_decl_die (TYPE_CONTEXT (type));
+	  need_pop = 0;
+	}
       else
 	{
 	  declare_in_namespace (type, context_die);
diff --git a/gcc/testsuite/g++.dg/debug/dwarf2/pr41063.C b/gcc/testsuite/g++.dg/debug/dwarf2/pr41063.C
new file mode 100644
index 00000000..f23efef1
--- /dev/null
+++ b/gcc/testsuite/g++.dg/debug/dwarf2/pr41063.C
@@ -0,0 +1,20 @@
+// Contributed by Cary Coutant <ccoutant@google.com>
+// Origin: PR debug/41063
+// { dg-do compile }
+
+struct A {
+  virtual void run();
+};
+
+void test() {
+  struct B : public A {
+    void run() {
+      struct C : public A {
+	C() { }
+	B *b_;
+      };
+      C c;
+    }
+  };
+  B b;
+}
