diff --git a/gcc/cp/class.c b/gcc/cp/class.c
index a6c88de9..84471bc9 100644
--- a/gcc/cp/class.c
+++ b/gcc/cp/class.c
@@ -2125,7 +2125,8 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,
 				   fixed_offset, virtual_offset);
     }
   else
-    gcc_assert (!DECL_THUNK_P (fn));
+    gcc_assert (DECL_INVALID_OVERRIDER_P (overrider_target) ||
+		!DECL_THUNK_P (fn));
 
   /* Assume that we will produce a thunk that convert all the way to
      the final overrider, and not to an intermediate virtual base.  */
diff --git a/gcc/testsuite/g++.dg/inherit/covariant16.C b/gcc/testsuite/g++.dg/inherit/covariant16.C
new file mode 100644
index 00000000..828b5b8f
--- /dev/null
+++ b/gcc/testsuite/g++.dg/inherit/covariant16.C
@@ -0,0 +1,17 @@
+/* PR c++/28253 This used to ICE. */
+/* { dg-do "compile" } */
+
+struct A
+{
+  virtual A* foo();
+};
+
+struct B : virtual A
+{
+  virtual B* foo(); /* { dg-error "overriding" } */
+};
+
+struct C : B
+{
+  virtual C& foo(); /* { dg-error "conflicting return type" } */
+};
