diff --git a/gcc/fold-const.c b/gcc/fold-const.c
index 3f8b3962..275b0a99 100644
--- a/gcc/fold-const.c
+++ b/gcc/fold-const.c
@@ -8542,7 +8542,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)
      safe for every expression, except for a comparison expression
      because its signedness is derived from its operands.  So, in
      the latter case, only strip conversions that don't change the
-     signedness.
+     signedness.  MIN_EXPR/MAX_EXPR also need signedness of arguments
+     preserved.
 
      Note that this is done as an internal manipulation within the
      constant folder, in order to find the simplest representation
@@ -8550,7 +8551,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)
      cases, the appropriate type conversions should be put back in
      the tree that will get out of the constant folder.  */
 
-  if (kind == tcc_comparison)
+  if (kind == tcc_comparison || code == MIN_EXPR || code == MAX_EXPR)
     {
       STRIP_SIGN_NOPS (arg0);
       STRIP_SIGN_NOPS (arg1);
diff --git a/gcc/testsuite/gcc.c-torture/execute/20080506-1.c b/gcc/testsuite/gcc.c-torture/execute/20080506-1.c
new file mode 100644
index 00000000..4f6d6d81
--- /dev/null
+++ b/gcc/testsuite/gcc.c-torture/execute/20080506-1.c
@@ -0,0 +1,21 @@
+/* PR middle-end/36137 */
+extern void abort (void);
+
+#define MIN(a, b) ((a) < (b) ? (a) : (b))
+#define MAX(a, b) ((a) > (b) ? (a) : (b))
+
+int
+main ()
+{
+  unsigned int u;
+  int i = -1;
+
+  u = MAX ((unsigned int) MAX (i, 0), 1);
+  if (u != 1)
+    abort ();
+
+  u = MIN ((unsigned int) MAX (i, 0), (unsigned int) i);
+  if (u != 0)
+    abort ();
+  return 0;
+}
