diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index 757ebfc8..f486e87f 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -3885,6 +3885,13 @@ convert_nontype_argument (tree type, tree expr)
       expr = convert_nontype_argument_function (type, expr);
       if (!expr || expr == error_mark_node)
 	return expr;
+
+      if (TREE_CODE (expr) != ADDR_EXPR)
+	{
+	  error ("%qE is not a valid template argument for type %qT", expr, type);
+	  error ("it must be the address of a function with external linkage");
+	  return NULL_TREE;
+	}
     }
   /* [temp.arg.nontype]/5, bullet 5
 
diff --git a/gcc/cp/typeck.c b/gcc/cp/typeck.c
index bf32e02c..24dac241 100644
--- a/gcc/cp/typeck.c
+++ b/gcc/cp/typeck.c
@@ -611,6 +611,20 @@ merge_types (tree t1, tree t2)
 
   code1 = TREE_CODE (t1);
   code2 = TREE_CODE (t2);
+  if (code1 != code2)
+    {
+      gcc_assert (code1 == TYPENAME_TYPE || code2 == TYPENAME_TYPE);
+      if (code1 == TYPENAME_TYPE)
+	{
+          t1 = resolve_typename_type (t1, /*only_current_p=*/true);
+	  code1 = TREE_CODE (t1);
+	}
+      else
+	{
+          t2 = resolve_typename_type (t2, /*only_current_p=*/true);
+	  code2 = TREE_CODE (t2);
+	}
+    }
 
   switch (code1)
     {
diff --git a/gcc/testsuite/g++.dg/template/func2.C b/gcc/testsuite/g++.dg/template/func2.C
new file mode 100644
index 00000000..b0f691d2
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/func2.C
@@ -0,0 +1,12 @@
+// { dg-do compile }
+
+typedef void (*fptr)();
+fptr zeroptr = 0;
+template<typename T, fptr F> struct foo { };
+template<typename T> struct foo<T,zeroptr> { };
+// { dg-error "not a valid template argument" "not valid" { target *-*-* } 6 } 
+// { dg-error "must be the address" "must be the address " { target *-*-* } 6 }
+
+// The rest is needed to trigger the ICE in 4.0 to 4.3:
+void f() { }
+foo<int,&f> m_foo;
diff --git a/gcc/testsuite/g++.dg/template/typename15.C b/gcc/testsuite/g++.dg/template/typename15.C
new file mode 100644
index 00000000..fece885e
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/typename15.C
@@ -0,0 +1,12 @@
+// PR37314 ice-on-valid-code, from w.doeringer
+template <typename T>
+class Cdeque {
+    typedef T *pointer;
+    class iterator {
+        typedef typename Cdeque<T>::pointer pointer;
+        pointer operator->();
+    };
+};
+template <typename T> T* Cdeque<T>::iterator::operator->() { }
+
+
diff --git a/gcc/testsuite/g++.dg/template/typename16.C b/gcc/testsuite/g++.dg/template/typename16.C
new file mode 100644
index 00000000..45da1116
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/typename16.C
@@ -0,0 +1,25 @@
+// PR37314 rejects-valid, from w.doeringer
+template <typename T>
+struct A {
+  typedef __PTRDIFF_TYPE__ difference_type;
+  struct B {
+    typedef typename A<T>::difference_type difference_type;
+    difference_type operator-(B const&) const; 
+    T t;
+  };
+};
+// 
+
+template <typename T>
+typename A<T>::B::difference_type A<T>::B::operator-(B const&) const {
+  return -1;
+} 
+
+//
+int main() {
+  A<int>::B i;
+  ++i.t;
+  return 0;
+}
+
+
