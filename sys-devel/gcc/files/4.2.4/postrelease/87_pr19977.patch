diff --git a/gcc/c-typeck.c b/gcc/c-typeck.c
index 9646bd6e..17be51e0 100644
--- a/gcc/c-typeck.c
+++ b/gcc/c-typeck.c
@@ -4381,7 +4381,7 @@ store_init_value (tree decl, tree init)
 
   /* ANSI wants warnings about out-of-range constant initializers.  */
   STRIP_TYPE_NOPS (value);
-  constant_expression_warning (value);
+  if (TREE_STATIC (decl)) constant_expression_warning (value);
 
   /* Check if we need to set array size from compound literal size.  */
   if (TREE_CODE (type) == ARRAY_TYPE
diff --git a/gcc/testsuite/gcc.dg/overflow-warn-3.c b/gcc/testsuite/gcc.dg/overflow-warn-3.c
index f20940ef..2aa8b7f7 100644
--- a/gcc/testsuite/gcc.dg/overflow-warn-3.c
+++ b/gcc/testsuite/gcc.dg/overflow-warn-3.c
@@ -40,7 +40,7 @@ f (void)
   /* This expression is not required to be a constant expression, so
      it should just involve undefined behavior at runtime.  */
   int c = INT_MAX + 1; /* { dg-warning "warning: integer overflow in expression" } */
-  /* { dg-bogus "warning: overflow in constant expression" "constant" { xfail *-*-* } 42 } */
+
 }
 
 /* But this expression does need to be constant.  */
diff --git a/gcc/testsuite/gcc.dg/overflow-warn-4.c b/gcc/testsuite/gcc.dg/overflow-warn-4.c
index acf2c876..a36f66f1 100644
--- a/gcc/testsuite/gcc.dg/overflow-warn-4.c
+++ b/gcc/testsuite/gcc.dg/overflow-warn-4.c
@@ -40,7 +40,7 @@ f (void)
   /* This expression is not required to be a constant expression, so
      it should just involve undefined behavior at runtime.  */
   int c = INT_MAX + 1; /* { dg-warning "warning: integer overflow in expression" } */
-  /* { dg-bogus "error: overflow in constant expression" "constant" { xfail *-*-* } 42 } */
+
 }
 
 /* But this expression does need to be constant.  */
