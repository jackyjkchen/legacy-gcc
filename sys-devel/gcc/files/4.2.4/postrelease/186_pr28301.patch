diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 389c54e2..2f232f3c 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -2483,6 +2483,8 @@ cp_parser_skip_to_end_of_block_or_statement (cp_parser* parser)
 	  /* Stop if this is an unnested '}', or closes the outermost
 	     nesting level.  */
 	  nesting_depth--;
+	  if (nesting_depth < 0)
+	    return;
 	  if (!nesting_depth)
 	    nesting_depth = -1;
 	  break;
diff --git a/gcc/testsuite/g++.dg/debug/pr22514.C b/gcc/testsuite/g++.dg/debug/pr22514.C
index 23dc9b2b..3df9e230 100644
--- a/gcc/testsuite/g++.dg/debug/pr22514.C
+++ b/gcc/testsuite/g++.dg/debug/pr22514.C
@@ -10,4 +10,4 @@ namespace s
     using _List_base<i>::_M_impl;
   }
 }  /* { dg-error "expected unqualified-id before '\}'" } */
-s::list<1> OutputModuleListType;  /* { dg-error "expected" } */
+s::list<1> OutputModuleListType;
diff --git a/gcc/testsuite/g++.dg/parse/enum2.C b/gcc/testsuite/g++.dg/parse/enum2.C
index f29d3b56..f77f9170 100644
--- a/gcc/testsuite/g++.dg/parse/enum2.C
+++ b/gcc/testsuite/g++.dg/parse/enum2.C
@@ -4,4 +4,4 @@
 
 // PR c++/18123: ICE pushing tag from invalid template.
 
-template<int> enum E { e }; // { dg-error "template declaration" }
+template<int> enum E { e }; // { dg-error "declaration|expected" }
diff --git a/gcc/testsuite/g++.dg/parse/enum3.C b/gcc/testsuite/g++.dg/parse/enum3.C
index 11c532c6..508e4b94 100644
--- a/gcc/testsuite/g++.dg/parse/enum3.C
+++ b/gcc/testsuite/g++.dg/parse/enum3.C
@@ -1,5 +1,5 @@
 // PR c++/28261
 
-struct A {}; // { dg-error "A" }
+struct A {};
 
-A::A (enum { e }) {} // { dg-error "defined|match" }
+A::A (enum { e }) {} // { dg-error "defined|token" }
diff --git a/gcc/testsuite/g++.dg/template/pr28301.C b/gcc/testsuite/g++.dg/template/pr28301.C
new file mode 100644
index 00000000..a7a00847
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/pr28301.C
@@ -0,0 +1,18 @@
+// PR c++/28301
+// { dg-do compile }
+
+template<typename> struct A
+{
+    template<int> void foo()
+};	// { dg-error "initializer" }
+
+template<> struct A<void>
+{
+    template<int> void foo();
+};
+
+void bar()
+{
+    A<void> a;
+    a.foo<0>();
+}
