diff --git a/gcc/fortran/trans-array.c b/gcc/fortran/trans-array.c
index 3d8f2f11..47290a81 100644
--- a/gcc/fortran/trans-array.c
+++ b/gcc/fortran/trans-array.c
@@ -784,13 +784,18 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)
   dest_info->data = gfc_conv_descriptor_data_get (src);
   gfc_conv_descriptor_data_set (&se->pre, dest, dest_info->data);
 
-  /* Copy the offset.  This is not changed by transposition: the top-left
-     element is still at the same offset as before.  */
-  dest_info->offset = gfc_conv_descriptor_offset (src);
+  /* Copy the offset.  This is not changed by transposition; the top-left
+     element is still at the same offset as before, except where the loop
+     starts at zero.  */
+  if (!integer_zerop (loop->from[0]))
+    dest_info->offset = gfc_conv_descriptor_offset (src);
+  else
+    dest_info->offset = gfc_index_zero_node;
+
   gfc_add_modify_expr (&se->pre,
 		       gfc_conv_descriptor_offset (dest),
 		       dest_info->offset);
-
+	  
   if (dest_info->dimen > loop->temp_dim)
     loop->temp_dim = dest_info->dimen;
 }
diff --git a/gcc/testsuite/gfortran.dg/transpose_1.f90 b/gcc/testsuite/gfortran.dg/transpose_1.f90
new file mode 100644
index 00000000..9ad784ea
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/transpose_1.f90
@@ -0,0 +1,27 @@
+! { dg-do compile }
+! Tests the fix for PR32962, in which the result of TRANSPOSE, when
+! an actual argument of an elemental intrinsic would receive the
+! wrong offset.
+!
+! Contributed by Wirawan Purwanto <wirawan0@gmail.com>
+!
+  real(kind=8), allocatable :: b(:,:)
+  real(kind=8) :: a(2,2), c(2,2)
+  i = 2
+  allocate (b(i,i))
+  a(1,1) = 2
+  a(2,1) = 3
+  a(1,2) = 7
+  a(2,2) = 11
+  call foo
+  call bar
+  if (any (c .ne. b)) call abort
+contains
+  subroutine foo
+    b = cos(transpose(a))
+  end subroutine
+  subroutine bar
+    c = transpose(a)
+    c = cos(c)
+  end subroutine
+end program
