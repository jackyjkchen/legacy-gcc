diff --git a/gcc/cp/cvt.c b/gcc/cp/cvt.c
index 0d41cafa..f6864fda 100644
--- a/gcc/cp/cvt.c
+++ b/gcc/cp/cvt.c
@@ -1227,7 +1227,7 @@ type_promotes_to (tree type)
 
   /* bool always promotes to int (not unsigned), even if it's the same
      size.  */
-  if (type == boolean_type_node)
+  if (TREE_CODE (type) == BOOLEAN_TYPE)
     type = integer_type_node;
 
   /* Normally convert enums to int, but convert wide enums to something
diff --git a/gcc/cp/typeck.c b/gcc/cp/typeck.c
index b983c7fc..8ec4104e 100644
--- a/gcc/cp/typeck.c
+++ b/gcc/cp/typeck.c
@@ -4231,7 +4231,7 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)
 	  return error_mark_node;
 
 	/* Forbid using -- on `bool'.  */
-	if (same_type_p (declared_type, boolean_type_node))
+	if (TREE_CODE (declared_type) == BOOLEAN_TYPE)
 	  {
 	    if (code == POSTDECREMENT_EXPR || code == PREDECREMENT_EXPR)
 	      {
diff --git a/gcc/testsuite/g++.dg/expr/bool3.C b/gcc/testsuite/g++.dg/expr/bool3.C
new file mode 100644
index 00000000..61669e27
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/bool3.C
@@ -0,0 +1,21 @@
+// { dg-do run }
+// PR C++/29295
+// make sure that a typedef for a bool will have the
+//  the same results as a bool itself.
+
+extern "C" void abort();
+typedef volatile bool my_bool;
+int main()
+{ 
+  my_bool b = false;
+  int i;
+
+  b++;
+  b++;
+  i = b;
+  if (i != 1)
+    abort ();
+  return 0;
+}
+
+
diff --git a/gcc/testsuite/g++.dg/expr/bool4.C b/gcc/testsuite/g++.dg/expr/bool4.C
new file mode 100644
index 00000000..dce51ec3
--- /dev/null
+++ b/gcc/testsuite/g++.dg/expr/bool4.C
@@ -0,0 +1,13 @@
+// { dg-do compile }
+// make sure that a typedef for a bool will have the
+//  the same results as a bool itself.
+
+
+typedef volatile bool my_bool;
+int main()
+{
+  my_bool b = false;
+  b--; // { dg-error "" }
+  return 0;
+}
+
