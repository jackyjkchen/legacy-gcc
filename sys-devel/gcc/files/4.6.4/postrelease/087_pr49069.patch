diff --git a/gcc/config/arm/arm.md b/gcc/config/arm/arm.md
index 0e126d9d3..afd6ad950 100644
--- a/gcc/config/arm/arm.md
+++ b/gcc/config/arm/arm.md
@@ -6534,7 +6534,7 @@
 (define_expand "cbranchdi4"
   [(set (pc) (if_then_else
 	      (match_operator 0 "arm_comparison_operator"
-	       [(match_operand:DI 1 "cmpdi_operand" "")
+	       [(match_operand:DI 1 "s_register_operand" "")
 	        (match_operand:DI 2 "cmpdi_operand" "")])
 	      (label_ref (match_operand 3 "" ""))
 	      (pc)))]
@@ -6543,10 +6543,6 @@
      rtx swap = NULL_RTX;
      enum rtx_code code = GET_CODE (operands[0]);
 
-     /* We should not have two constants.  */
-     gcc_assert (GET_MODE (operands[1]) == DImode
-		 || GET_MODE (operands[2]) == DImode);
-
     /* Flip unimplemented DImode comparisons to a form that
        arm_gen_compare_reg can handle.  */
      switch (code)
@@ -7527,17 +7523,13 @@
 (define_expand "cstoredi4"
   [(set (match_operand:SI 0 "s_register_operand" "")
 	(match_operator:SI 1 "arm_comparison_operator"
-	 [(match_operand:DI 2 "cmpdi_operand" "")
+	 [(match_operand:DI 2 "s_register_operand" "")
 	  (match_operand:DI 3 "cmpdi_operand" "")]))]
   "TARGET_32BIT"
   "{
      rtx swap = NULL_RTX;
      enum rtx_code code = GET_CODE (operands[1]);
 
-     /* We should not have two constants.  */
-     gcc_assert (GET_MODE (operands[2]) == DImode
-		 || GET_MODE (operands[3]) == DImode);
-
     /* Flip unimplemented DImode comparisons to a form that
        arm_gen_compare_reg can handle.  */
      switch (code)
diff --git a/gcc/testsuite/gcc.dg/pr49069.c b/gcc/testsuite/gcc.dg/pr49069.c
new file mode 100644
index 000000000..f0fe1f2f0
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr49069.c
@@ -0,0 +1,15 @@
+/* PR target/49069 */
+/* { dg-do compile } */
+/* { dg-options "-Os -fno-tree-forwprop -Wno-div-by-zero" } */
+
+int a;
+const unsigned long long b[1] = { 1ULL };
+extern void bar (int);
+
+void
+foo (void)
+{
+  for (a = 0; a == 1; a = 2)
+    ;
+  bar (b[0] == (a == 0 ? a : a / 0));
+}
