diff --git a/gcc/cp/decl.c b/gcc/cp/decl.c
index 7f5d49301..4fe0cc64c 100644
--- a/gcc/cp/decl.c
+++ b/gcc/cp/decl.c
@@ -7844,6 +7844,14 @@ create_array_type_for_decl (tree name, tree type, tree size)
       return error_mark_node;
     }
 
+  /* 8.3.4p1: ...if the type of the identifier of D contains the auto
+     type-specifier, the program is ill-formed.  */
+  if (type_uses_auto (type))
+    {
+      error ("%qD declared as array of %qT", name, type);
+      return error_mark_node;
+    }
+
   /* Figure out the index type for the array.  */
   if (size)
     itype = compute_array_index_type (name, size, tf_warning_or_error);
diff --git a/gcc/testsuite/g++.dg/cpp0x/auto3.C b/gcc/testsuite/g++.dg/cpp0x/auto3.C
index 860790d7d..c57bf461c 100644
--- a/gcc/testsuite/g++.dg/cpp0x/auto3.C
+++ b/gcc/testsuite/g++.dg/cpp0x/auto3.C
@@ -10,7 +10,7 @@ auto x;				// { dg-error "auto" }
 auto i = 42, j = 42.0;		// { dg-error "auto" }
 
 // New CWG issue
-auto a[2] = { 1, 2 };		// { dg-error "initializer_list" }
+auto a[2] = { 1, 2 };		// { dg-error "auto|initializer_list" }
 
 template<class T>
 struct A { };
diff --git a/gcc/testsuite/g++.dg/cpp0x/auto42.C b/gcc/testsuite/g++.dg/cpp0x/auto42.C
new file mode 100644
index 000000000..a47426f0b
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/auto42.C
@@ -0,0 +1,10 @@
+// PR c++/60628
+// { dg-do compile }
+// { dg-options "-std=c++0x" }
+
+#include <initializer_list>
+
+void foo(int i)
+{
+  auto x[1] = { 0 };		// { dg-error "array of .auto" }
+}
