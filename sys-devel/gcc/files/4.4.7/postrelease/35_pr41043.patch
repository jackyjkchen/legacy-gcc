diff --git a/gcc/testsuite/gcc.dg/Wstrict-overflow-18.c b/gcc/testsuite/gcc.dg/Wstrict-overflow-18.c
index e26e7e914..2767c44fb 100644
--- a/gcc/testsuite/gcc.dg/Wstrict-overflow-18.c
+++ b/gcc/testsuite/gcc.dg/Wstrict-overflow-18.c
@@ -2,7 +2,10 @@
 /* { dg-options "-fstrict-overflow -O2 -Wstrict-overflow" } */
 
 /* Don't warn about an overflow when folding i > 0.  The loop analysis
-   should determine that i does not wrap.  */
+   should determine that i does not wrap.
+
+   The test is really bogus, p->a - p->b can be larger than INT_MAX
+   and thus i can very well wrap.  */
 
 struct c { unsigned int a; unsigned int b; };
 extern void bar (struct c *);
@@ -14,7 +17,7 @@ foo (struct c *p)
 
   for (i = 0; i < p->a - p->b; ++i)
     {
-      if (i > 0)
+      if (i > 0)  /* { dg-bogus "warning" "" { xfail *-*-* } } */
 	sum += 2;
       bar (p);
     }
diff --git a/gcc/testsuite/gfortran.dg/pr41043.f90 b/gcc/testsuite/gfortran.dg/pr41043.f90
new file mode 100644
index 000000000..fab428b4d
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/pr41043.f90
@@ -0,0 +1,11 @@
+! { dg-do compile }
+! { dg-options "-O2" }
+      subroutine foo
+      implicit none
+
+      integer :: i
+
+      call gee_i(int(i**huge(0_8),kind=kind(i)))
+
+      end subroutine foo
+
diff --git a/gcc/tree-vrp.c b/gcc/tree-vrp.c
index ed31a9892..4023ded06 100644
--- a/gcc/tree-vrp.c
+++ b/gcc/tree-vrp.c
@@ -3311,7 +3311,8 @@ vrp_var_may_overflow (tree var, gimple stmt)
     return true;
 
   l = loop_containing_stmt (stmt);
-  if (l == NULL)
+  if (l == NULL
+      || !loop_outer (l))
     return true;
 
   chrec = instantiate_parameters (l, analyze_scalar_evolution (l, var));
@@ -5367,7 +5368,6 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)
 	   && TYPE_MAX_VALUE (TREE_TYPE (lhs)))
 	  || POINTER_TYPE_P (TREE_TYPE (lhs))))
     {
-      struct loop *l;
       value_range_t new_vr = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };
 
       if (code == GIMPLE_CALL)
@@ -5375,12 +5375,6 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)
       else
 	extract_range_from_assignment (&new_vr, stmt);
 
-      /* If STMT is inside a loop, we may be able to know something
-	 else about the range of LHS by examining scalar evolution
-	 information.  */
-      if (current_loops && (l = loop_containing_stmt (stmt)))
-	adjust_range_with_scev (&new_vr, l, stmt, lhs);
-
       if (update_value_range (lhs, &new_vr))
 	{
 	  *output_p = lhs;
@@ -6290,6 +6284,7 @@ vrp_visit_phi_node (gimple phi)
   value_range_t *lhs_vr = get_value_range (lhs);
   value_range_t vr_result = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };
   int edges, old_edges;
+  struct loop *l;
 
   copy_value_range (&vr_result, lhs_vr);
 
@@ -6353,6 +6348,14 @@ vrp_visit_phi_node (gimple phi)
 	}
     }
 
+  /* If this is a loop PHI node SCEV may known more about its
+     value-range.
+     ???  Identify loop PHI nodes properly.   */
+  if (current_loops
+      && (l = loop_containing_stmt (phi))
+      && loop_outer (l))
+    adjust_range_with_scev (&vr_result, l, phi, lhs);
+
   if (vr_result.type == VR_VARYING)
     goto varying;
 
