diff --git a/gcc/fortran/resolve.c b/gcc/fortran/resolve.c
index 1c4a727db..20fb3aa0d 100644
--- a/gcc/fortran/resolve.c
+++ b/gcc/fortran/resolve.c
@@ -3228,9 +3228,12 @@ resolve_operator (gfc_expr *e)
 	sprintf (msg, _("Operand of user operator '%s' at %%L is %s"),
 		 e->value.op.uop->name, gfc_typename (&op1->ts));
       else
-	sprintf (msg, _("Operands of user operator '%s' at %%L are %s/%s"),
-		 e->value.op.uop->name, gfc_typename (&op1->ts),
-		 gfc_typename (&op2->ts));
+	{
+	  sprintf (msg, _("Operands of user operator '%s' at %%L are %s/%s"),
+		   e->value.op.uop->name, gfc_typename (&op1->ts),
+		   gfc_typename (&op2->ts));
+	  e->value.op.uop->op->sym->attr.referenced = 1;
+	}
 
       goto bad_op;
 
diff --git a/gcc/testsuite/gfortran.dg/userdef_operator_2.f90 b/gcc/testsuite/gfortran.dg/userdef_operator_2.f90
new file mode 100644
index 000000000..83392c6b6
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/userdef_operator_2.f90
@@ -0,0 +1,17 @@
+! { dg-do compile }
+! PR 45338 - no ICE when cmp is not used explicitly.
+! Test case by Simon Smart 
+module test_mod
+  implicit none
+contains
+  subroutine test_fn (cmp)
+    interface operator(.myop.)
+       pure function cmp (a, b) result(ret)
+         integer, intent(in) :: a, b
+         logical ret
+       end function cmp
+    end interface
+    integer :: a, b
+    print*, a .myop. b
+  end subroutine test_fn
+end module test_mod
