diff --git a/gcc/testsuite/g++.old-deja/g++.other/init5.C b/gcc/testsuite/g++.old-deja/g++.other/init5.C
index 92b1d32..566ae11 100644
--- a/gcc/testsuite/g++.old-deja/g++.other/init5.C
+++ b/gcc/testsuite/g++.old-deja/g++.other/init5.C
@@ -1,6 +1,6 @@
 // Objects must be destructed in decreasing cnt order
 // Original test attributed to James Kanze <jkanze@otelo.ibmmail.com>
-// execution test - XFAIL *-*-*
+// execution test - XFAIL *-*-gnulibc1
 
 extern "C" void abort ();
 
diff --git a/gcc/testsuite/gcc.c-torture/compile/compile.exp b/gcc/testsuite/gcc.c-torture/compile/compile.exp
index 1b075a8..949c748 100644
--- a/gcc/testsuite/gcc.c-torture/compile/compile.exp
+++ b/gcc/testsuite/gcc.c-torture/compile/compile.exp
@@ -24,6 +24,7 @@ if $tracelevel then {
 
 # load support procs
 load_lib c-torture.exp
+load_lib target-supports.exp
 
 foreach testcase [glob -nocomplain $srcdir/$subdir/*.c] {
     # If we're only testing specific files and this isn't one of them, skip it.
diff --git a/gcc/testsuite/gcc.c-torture/execute/20020227-1.x b/gcc/testsuite/gcc.c-torture/execute/20020227-1.x
index 67afb82..4e71947 100644
--- a/gcc/testsuite/gcc.c-torture/execute/20020227-1.x
+++ b/gcc/testsuite/gcc.c-torture/execute/20020227-1.x
@@ -24,6 +24,8 @@ if { [istarget "sparc64-*-*"] || [istarget "sparcv9-*-*"] } {
             { "-O0" "-O1" }
         }
     }
+} elseif { [istarget "powerpc64-*-*"] || [istarget "x86_64-*-*"] } {
+    # PowerPC-64 and x86_64 do not fail at any optimization level.
 } elseif { [istarget "*64*-*-*"] || [istarget "alpha*-*-*"]
         || [istarget "mmix-*-*"] || [istarget "mips*-*-irix6*"] } {
     # Other 64-bit targets fail at all optimization levels.
diff --git a/gcc/testsuite/gcc.c-torture/execute/20020307-2.c b/gcc/testsuite/gcc.c-torture/execute/20020307-2.c
index df0efe0..682745b 100644
--- a/gcc/testsuite/gcc.c-torture/execute/20020307-2.c
+++ b/gcc/testsuite/gcc.c-torture/execute/20020307-2.c
@@ -1,9 +1,9 @@
 /* PR c/3711
    This testcase ICEd on IA-32 at -O0 and was miscompiled otherwise,
    because std_expand_builtin_va_arg didn't handle variable size types.  */
-
 #include <stdarg.h>
 
+#ifndef __x86_64__
 extern void abort (void);
 extern void exit (int);
 
@@ -35,9 +35,11 @@ void foo (int size, ...)
     bar (d.x[i]);
   va_end (ap);
 }
+#endif
 
 int main (void)
 {
+#ifndef __x86_64__
   int z = 5;
   struct { char a[z]; } x, y;
           
@@ -52,5 +54,6 @@ int main (void)
   y.a[3] = '8';
   y.a[4] = '9';
   foo (z, x, y);
+#endif
   exit (0);
 }
diff --git a/gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp b/gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp
index 6b23a4e..f0120a3 100644
--- a/gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp
+++ b/gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp
@@ -38,6 +38,9 @@ set additional_flags "";
 if [istarget "i\[34567\]86-*-*"] then {
   lappend additional_flags "-ffloat-store"
 }
+if { [istarget "x86_64-*-*"] && [check_effective_target_ilp32] } then {
+  lappend additional_flags "-ffloat-store"
+}
 if [istarget "m68k-*-*"] then {
   lappend additional_flags "-ffloat-store"
 }
diff --git a/gcc/testsuite/gcc.dg/20020103-1.c b/gcc/testsuite/gcc.dg/20020103-1.c
index 7a5fdbe..54ad83c 100644
--- a/gcc/testsuite/gcc.dg/20020103-1.c
+++ b/gcc/testsuite/gcc.dg/20020103-1.c
@@ -1,8 +1,8 @@
 /* Verify that constant equivalences get reloaded properly, either by being
    spilled to the stack, or regenerated, but not dropped to memory.  */
-/* { dg-do compile { target i?86-*-* powerpc-*-* rs6000-*-* alpha*-*-* } } */
-/* { dg-options "-O2 -fpic -fno-omit-frame-pointer" } */
-/* { dg-final { scan-assembler-not "LC" } } */
+/* { dg-do compile { target i?86-*-* powerpc-*-* rs6000-*-* alpha*-*-* x86_64-*-*} } */
+/* { dg-options "-O2 -fpic -fno-omit-frame-pointer -fno-asynchronous-unwind-tables" } */
+/* { dg-final { scan-assembler-not "LC\[0-9\]" } } */
 
 /* Clobber all call-saved registers that can hold a pointer value.  */
 #if defined(__i386__)
@@ -16,6 +16,9 @@
 #define clobber \
   asm volatile("#asm" : : : "$9", "$10", "$11", "$12", "$13", "$14", \
 	       "$f2", "$f3", "$f4", "$f5", "$f6", "$f7", "$f8", "$f9")
+#elif defined(__x86_64__)
+#define clobber \
+  asm volatile("#asm" : : : "rcx", "rdx", "rsi", "rdi", "r8", "r9", "r10", "r11")
 #else
 #error no clobber macro defined
 #endif
diff --git a/gcc/testsuite/gcc.dg/20020312-2.c b/gcc/testsuite/gcc.dg/20020312-2.c
index 3e187ec..8231938 100644
--- a/gcc/testsuite/gcc.dg/20020312-2.c
+++ b/gcc/testsuite/gcc.dg/20020312-2.c
@@ -34,6 +34,8 @@
 /* No pic register.  */
 #elif defined(__H8300__) || defined(__H8300H__) || defined(__H8300S__)
 /* No pic register.  */
+#elif defined(_IBMR2)
+/* No pic register.  */
 #elif #cpu(i370)
 /* No pic register.  */
 #elif defined(__i386__)
@@ -64,14 +66,14 @@
 /* No pic register.  */
 #elif #cpu(ns32k)
 /* No pic register.  */
-#elif defined(__parisc__)
+#elif defined(__hppa__)
 /* PIC register is %r27 or %r19, but is used even without -fpic.  */
 #elif defined(__pdp11__)
 /* No pic register.  */
 #elif defined(__pj__)
 /* No pic register.  */
-#elif defined(__powerpc__)
-# ifdef __darwin__
+#elif defined(__powerpc__) || defined(__PPC__) || defined(__POWERPC__)
+# ifdef __MACH__
 #  define PIC_REG  "31"
 # else
 #  define PIC_REG  "30"
@@ -92,6 +94,10 @@
 /* No pic register.  */
 #elif defined(__XTENSA__)
 /* No pic register.  */
+#elif defined(__sh__)
+# define PIC_REG  "r12"
+#elif defined(__x86_64__)
+/* No pic register.  */
 #else
 # error "Modify the test for your target."
 #endif
@@ -138,8 +144,9 @@ main()
 
   /* Additionally test that the prologue/epilogue properly does *not*
      save and restore global registers.  Not possible when the PIC
-     register is in a register window, of course.  */
-#ifndef __sparc__
+     register is in a register window, of course.  On Darwin, you can't
+     call library routines from non-PIC code.  */
+#if !defined (__sparc__) && !(defined(__MACH__) && defined(__POWERPC__))
   if (reg)
     abort ();
 #endif
diff --git a/gcc/testsuite/gcc.dg/special/ecos.exp b/gcc/testsuite/gcc.dg/special/ecos.exp
index b887502..870a9a7 100644
--- a/gcc/testsuite/gcc.dg/special/ecos.exp
+++ b/gcc/testsuite/gcc.dg/special/ecos.exp
@@ -164,11 +164,7 @@ if { [ string first "--gc-sections" $ld_output ] >= 0
      && ! [istarget powerpc*-*-aix*] } {
 
     dg-init
-    if [isnative] {
-	dg-runtest "$srcdir/$subdir/gcsec-1.c" "-ffunction-sections -fdata-sections -Wl,--gc-sections -static" ""
-    } else {
 	dg-runtest "$srcdir/$subdir/gcsec-1.c" "-ffunction-sections -fdata-sections -Wl,--gc-sections" ""
-    }
     dg-finish
 } else {
     unsupported "gcsec-1.c"
diff --git a/gcc/testsuite/gcc.misc-tests/linkage.exp b/gcc/testsuite/gcc.misc-tests/linkage.exp
index 4778376..cb0122d 100644
--- a/gcc/testsuite/gcc.misc-tests/linkage.exp
+++ b/gcc/testsuite/gcc.misc-tests/linkage.exp
@@ -27,6 +27,12 @@ if [isnative] then {
 
 	# Need to ensure ABI for native compiler matches gcc
 	set native_cflags ""
+	if [istarget "x86_64-*-linux*"] {
+	    set file_string [exec file "linkage-x.o"]
+	    if [ string match "*32-bit*" $file_string ] {
+		set native_cflags "-m32"
+	    }
+	}
 	if  [istarget "mips-sgi-irix6*"] {
 	    set file_string [exec file "linkage-x.o"]
 	    if [ string match "*64*" $file_string ] {
diff --git a/gcc/testsuite/lib/target-supports.exp b/gcc/testsuite/lib/target-supports.exp
index efcc941..dc9e432 100644
--- a/gcc/testsuite/lib/target-supports.exp
+++ b/gcc/testsuite/lib/target-supports.exp
@@ -19,6 +19,47 @@
 
 # This file defines procs for determining features supported by the target.
 
+# Try to compile some code and return the messages printed by the compiler.
+#
+# BASENAME is a basename to use for temporary files.
+# TYPE is the type of compilation to perform (see target_compile).
+# CONTENTS gives the contents of the input file.
+# The rest is optional:
+# OPTIONS: additional compiler options to use.
+proc get_compiler_messages {basename type contents args} {
+    global tool
+
+    if { [llength $args] > 0 } {
+	set options "additional_flags=[lindex $args 0]"
+    } else {
+	set options ""
+    }
+
+    set src ${basename}[pid].c
+    switch $type {
+	assembly { set output ${basename}[pid].s }
+	object { set output ${basename}[pid].o }
+    }
+    set f [open $src "w"]
+    puts $f $contents
+    close $f
+    set lines [${tool}_target_compile $src $output $type "$options"]
+    file delete $src
+    remote_file build delete $output
+
+    return $lines
+}
+
+proc current_target_name { } {
+    global target_info
+    if [info exists target_info(target,name)] {
+	set answer $target_info(target,name)
+    } else {
+	set answer ""
+    }
+    return $answer
+}
+
 ###############################
 # proc check_weak_available { }
 ###############################
@@ -112,3 +153,125 @@ proc check_alias_available { testfile } {
 
     return $alias_available_saved
 }
+
+# Return 1 if -fpic and -fPIC are supported, as in no warnings or errors
+# emitted, 0 otherwise.  Whether a shared library can actually be built is
+# out of scope for this test.
+#
+# When the target name changes, replace the cached result.
+
+proc check_effective_target_fpic { } {
+    global et_fpic_saved
+    global et_fpic_target_name
+
+    if { ![info exists et_fpic_target_name] } {
+	set et_fpic_target_name ""
+    }
+
+    # If the target has changed since we set the cached value, clear it.
+    set current_target [current_target_name]
+    if { $current_target != $et_fpic_target_name } {
+	verbose "check_effective_target_fpic: `$et_fpic_target_name'" 2
+	set et_fpic_target_name $current_target
+	if [info exists et_fpic_saved] {
+	    verbose "check_effective_target_fpic: removing cached result" 2
+	    unset et_fpic_saved
+	}
+    }
+
+    if [info exists et_fpic_saved] {
+	verbose "check_effective_target_fpic: using cached result" 2
+    } else {
+	verbose "check_effective_target_fpic: compiling source" 2
+
+	# Note that M68K has a multilib that supports -fpic but not
+	# -fPIC, so we need to check both.  We test with a program that
+	# requires GOT references.
+	set et_fpic_saved [string match "" [get_compiler_messages fpic object {
+	    extern int foo (void); extern int bar;
+	    int baz (void) { return foo () + bar; }
+	} "-fpic"]]
+
+	if { $et_fpic_saved != 0 } {
+	    set et_fpic_saved [string match "" [get_compiler_messages fpic object {
+		extern int foo (void); extern int bar;
+		int baz (void) { return foo () + bar; }
+	    } "-fPIC"]]
+	}
+    }
+    verbose "check_effective_target_fpic: returning $et_fpic_saved" 2
+    return $et_fpic_saved
+}
+
+# Return 1 if we're generating 32-bit code using default options, 0
+# otherwise.
+#
+# When the target name changes, replace the cached result.
+
+proc check_effective_target_ilp32 { } {
+    global et_ilp32_saved
+    global et_ilp32_target_name
+
+    if { ![info exists et_ilp32_target_name] } {
+	set et_ilp32_target_name ""
+    }
+
+    # If the target has changed since we set the cached value, clear it.
+    set current_target [current_target_name]
+    if { $current_target != $et_ilp32_target_name } {
+	verbose "check_effective_target_ilp32: `$et_ilp32_target_name' `$current_target'" 2
+	set et_ilp32_target_name $current_target
+	if { [info exists et_ilp32_saved] } {
+	    verbose "check_effective_target_ilp32: removing cached result" 2
+	    unset et_ilp32_saved
+	}
+    }
+
+    if [info exists et_ilp32_saved] {
+	verbose "check-effective_target_ilp32: using cached result" 2
+    } else {
+	verbose "check_effective_target_ilp32: compiling source" 2
+	set et_ilp32_saved [string match "" [get_compiler_messages ilp32 object {
+	    int dummy[(sizeof (int) == 4 && sizeof (void *) == 4 && sizeof (long) == 4 ) ? 1 : -1];
+	}]]
+    }
+    verbose "check_effective_target_ilp32: returning $et_ilp32_saved" 2
+    return $et_ilp32_saved
+}
+
+# Return 1 if we're generating 64-bit code using default options, 0
+# otherwise.
+#
+# When the target name changes, replace the cached result.
+
+proc check_effective_target_lp64 { } {
+    global et_lp64_saved
+    global et_lp64_target_name
+
+    if { ![info exists et_lp64_target_name] } {
+	set et_lp64_target_name ""
+    }
+
+    # If the target has changed since we set the cached value, clear it.
+    set current_target [current_target_name]
+    if { $current_target != $et_lp64_target_name } {
+	verbose "check_effective_target_lp64: `$et_lp64_target_name' `$current_target'" 2
+	set et_lp64_target_name $current_target
+	if [info exists et_lp64_saved] {
+	    verbose "check_effective_target_lp64: removing cached result" 2
+	    unset et_lp64_saved
+	}
+    }
+
+    if [info exists et_lp64_saved] {
+	verbose "check_effective_target_lp64: using cached result" 2
+    } else {
+	verbose "check_effective_target_lp64: compiling source" 2
+	set et_lp64_saved [string match "" [get_compiler_messages lp64 object {
+	    int dummy[(sizeof (int) == 4 && sizeof (void *) == 8 && sizeof (long) == 8 ) ? 1 : -1];
+	}]]
+    }
+    verbose "check_effective_target_lp64: returning $et_lp64_saved" 2
+    return $et_lp64_saved
+}
+
diff --git a/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc b/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc
index b2acb67..25a36ef 100644
--- a/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc
+++ b/libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc
@@ -1,6 +1,6 @@
 // 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>
 
-// Copyright (C) 2000, 2002 Free Software Foundation
+// Copyright (C) 2000, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -31,7 +31,7 @@ void test01()
   typedef codecvt_base::result			result;
   typedef codecvt<char, char, mbstate_t> 	c_codecvt;
 
-  bool 			test = true;
+  bool test __attribute__((unused)) = true;
   const char* 		c_lit = "black pearl jasmine tea";
   const char* 	        from_next;
   int 			size = 25;
@@ -39,7 +39,7 @@ void test01()
   char*                 c_ref = new char[size];
   char*			to_next;
 
-  locale 		loc;
+  locale 		loc = locale::classic();
   c_codecvt::state_type state;
   const c_codecvt* 	cvt = &use_facet<c_codecvt>(loc); 
 
@@ -73,58 +73,12 @@ void test01()
   VERIFY( !strcmp(c_arr, c_lit) ); 
   VERIFY( to_next == c_arr );
 
-  int i = cvt->encoding();
-  VERIFY( i == 1 );
-
-  VERIFY( cvt->always_noconv() );
-
-  int j = cvt->length(state, c_lit, c_lit + size, 5);
-  VERIFY( j == 5 );
-
-  int k = cvt->max_length();
-  VERIFY( k == 1 );
-
   delete [] c_arr;
   delete [] c_ref;
 }
 
-// libstdc++/5280
-void test02()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test03()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-
 int main ()
 {
   test01();
-  test02();
-  test03();
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc b/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc
index 1eb505f..8410a35 100644
--- a/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc
+++ b/libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc
@@ -1,6 +1,6 @@
-// 2000-08-18 Benjamin Kosnik <bkoz@cygnus.com>
+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>
 
-// Copyright (C) 2000, 2002 Free Software Foundation
+// Copyright (C) 2000, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -20,11 +20,9 @@
 
 // 22.2.1.5 - Template class codecvt [lib.locale.codecvt]
 
-#include <cwchar> // for mbstate_t
 #include <locale>
 #include <testsuite_hooks.h>
 
-
 // Need to explicitly set the state(mbstate_t) to zero.
 // How to do this is not specified by the ISO C99 standard, so we
 // might need to add some operators to make the intuiative case
@@ -34,7 +32,6 @@
 // or, can use this explicit "C" initialization:
 //   w_codecvt::state_type state01 = {0, 0};
 // .. except Ulrich says: Use memset. Always use memset. Feel the force...
-#ifdef _GLIBCPP_USE_WCHAR_T
 void
 zero_state(std::mbstate_t& state)
 { std::memset(&state, 0, sizeof(std::mbstate_t)); }
@@ -48,43 +45,16 @@ void test01()
   typedef codecvt_base::result			result;
   typedef wchar_t				int_type;
   typedef char					ext_type;
-  typedef char_traits<wchar_t>			int_traits;
-  typedef char_traits<char>			ext_traits;
 
-  bool 			test = true;
+  bool test __attribute__((unused)) = true;
   const ext_type* 	e_lit = "black pearl jasmine tea";
-  const ext_type*       efrom_next;
-  const int_type* 	i_lit = L"black pearl jasmine tea";
-  const int_type*       ifrom_next;
   int 			size = strlen(e_lit);
   ext_type* 		e_arr = new ext_type[size + 1];
   ext_type*		eto_next;
-  int_type* 		i_arr = new int_type[size + 1];
-  int_type*		ito_next;
 
   locale 		loc;
   const w_codecvt* 	cvt = &use_facet<w_codecvt>(loc); 
 
-  // in
-  w_codecvt::state_type state01;
-  zero_state(state01);
-  result r1 = cvt->in(state01, e_lit, e_lit + size, efrom_next, 
-		      i_arr, i_arr + size, ito_next);
-  VERIFY( r1 == codecvt_base::ok );
-  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); 
-  VERIFY( efrom_next == e_lit + size );
-  VERIFY( ito_next == i_arr + size );
-
-  // out
-  w_codecvt::state_type state02;
-  zero_state(state02);  
-  result r2 = cvt->out(state02, i_lit, i_lit + size, ifrom_next, 
-		       e_arr, e_arr + size, eto_next);
-  VERIFY( r2 == codecvt_base::ok );
-  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); 
-  VERIFY( ifrom_next == i_lit + size );
-  VERIFY( eto_next == e_arr + size );
-
   // unshift
   strcpy(e_arr, e_lit);
   w_codecvt::state_type state03;
@@ -94,65 +64,11 @@ void test01()
   VERIFY( !strcmp(e_arr, e_lit) ); 
   VERIFY( eto_next == e_arr );
 
-  int i = cvt->encoding();
-  VERIFY( i == 4 ); // Target-dependent.
-
-  VERIFY( !cvt->always_noconv() );
-
-  w_codecvt::state_type state04;
-  zero_state(state04);
-  int j = cvt->length(state03, e_lit, e_lit + size, 5);
-  VERIFY( j == 5 );
-
-  int k = cvt->max_length();
-  VERIFY( k == 1 );
-
   delete [] e_arr;
-  delete [] i_arr;
 }
 
-// libstdc++/5280
-void test02()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test03()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */
-
-
 int main ()
 {
-#if _GLIBCPP_USE_WCHAR_T
   test01();
-  test02();
-  test03();
-#endif 
-
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc b/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc
index 8ffef6e..af51d33 100644
--- a/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc
+++ b/libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc
@@ -1,6 +1,6 @@
 // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>
 
-// Copyright (C) 2000, 2001, 2002 Free Software Foundation
+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -25,14 +25,7 @@
 #include <stdexcept>
 #include <testsuite_hooks.h>
 
-void test00()
-{
-  // Should be able to do this as the first thing that happens in a
-  // file and have it not crash.
-  std::locale loc("C");
-}
-
-#if _GLIBCPP_USE___ENC_TRAITS
+#if _GLIBCXX_USE___ENC_TRAITS
 typedef std::codecvt<char, char, std::mbstate_t> 	      c_codecvt;
 typedef std::codecvt_byname<char, char, std::mbstate_t>       c_codecvt_byname;
 typedef std::codecvt<wchar_t, char, std::mbstate_t>	      w_codecvt;
@@ -87,7 +80,7 @@ namespace std
 
       static char_type* 
       copy(char_type* __s1, const char_type* __s2, size_t __n)
-      {  return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }
+      { return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }
 
       static char_type* 
       assign(char_type* __s, size_t __n, char_type __a);
@@ -117,7 +110,7 @@ void test01()
   typedef __enc_traits				enc_type;
   typedef codecvt<int_type, ext_type, enc_type>	unicode_codecvt;
 
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   string str1, str2;
 
   // construct a locale object with the C facet
@@ -177,7 +170,7 @@ void test01()
 
   // 3
   // explicit locale(const char* std_name)
-  locale loc06("fr_FR");
+  locale loc06 = __gnu_test::try_named_locale("fr_FR");
   VERIFY (loc06 != loc01);  
   VERIFY (loc06 != loc02);  
   VERIFY (loc06.name() == "fr_FR");
@@ -294,215 +287,12 @@ void test01()
     VERIFY (loc15 != loc09);  
   }
 }
-#endif // _GLIBCPP_USE___ENC_TRAITS
-
-// libstdc++/7222
-void test02()
-{
-  bool test = true;
-  std::locale loc_c1("C");
-  std::locale loc_c2 ("C");
-  
-  std::locale loc_1("");
-  std::locale loc_2("");
-
-  VERIFY( loc_c1 == loc_c2 );
-  VERIFY( loc_1 == loc_2 );
-}
-
-// libstdc++/7811
-void test03()
-{
-  bool test = true;
-#ifdef _GLIBCPP_HAVE_SETENV 
-  const char* LC_ALL_orig = getenv("LC_ALL");
-  if (!setenv("LC_ALL", "it_IT", 1))
-    {
-      std::locale loc(""); 
-      VERIFY( loc.name() == "it_IT" );
-      setenv("LC_ALL", LC_ALL_orig ? LC_ALL_orig : "", 1);
-    }
-#endif
-}
-
-
-// More tests for locale("") == POSIX locale::name. 
-void test04()
-{
-  bool test = true;
-  using namespace std;
-
-#ifdef _GLIBCPP_HAVE_SETENV
-
-  const char* LANG_orig = getenv("LANG") ? strdup(getenv("LANG")) : "";
-  const char* LC_ALL_orig = getenv("LC_ALL") ? strdup(getenv("LC_ALL")) : "";
-  const char* LC_CTYPE_orig = 
-    getenv("LC_CTYPE") ? strdup(getenv("LC_CTYPE")) : "";
-  const char* LC_NUMERIC_orig = 
-    getenv("LC_NUMERIC") ? strdup(getenv("LC_NUMERIC")) : "";
-  const char* LC_COLLATE_orig =
-    getenv("LC_COLLATE") ? strdup(getenv("LC_COLLATE")) : "";
-  const char* LC_TIME_orig = 
-    getenv("LC_TIME") ? strdup(getenv("LC_TIME")) : "";
-  const char* LC_MONETARY_orig = 
-    getenv("LC_MONETARY") ? strdup(getenv("LC_MONETARY")) : "";
-  const char* LC_MESSAGES_orig = 
-    getenv("LC_MESSAGES") ? strdup(getenv("LC_MESSAGES")) : "";
-#if _GLIBCPP_NUM_CATEGORIES
-  const char* LC_PAPER_orig = 
-    getenv("LC_PAPER") ? strdup(getenv("LC_PAPER")) : "";
-  const char* LC_NAME_orig = 
-    getenv("LC_NAME") ? strdup(getenv("LC_NAME")) : "";
-  const char* LC_ADDRESS_orig = 
-    getenv("LC_ADDRESS") ? strdup(getenv("LC_ADDRESS")) : "";
-  const char* LC_TELEPHONE_orig = 
-    getenv("LC_TELEPHONE") ? strdup(getenv("LC_TELEPHONE")) : "";
-  const char* LC_MEASUREMENT_orig = 
-    getenv("LC_MEASUREMENT") ? strdup(getenv("LC_MEASUREMENT")) : "";
-  const char* LC_IDENTIFICATION_orig =
-    getenv("LC_IDENTIFICATION") ? strdup(getenv("LC_IDENTIFICATION")) : "";
-#endif
-
-  // Check that a "POSIX" LC_ALL is equivalent to "C".
-  if (!setenv("LC_ALL", "POSIX", 1))
-    {
-      locale loc("");
-      VERIFY( loc.name() == "C" );
-    }
-  setenv("LC_ALL", "", 1);
-
-  // Check that a "en_PH" LC_ALL is equivalent to "en_PH".
-  if (!setenv("LC_ALL", "en_PH", 1))
-    {
-      locale loc("");
-      VERIFY( loc.name() == "en_PH" );
-    }
-  setenv("LC_ALL", "", 1);
-
-  // Explicit check that LC_ALL sets regardless of LC_* and LANG.
-  if (!setenv("LANG", "es_MX", 1) && !setenv("LC_COLLATE", "de_DE", 1))
-    {
-      if (!setenv("LC_ALL", "en_PH", 1))
-	{
-	  locale loc("");
-	  VERIFY( loc.name() == "en_PH" );
-	}
-      setenv("LC_ALL", "", 1);
-      setenv("LANG", LANG_orig ? LANG_orig : "", 1);
-      setenv("LC_COLLATE", LC_COLLATE_orig ? LC_COLLATE_orig : "", 1);
-    }
-
-  // NB: LANG checks all LC_* macro settings. As such, all LC_* macros
-  // must be cleared for these tests, and then restored.
-  setenv("LC_ALL", "", 1);
-  setenv("LC_CTYPE", "", 1);
-  setenv("LC_NUMERIC", "", 1);
-  setenv("LC_COLLATE", "", 1);
-  setenv("LC_TIME", "", 1);
-  setenv("LC_MONETARY", "", 1);
-  setenv("LC_MESSAGES", "", 1);
-#if _GLIBCPP_NUM_CATEGORIES
-  setenv("LC_PAPER", "", 1);
-  setenv("LC_NAME", "", 1);
-  setenv("LC_ADDRESS", "", 1);
-  setenv("LC_TELEPHONE", "", 1);
-  setenv("LC_MEASUREMENT", "", 1);
-  setenv("LC_IDENTIFICATION", "", 1);
-#endif
-
-  // Check the default set by LANG.
-  if (!setenv("LANG", "fr_FR", 1))
-    {
-      locale loc("");
-      VERIFY( loc.name() == "fr_FR" );
-    }
-
-  // Check that a "POSIX" LANG is equivalent to "C".
-  if (!setenv("LANG", "POSIX", 1))
-    {
-      locale loc(""); 
-      VERIFY( loc.name() == "C" );
-    }
-
-  // Setting a category in the "C" default.
-  if (!setenv("LC_COLLATE", "de_DE", 1))
-    {
-      locale loc("");
-
-#if _GLIBCPP_NUM_CATEGORIES
-      VERIFY( loc.name() == "LC_CTYPE=C;LC_NUMERIC=C;LC_COLLATE=de_DE;"
-	      "LC_TIME=C;LC_MONETARY=C;LC_MESSAGES=C;LC_PAPER=C;"
-	      "LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=C;"
-	      "LC_IDENTIFICATION=C" );
-#else
-      VERIFY( loc.name() == "LC_CTYPE=C;LC_NUMERIC=C;LC_COLLATE=de_DE;"
-	      "LC_TIME=C;LC_MONETARY=C;LC_MESSAGES=C" );
-#endif
-    }
-
-  // Changing the LANG default while LC_COLLATE is set.
-  if (!setenv("LANG", "fr_FR", 1))
-    {
-      locale loc("");
-#if _GLIBCPP_NUM_CATEGORIES
-      VERIFY( loc.name() == "LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;"
-	      "LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;"
-	      "LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;"
-	      "LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;"
-	      "LC_IDENTIFICATION=fr_FR" );
-#else
-      VERIFY( loc.name() == "LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;"
-	      "LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;"
-	      "LC_MESSAGES=fr_FR" );
-#endif
-    }
-  
-  // Changing another (C only) category.
-#if _GLIBCPP_NUM_CATEGORIES
-  if (!setenv("LC_IDENTIFICATION", "it_IT", 1))
-    {
-      locale loc("");
-      VERIFY( loc.name() == "LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;"
-	      "LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;"
-	      "LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;"
-	      "LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;"
-	      "LC_IDENTIFICATION=it_IT" );
-    }
-#endif
-
-  // Restore the environment.
-  setenv("LANG", LANG_orig ? LANG_orig : "", 1);
-  setenv("LC_ALL", LC_ALL_orig ? LC_ALL_orig : "", 1);
-  setenv("LC_CTYPE", LC_CTYPE_orig ? LC_CTYPE_orig : "", 1);
-  setenv("LC_NUMERIC", LC_NUMERIC_orig ? LC_NUMERIC_orig : "", 1);
-  setenv("LC_COLLATE", LC_COLLATE_orig ? LC_COLLATE_orig : "", 1);
-  setenv("LC_TIME", LC_TIME_orig ? LC_TIME_orig : "", 1);
-  setenv("LC_MONETARY", LC_MONETARY_orig ? LC_MONETARY_orig : "", 1);
-  setenv("LC_MESSAGES", LC_MESSAGES_orig ? LC_MESSAGES_orig : "", 1);
-#if _GLIBCPP_NUM_CATEGORIES
-  setenv("LC_PAPER", LC_PAPER_orig ? LC_PAPER_orig : "", 1);
-  setenv("LC_NAME", LC_NAME_orig ? LC_NAME_orig : "", 1);
-  setenv("LC_ADDRESS", LC_ADDRESS_orig ? LC_ADDRESS_orig : "", 1);
-  setenv("LC_TELEPHONE", LC_TELEPHONE_orig ? LC_TELEPHONE_orig : "", 1);
-  setenv("LC_MEASUREMENT", LC_MEASUREMENT_orig ? LC_MEASUREMENT_orig : "", 1);
-  setenv("LC_IDENTIFICATION", 
-         LC_IDENTIFICATION_orig ? LC_IDENTIFICATION_orig : "", 1);
-#endif
-
-#endif
-}
+#endif // _GLIBCXX_USE___ENC_TRAITS
 
 int main()
 {
-  test00();
-
-#if _GLIBCPP_USE___ENC_TRAITS
+#if _GLIBCXX_USE___ENC_TRAITS
   test01();
 #endif 
-
-  test02();
-  test03();
-  test04();
-
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc b/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc
index ed35095..504eb89 100644
--- a/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc
+++ b/libstdc++-v3/testsuite/22_locale/ctype_to_char.cc
@@ -1,4 +1,4 @@
-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.
+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -35,19 +35,12 @@ class gnu_ctype: public std::ctype<char_type> { };
 
 void test01()
 {
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   const char_type strlit00[] = "manilla, cebu, tandag PHILIPPINES";
   const char_type strlit01[] = "MANILLA, CEBU, TANDAG PHILIPPINES";
   const char_type strlit02[] = "manilla, cebu, tandag philippines";
   const char_type c00 = 'S';
   const char_type c10 = 's';
-  const char_type c20 = '9';
-  const char_type c30 = ' ';
-  const char_type c40 = '!';
-  const char_type c50 = 'F';
-  const char_type c60 = 'f';
-  const char_type c70 = 'X';
-  const char_type c80 = 'x';
 
   gnu_ctype gctype;
   char_type c100;
@@ -66,7 +59,6 @@ void test01()
   int i09 = std::ctype_base::graph;
   int i10 = std::ctype_base::print;
   int i11 = std::ctype_base::cntrl;
-  int i12 = sizeof(std::ctype_base::mask);
   VERIFY ( i01 != i02);
   VERIFY ( i02 != i03);
   VERIFY ( i03 != i04);
@@ -98,43 +90,8 @@ void test01()
   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );
 }
 
-// libstdc++/5280
-void test04()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test05()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-
 int main() 
 {
   test01();
-  test04();
-  test05();
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc b/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc
index 5218035..9d446c7 100644
--- a/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc
+++ b/libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc
@@ -1,4 +1,4 @@
-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.
+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -30,25 +30,17 @@
 #include <locale>
 #include <testsuite_hooks.h>
 
-#ifdef _GLIBCPP_USE_WCHAR_T
 typedef wchar_t char_type;
 class gnu_ctype: public std::ctype<char_type> { };
 
 void test01()
 {
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   const char_type strlit00[] = L"manilla, cebu, tandag PHILIPPINES";
   const char_type strlit01[] = L"MANILLA, CEBU, TANDAG PHILIPPINES";
   const char_type strlit02[] = L"manilla, cebu, tandag philippines";
   const char_type c00 = L'S';
   const char_type c10 = L's';
-  const char_type c20 = L'9';
-  const char_type c30 = L' ';
-  const char_type c40 = L'!';
-  const char_type c50 = L'F';
-  const char_type c60 = L'f';
-  const char_type c70 = L'X';
-  const char_type c80 = L'x';
 
   gnu_ctype gctype;
   char_type c100;
@@ -67,7 +59,6 @@ void test01()
   int i09 = std::ctype_base::graph;
   int i10 = std::ctype_base::print;
   int i11 = std::ctype_base::cntrl;
-  int i12 = sizeof(std::ctype_base::mask);
   VERIFY ( i01 != i02);
   VERIFY ( i02 != i03);
   VERIFY ( i03 != i04);
@@ -99,46 +90,8 @@ void test01()
   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );
 }
 
-// libstdc++/5280
-void test04()
-{
-#ifdef _GLIBCPP_HAVE_SETENV 
-  // Set the global locale to non-"C".
-  std::locale loc_de("de_DE");
-  std::locale::global(loc_de);
-
-  // Set LANG environment variable to de_DE.
-  const char* oldLANG = getenv("LANG");
-  if (!setenv("LANG", "de_DE", 1))
-    {
-      test01();
-      setenv("LANG", oldLANG ? oldLANG : "", 1);
-    }
-#endif
-}
-
-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html
-void test05()
-{
-  bool test = true;
-
-  const char* tentLANG = std::setlocale(LC_ALL, "ja_JP.eucjp");
-  if (tentLANG != NULL)
-    {
-      std::string preLANG = tentLANG;
-      test01();
-      std::string postLANG = std::setlocale(LC_ALL, NULL);
-      VERIFY( preLANG == postLANG );
-    }
-}
-#endif
-
 int main() 
 {
-#ifdef _GLIBCPP_USE_WCHAR_T
   test01();
-  test04();
-  test05();
-#endif
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/22_locale/facet.cc b/libstdc++-v3/testsuite/22_locale/facet.cc
index 9c613b4..8360956 100644
--- a/libstdc++-v3/testsuite/22_locale/facet.cc
+++ b/libstdc++-v3/testsuite/22_locale/facet.cc
@@ -1,6 +1,6 @@
 // 2000-08-31 Benjamin Kosnik <bkoz@redhat.com>
 
-// Copyright (C) 2000, 2002 Free Software Foundation
+// Copyright (C) 2000, 2002, 2003 Free Software Foundation
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -172,7 +172,7 @@ std::locale::id gnu_facet::id;
 
 void test01()
 {
-  bool test = true;
+  bool test __attribute__((unused)) = true;
   const std::string name_no("*");
   const std::string name_c("C");
 
@@ -234,69 +234,8 @@ void test01()
     }
 }
 
-// Static counter for use in checking ctors/dtors.
-static std::size_t counter;
-
-class surf : public std::locale::facet
-{
-public:
-  static std::locale::id 	       	id;
-  surf(size_t refs = 0): std::locale::facet(refs) { ++counter; }
-  ~surf() { --counter; }
-};
-
-std::locale::id surf::id;
-
-typedef surf facet_type;
-
-void test02()
-{
-  using namespace std;
-  bool test = true;
-
-  // 1: Destroyed when out of scope.
-  VERIFY( counter == 0 );
-  {
-    locale loc01(locale::classic(), new facet_type);
-    VERIFY( counter == 1 );
-  }
-  VERIFY( counter == 0 );
-
-  // 2: Not destroyed when out of scope, deliberately leaked.
-  VERIFY( counter == 0 );
-  {
-    // Default refs argument is zero.
-    locale loc02(locale::classic(), new facet_type(1));
-    VERIFY( counter == 1 );
-  }
-  VERIFY( counter == 1 );
-
-  // 3: Pathological.
-  counter = 0;
-  {
-    // Test bounds.
-    facet_type* f = new facet_type(numeric_limits<size_t>::max());
-    VERIFY( counter == 1 );
-    // Add a reference.
-    locale loc01(locale::classic(), f);
-    {
-      // Add another reference...
-      locale loc02(locale::classic(), f);
-    }
-    VERIFY( counter == 1 );
-  }
-
-  // 4: Named locale should destroy facets when it goes out of scope.
-  // Not quite sure how to test for this w/o valgrind at the moment.
-  {
-    locale loc03("es_MX");
-  }
-}
-
 int main ()
 {
   test01();
-
-  test02();
   return 0;
 }
diff --git a/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc b/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc
index 63a994c..15508a3 100644
--- a/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc
+++ b/libstdc++-v3/testsuite/26_numerics/c99_classification_macros_c.cc
@@ -27,7 +27,8 @@
 // invalidate any other reasons why the executable file might be covered by
 // the GNU General Public License.
 
-// { dg-do compile }
+// { dg-do compile { xfail *-*-linux-gnu *-*-freebsd5* } }
+// { dg-excess-errors "" { target *-*-linux-gnu *-*-freebsd5* } }
 
 #include <math.h>
 
diff --git a/libstdc++-v3/testsuite/27_io/ios_init.cc b/libstdc++-v3/testsuite/27_io/ios_init.cc
index 33a52de..0db9630 100644
--- a/libstdc++-v3/testsuite/27_io/ios_init.cc
+++ b/libstdc++-v3/testsuite/27_io/ios_init.cc
@@ -1,6 +1,6 @@
 // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>
 
-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
 //
 // This file is part of the GNU ISO C++ Library.  This library is free
 // software; you can redistribute it and/or modify it under the
@@ -29,9 +29,7 @@
 
 // 27.4.2.1.6 class ios_base::init
 
-#include <fstream>
 #include <sstream>
-#include <iostream>
 #include <testsuite_hooks.h>
 
 // char_traits specialization
@@ -115,162 +113,19 @@ namespace std
       static int_type 
       eof() { return static_cast<int_type>(-1); }
 
-      static int_type 
-      not_eof(const int_type& __c)
-      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }
-    };
-
-  template<>
-    struct char_traits<unsigned char>
-    {
-      typedef unsigned char 	char_type;
-      // Unsigned as wint_t in unsigned.
-      typedef unsigned long  	int_type;
-      typedef streampos 	pos_type;
-      typedef streamoff 	off_type;
-      typedef mbstate_t 	state_type;
-      
-      static void 
-      assign(char_type& __c1, const char_type& __c2)
-      { __c1 = __c2; }
-
-      static bool 
-      eq(const char_type& __c1, const char_type& __c2)
-      { return __c1 == __c2; }
-
-      static bool 
-      lt(const char_type& __c1, const char_type& __c2)
-      { return __c1 < __c2; }
-
-      static int 
-      compare(const char_type* __s1, const char_type* __s2, size_t __n)
-      { 
-	for (size_t __i = 0; __i < __n; ++__i)
-	  if (!eq(__s1[__i], __s2[__i]))
-	    return lt(__s1[__i], __s2[__i]) ? -1 : 1;
-	return 0; 
-      }
-
-      static size_t
-      length(const char_type* __s)
-      { 
-	const char_type* __p = __s; 
-	while (__p && *__p) 
-	  ++__p; 
-	return (__p - __s); 
-      }
-
-      static const char_type* 
-      find(const char_type* __s, size_t __n, const char_type& __a)
-      { 
-	for (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)
-	  if (*__p == __a) return __p;
-	return 0;
-      }
-
-      static char_type* 
-      move(char_type* __s1, const char_type* __s2, size_t __n)
-      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }
-
-      static char_type* 
-      copy(char_type* __s1, const char_type* __s2, size_t __n)
-      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }
-
-      static char_type* 
-      assign(char_type* __s, size_t __n, char_type __a)
-      { 
-	for (char_type* __p = __s; __p < __s + __n; ++__p) 
-	  assign(*__p, __a);
-        return __s; 
-      }
-
-      static char_type 
-      to_char_type(const int_type& __c)
-      { return char_type(); }
-
-      static int_type 
-      to_int_type(const char_type& __c) { return int_type(); }
-
-      static bool 
-      eq_int_type(const int_type& __c1, const int_type& __c2)
-      { return __c1 == __c2; }
-
-      static int_type 
-      eof() { return static_cast<int_type>(-1); }
-
       static int_type 
       not_eof(const int_type& __c)
       { return eq_int_type(__c, eof()) ? int_type(0) : __c; }
     };
 } // namespace std
 
-class gnu_filebuf: public std::filebuf
-{
-  int i;
-public:
-  gnu_filebuf(int j = 1): i(j) { }
-  ~gnu_filebuf() { --i; }
-  int get_i() { return i;}
-};
-
-const int initial = 4;
-gnu_filebuf buf(initial);
-
-// libstdc++/3045, in a vague way.
-void test01()
-{
-  bool test = true;
-  int k1;
-
-  // 1 normal
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-  {
-    std::cout.rdbuf(&buf);
-  }
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-
-  // 2 syncd off
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-  {
-    std::cout.rdbuf(&buf);
-    std::ios_base::sync_with_stdio(false); // make sure doesn't clobber buf
-  }
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-
-  // 3 callling init
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-  {
-    std::cout.rdbuf(&buf);
-    std::ios_base::Init make_sure_initialized;
-  }
-  k1 = buf.get_i();
-  VERIFY( k1 == initial );
-}
-
 // Non-required instantiations don't have the required facets inbued,
 // by default, into the locale object.
 // See 27.4.4.1
-class gnu_ios: public std::basic_ios<char> { };
 
 void test02() 
 {
-  bool test = true;
-
-  // 01: Doesn't call basic_ios::init, which uses ctype<char_type>..
-  // This should be unambiguously correct.
-  try
-    {
-      gnu_ios gios;
-    }
-  catch(...)
-    { 
-      test = false; 
-    }
+  bool test __attribute__((unused)) = true;
 
   // 02: Calls basic_ios::init, which may call ctype<char_type>...
   try
@@ -302,80 +157,6 @@ void test02()
   VERIFY( test );
 }
 
-// libstdc++/3983
-void test03()
-{
-  using namespace std;
-  bool test = true;
-
-  // input streams
-  basic_istringstream<unsigned char> iss_uc;
-  unsigned char arr[6] = { 'a', 'b', 'c', 'd', 'e' };
-
-  // Sentry uses locale info, so have to try one formatted input.
-  try 
-    { 
-      int i;
-      iss_uc >> i;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-  
-  try 
-    { 
-      iss_uc >> arr;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-  
-  try 
-    { 
-      iss_uc >> ws;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
- 
-  try 
-    { 
-      basic_string<unsigned char> s_uc(arr);
-      iss_uc >> s_uc;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-
-  // output streams
-  basic_ostringstream<unsigned char> oss_uc;
-
-  try 
-    { 
-      bool b = true;
-      oss_uc << b;
-    }
-  catch (bad_cast& obj)
-    { }
-  catch (exception& obj)
-    { test = false; }
-   
-  VERIFY( test );
-}
-
-// libstdc++/5268
-int test04()
-{
-  std::stringbuf b1;
-  std::cout.rdbuf( &b1 );
-  std::cout << "hello\n";
-  return 0;
-}
-
 #if !__GXX_WEAK__
 // Explicitly instantiate for systems with no COMDAT or weak support.
 template 
@@ -385,21 +166,10 @@ template
 template 
   unsigned short
   std::basic_string<unsigned short>::_Rep::_S_terminal;
-
-template 
-  std::basic_string<unsigned char>::size_type 
-  std::basic_string<unsigned char>::_Rep::_S_max_size;
-
-template 
-  unsigned char
-  std::basic_string<unsigned char>::_Rep::_S_terminal;
 #endif
 
 int main()
 {
-  test01();
   test02();
-  test03();
-  test04();
   return 0;
 }
