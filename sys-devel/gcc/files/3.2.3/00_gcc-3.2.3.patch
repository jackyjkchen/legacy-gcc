diff --git a/gcc/ChangeLog b/gcc/ChangeLog
index 76d7c35..a6e456c 100644
--- a/gcc/ChangeLog
+++ b/gcc/ChangeLog
@@ -1,3 +1,30 @@
+2003-05-06  Richard Henderson  <rth@redhat.com>
+
+        * unwind-dw2.c (uw_update_context_1): Only set cfa as sp if 
+        previous frame didn't save sp.  Clear sp for next frame.
+        (uw_install_context_1): Honor saved sp from frame.
+
+2003-05-03  Richard Henderson  <rth@redhat.com>
+
+        * builtins.c (expand_builtin) <BUILT_IN_DWARF_FP_REGNUM>: Remove.
+        <BUILT_IN_DWARF_SP_COLUMN>: New.
+        * builtins.def (BUILT_IN_DWARF_FP_REGNUM): Remove.
+        (BUILT_IN_DWARF_SP_COLUMN): New.
+        * dwarf2out.c (expand_builtin_dwarf_fp_regnum): Remove.
+        (expand_builtin_dwarf_sp_column): New.
+        * except.h: Update to match.
+        * unwind-dw2.c (execute_stack_op): Correct stack push typo.
+        (execute_cfa_program): Record location expression address
+        before extracting length.
+        (uw_update_context_1): Install old CFA into stack pointer column.
+        (uw_init_context_1): Set cfa_reg to stack pointer column.
+
+2003-04-29  Jason Merrill  <jason@redhat.com>
+
+	PR middle-end/10336
+	* jump.c (never_reached_warning): Really stop looking if we reach 
+	the beginning of the function.
+
 2003-04-22  Release Manager
 
 	* GCC 3.2.3 Released.
diff --git a/gcc/Makefile.in b/gcc/Makefile.in
index e7c29b9..4aefd9e 100644
--- a/gcc/Makefile.in
+++ b/gcc/Makefile.in
@@ -1137,23 +1137,6 @@ c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h $(GGC_H) intl.h \
 	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
 	       -c $(srcdir)/c-parse.c $(OUTPUT_OPTION)
 
-$(srcdir)/c-parse.c: $(srcdir)/c-parse.y
-	cd $(srcdir) && \
-	if $(BISON) $(BISONFLAGS) -o c-p$$$$.c c-parse.y; then \
-	  test -f c-p$$$$.output && mv -f c-p$$$$.output c-parse.output ; \
-	  mv -f c-p$$$$.c c-parse.c ; \
-	else \
-	  rm -f c-p$$$$.* ; \
-	  false ; \
-	fi
-
-$(srcdir)/c-parse.y: c-parse.in
-	echo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y
-	sed -e "/^ifobjc$$/,/^end ifobjc$$/d" \
-	  -e "/^ifc$$/d" -e "/^end ifc$$/d" \
-	  $(srcdir)/c-parse.in >>tmp-c-parse.y
-	$(SHELL) $(srcdir)/move-if-change tmp-c-parse.y $(srcdir)/c-parse.y
-
 c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \
     $(GGC_H) $(TARGET_H) c-lex.h flags.h function.h output.h $(EXPR_H) \
     debug.h toplev.h intl.h $(TM_P_H) tree-inline.h $(TIMEVAR_H) c-pragma.h
diff --git a/gcc/builtins.c b/gcc/builtins.c
index ca39c0b..dd61baf 100644
--- a/gcc/builtins.c
+++ b/gcc/builtins.c
@@ -3952,8 +3952,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)
     case BUILT_IN_DWARF_CFA:
       return virtual_cfa_rtx;
 #ifdef DWARF2_UNWIND_INFO
-    case BUILT_IN_DWARF_FP_REGNUM:
-      return expand_builtin_dwarf_fp_regnum ();
+    case BUILT_IN_DWARF_SP_COLUMN:
+      return expand_builtin_dwarf_sp_column ();
     case BUILT_IN_INIT_DWARF_REG_SIZES:
       expand_builtin_init_dwarf_reg_sizes (TREE_VALUE (arglist));
       return const0_rtx;
diff --git a/gcc/builtins.def b/gcc/builtins.def
index c6f6dc4..af2f43e 100644
--- a/gcc/builtins.def
+++ b/gcc/builtins.def
@@ -446,8 +446,8 @@ DEF_GCC_BUILTIN(BUILT_IN_UNWIND_INIT,
 DEF_GCC_BUILTIN(BUILT_IN_DWARF_CFA,
 		"__builtin_dwarf_cfa",
 		BT_FN_PTR)
-DEF_GCC_BUILTIN(BUILT_IN_DWARF_FP_REGNUM,
-		"__builtin_dwarf_fp_regnum",
+DEF_GCC_BUILTIN(BUILT_IN_DWARF_SP_COLUMN,
+		"__builtin_dwarf_sp_column",
 		BT_FN_UNSIGNED)
 DEF_GCC_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES,
 		"__builtin_init_dwarf_reg_size_table",
diff --git a/gcc/config/alpha/linux.h b/gcc/config/alpha/linux.h
index 912d7b2..7e87e66 100644
--- a/gcc/config/alpha/linux.h
+++ b/gcc/config/alpha/linux.h
@@ -78,7 +78,7 @@ SUB_CPP_PREDEFINES
     else if (pc_[1] == 0x201f015f)	/* lda $0,NR_rt_sigreturn */	\
       {									\
 	struct rt_sigframe {						\
-	  struct siginfo info;						\
+	  siginfo_t info;						\
 	  struct ucontext uc;						\
 	} *rt_ = (CONTEXT)->cfa;					\
 	sc_ = &rt_->uc.uc_mcontext;					\
diff --git a/gcc/config/i386/linux.h b/gcc/config/i386/linux.h
index 08407e1..06cd7f9 100644
--- a/gcc/config/i386/linux.h
+++ b/gcc/config/i386/linux.h
@@ -245,9 +245,9 @@ Boston, MA 02111-1307, USA.  */
       {									\
 	struct rt_sigframe {						\
 	  int sig;							\
-	  struct siginfo *pinfo;					\
+	  siginfo_t *pinfo;					\
 	  void *puc;							\
-	  struct siginfo info;						\
+	  siginfo_t info;						\
 	  struct ucontext uc;						\
 	} *rt_ = (CONTEXT)->cfa;					\
 	sc_ = (struct sigcontext *) &rt_->uc.uc_mcontext;		\
diff --git a/gcc/config/i386/linux64.h b/gcc/config/i386/linux64.h
index b858644..fc5875a 100644
--- a/gcc/config/i386/linux64.h
+++ b/gcc/config/i386/linux64.h
@@ -154,9 +154,9 @@ Boston, MA 02111-1307, USA.  */
       {									\
 	struct rt_sigframe {						\
 	  int sig;							\
-	  struct siginfo *pinfo;					\
+	  siginfo_t *pinfo;					\
 	  void *puc;							\
-	  struct siginfo info;						\
+	  siginfo_t info;						\
 	  struct ucontext uc;						\
 	} *rt_ = (CONTEXT)->cfa;					\
 	sc_ = (struct sigcontext *) &rt_->uc.uc_mcontext;		\
diff --git a/gcc/config/i386/t-linux64 b/gcc/config/i386/t-linux64
index 31b6ad4..95901b4 100644
--- a/gcc/config/i386/t-linux64
+++ b/gcc/config/i386/t-linux64
@@ -12,3 +12,5 @@ LIBGCC = stmp-multilib
 INSTALL_LIBGCC = install-multilib
 
 EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o
+
+CRTSTUFF_T_CFLAGS = -fno-omit-frame-pointer -fno-asynchronous-unwind-tables
diff --git a/gcc/config/ia64/linux.h b/gcc/config/ia64/linux.h
index 07882cd..9dbf9df 100644
--- a/gcc/config/ia64/linux.h
+++ b/gcc/config/ia64/linux.h
@@ -67,7 +67,7 @@
       struct sigframe {							\
 	char scratch[16];						\
 	unsigned long sig_number;					\
-	struct siginfo *info;						\
+	siginfo_t *info;						\
 	struct sigcontext *sc;						\
       } *frame_ = (struct sigframe *)(CONTEXT)->psp;			\
       struct sigcontext *sc_ = frame_->sc;				\
diff --git a/gcc/dwarf2out.c b/gcc/dwarf2out.c
index 8a3f613..bbeb557 100644
--- a/gcc/dwarf2out.c
+++ b/gcc/dwarf2out.c
@@ -382,9 +382,9 @@ static void def_cfa_1		 	PARAMS ((const char *,
 /* Hook used by __throw.  */
 
 rtx
-expand_builtin_dwarf_fp_regnum ()
+expand_builtin_dwarf_sp_column ()
 {
-  return GEN_INT (DWARF_FRAME_REGNUM (HARD_FRAME_POINTER_REGNUM));
+  return GEN_INT (DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM));
 }
 
 /* Return a pointer to a copy of the section string name S with all
diff --git a/gcc/except.h b/gcc/except.h
index 883a2b1..df48477 100644
--- a/gcc/except.h
+++ b/gcc/except.h
@@ -128,7 +128,7 @@ extern rtx expand_builtin_eh_return_data_regno	PARAMS ((tree));
 extern rtx expand_builtin_extract_return_addr	PARAMS ((tree));
 extern void expand_builtin_init_dwarf_reg_sizes PARAMS ((tree));
 extern rtx expand_builtin_frob_return_addr	PARAMS ((tree));
-extern rtx expand_builtin_dwarf_fp_regnum	PARAMS ((void));
+extern rtx expand_builtin_dwarf_sp_column	PARAMS ((void));
 extern void expand_builtin_eh_return		PARAMS ((tree, tree));
 extern void expand_eh_return			PARAMS ((void));
 extern rtx get_exception_pointer		PARAMS ((struct function *));
diff --git a/gcc/jump.c b/gcc/jump.c
index c668374..3fac7a5 100644
--- a/gcc/jump.c
+++ b/gcc/jump.c
@@ -1957,13 +1957,15 @@ never_reached_warning (avoided_insn, finish)
   /* Back up to the first of any NOTEs preceding avoided_insn; flow passes
      us the head of a block, a NOTE_INSN_BASIC_BLOCK, which often follows
      the line note.  */
-  for (insn = PREV_INSN (avoided_insn); ; insn = PREV_INSN (insn))
-    if (GET_CODE (insn) != NOTE
-	|| NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG)
-      {
-	insn = NEXT_INSN (insn);
+  insn = avoided_insn;
+  while (1)
+    {
+      rtx prev = PREV_INSN (insn);
+      if (prev == NULL_RTX
+	  || GET_CODE (prev) != NOTE)
 	break;
-      }
+      insn = prev;
+    }
 
   /* Scan forwards, looking at LINE_NUMBER notes, until we hit a LABEL
      in case FINISH is NULL, otherwise until we run out of insns.  */
diff --git a/gcc/unwind-dw2.c b/gcc/unwind-dw2.c
index 8151d69..e6a6b4e 100644
--- a/gcc/unwind-dw2.c
+++ b/gcc/unwind-dw2.c
@@ -679,7 +679,7 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,
       /* Most things push a result value.  */
       if ((size_t) stack_elt >= sizeof(stack)/sizeof(*stack))
 	abort ();
-      stack[++stack_elt] = result;
+      stack[stack_elt++] = result;
     no_push:;
     }
 
@@ -829,17 +829,17 @@ execute_cfa_program (const unsigned char *insn_ptr,
 	  break;
 
 	case DW_CFA_def_cfa_expression:
-	  insn_ptr = read_uleb128 (insn_ptr, &utmp);
 	  fs->cfa_exp = insn_ptr;
 	  fs->cfa_how = CFA_EXP;
+	  insn_ptr = read_uleb128 (insn_ptr, &utmp);
 	  insn_ptr += utmp;
 	  break;
 
 	case DW_CFA_expression:
 	  insn_ptr = read_uleb128 (insn_ptr, &reg);
-	  insn_ptr = read_uleb128 (insn_ptr, &utmp);
 	  fs->regs.reg[reg].how = REG_SAVED_EXP;
 	  fs->regs.reg[reg].loc.exp = insn_ptr;
+	  insn_ptr = read_uleb128 (insn_ptr, &utmp);
 	  insn_ptr += utmp;
 	  break;
 
@@ -906,17 +906,7 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)
   fde = _Unwind_Find_FDE (context->ra - 1, &context->bases);
   if (fde == NULL)
     {
-      /* Couldn't find frame unwind info for this function.  Try a
-	 target-specific fallback mechanism.  This will necessarily
-	 not provide a personality routine or LSDA.  */
-#ifdef MD_FALLBACK_FRAME_STATE_FOR
-      MD_FALLBACK_FRAME_STATE_FOR (context, fs, success);
       return _URC_END_OF_STACK;
-    success:
-      return _URC_NO_REASON;
-#else
-      return _URC_END_OF_STACK;
-#endif
     }
 
   fs->pc = context->bases.func;
@@ -1020,37 +1010,47 @@ static void
 uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)
 {
   struct _Unwind_Context orig_context = *context;
+  _Unwind_Word tmp_sp;
   void *cfa;
   long i;
 
+  /* Special handling here: Many machines do not use a frame pointer,
+     and track the CFA only through offsets from the stack pointer from
+     one frame to the next.  In this case, the stack pointer is never
+     stored, so it has no saved address in the context.  What we do
+     have is the CFA from the previous stack frame.
+
+     In very special situations (such as unwind info for signal return),
+     there may be location expressions that use the stack pointer as well.
+
+     Do this conditionally for one frame.  This allows the unwind info
+     for one frame to save a copy of the stack pointer from the previous
+     frame, and be able to use much easier CFA mechanisms to do it.
+     Always zap the saved stack pointer value for the next frame; carrying
+     the value over from one frame to another doesn't make sense.  */
+  if (!orig_context.reg[__builtin_dwarf_sp_column ()])
+    {
+      tmp_sp = (_Unwind_Ptr) context->cfa;
+      orig_context.reg[__builtin_dwarf_sp_column ()] = &tmp_sp;
+    }
+  context->reg[__builtin_dwarf_sp_column ()] = NULL;
+
   /* Compute this frame's CFA.  */
   switch (fs->cfa_how)
     {
     case CFA_REG_OFFSET:
-      /* Special handling here: Many machines do not use a frame pointer,
-	 and track the CFA only through offsets from the stack pointer from
-	 one frame to the next.  In this case, the stack pointer is never
-	 stored, so it has no saved address in the context.  What we do 
-	 have is the CFA from the previous stack frame.  */
-      if (context->reg[fs->cfa_reg] == NULL)
-	cfa = context->cfa;
-      else
-	cfa = (void *) (_Unwind_Ptr) _Unwind_GetGR (context, fs->cfa_reg);
+      cfa = (void *) (_Unwind_Ptr) _Unwind_GetGR (&orig_context, fs->cfa_reg);
       cfa += fs->cfa_offset;
       break;
 
     case CFA_EXP:
-      /* ??? No way of knowing what register number is the stack pointer
-	 to do the same sort of handling as above.  Assume that if the
-	 CFA calculation is so complicated as to require a stack program
-	 that this will not be a problem.  */
       {
 	const unsigned char *exp = fs->cfa_exp;
 	_Unwind_Word len;
 
 	exp = read_uleb128 (exp, &len);
 	cfa = (void *) (_Unwind_Ptr)
-	  execute_stack_op (exp, exp + len, context, 0);
+	  execute_stack_op (exp, exp + len, &orig_context, 0);
 	break;
       }
 
@@ -1065,12 +1065,15 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)
       {
       case REG_UNSAVED:
 	break;
+
       case REG_SAVED_OFFSET:
 	context->reg[i] = cfa + fs->regs.reg[i].loc.offset;
 	break;
+
       case REG_SAVED_REG:
 	context->reg[i] = orig_context.reg[fs->regs.reg[i].loc.reg];
 	break;
+
       case REG_SAVED_EXP:
 	{
 	  const unsigned char *exp = fs->regs.reg[i].loc.exp;
@@ -1127,7 +1130,7 @@ uw_init_context_1 (struct _Unwind_Context *context,
   /* Force the frame state to use the known cfa value.  */
   context->cfa = outer_cfa;
   fs.cfa_how = CFA_REG_OFFSET;
-  fs.cfa_reg = 0;
+  fs.cfa_reg = __builtin_dwarf_sp_column ();
   fs.cfa_offset = 0;
 
   uw_update_context_1 (context, &fs);
@@ -1163,6 +1166,7 @@ uw_install_context_1 (struct _Unwind_Context *current,
 		      struct _Unwind_Context *target)
 {
   long i;
+  void *target_cfa;
 
 #if __GTHREADS
   {
@@ -1184,11 +1188,18 @@ uw_install_context_1 (struct _Unwind_Context *current,
 	memcpy (c, t, dwarf_reg_size_table[i]);
     }
 
+  /* If the last frame records a saved stack pointer, use it.  */
+  if (target->reg[__builtin_dwarf_sp_column ()])
+    target_cfa = (void *)(_Unwind_Ptr)
+      _Unwind_GetGR (target, __builtin_dwarf_sp_column ());
+  else
+    target_cfa = target->cfa;
+
   /* We adjust SP by the difference between CURRENT and TARGET's CFA.  */
   if (STACK_GROWS_DOWNWARD)
-    return target->cfa - current->cfa + target->args_size;
+    return target_cfa - current->cfa + target->args_size;
   else
-    return current->cfa - target->cfa - target->args_size;
+    return current->cfa - target_cfa - target->args_size;
 }
 
 static inline _Unwind_Ptr
