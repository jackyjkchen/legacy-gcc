diff --git a/gcc/cp/decl2.c b/gcc/cp/decl2.c
index 9caecdd8..e91b9e91 100644
--- a/gcc/cp/decl2.c
+++ b/gcc/cp/decl2.c
@@ -2973,9 +2973,9 @@ build_offset_ref_call_from_tree (tree fn, tree args)
 	 parameter.  That must be done before the FN is transformed
 	 because we depend on the form of FN.  */
       args = build_non_dependent_args (args);
+      object = build_non_dependent_expr (object);
       if (TREE_CODE (fn) == DOTSTAR_EXPR)
 	object = build_unary_op (ADDR_EXPR, object, 0);
-      object = build_non_dependent_expr (object);
       args = tree_cons (NULL_TREE, object, args);
       /* Now that the arguments are done, transform FN.  */
       fn = build_non_dependent_expr (fn);
diff --git a/gcc/testsuite/g++.dg/template/ptrmem18.C b/gcc/testsuite/g++.dg/template/ptrmem18.C
new file mode 100644
index 00000000..c3124cd8
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/ptrmem18.C
@@ -0,0 +1,49 @@
+// PR c++/33616
+// { dg-do run }
+// { dg-options "-O2" }
+
+extern "C" void abort ();
+
+struct S {
+  int c;
+  S () : c (0) {}
+  virtual void f1 () { c += 1; }
+  virtual void f2 () { c += 16; }
+};
+
+struct T {
+  S s;
+};
+
+typedef void (S::*Q) ();
+
+template <Q P>
+void test1 (T *t)
+{
+  (t->s.*P)();
+}
+
+template <Q P>
+void test2 (T *t)
+{
+  S &s = t->s;
+  (s.*P)();
+}
+
+int
+main ()
+{
+  T t;
+  test1 <&S::f1> (&t);
+  if (t.s.c != 1)
+    abort ();
+  test1 <&S::f2> (&t);
+  if (t.s.c != 17)
+    abort ();
+  test2 <&S::f1> (&t);
+  if (t.s.c != 18)
+    abort ();
+  test2 <&S::f2> (&t);
+  if (t.s.c != 34)
+    abort ();
+}
