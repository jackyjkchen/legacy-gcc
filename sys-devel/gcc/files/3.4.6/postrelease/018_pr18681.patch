diff --git a/gcc/cp/friend.c b/gcc/cp/friend.c
index ac24de21..e3761167 100644
--- a/gcc/cp/friend.c
+++ b/gcc/cp/friend.c
@@ -78,13 +78,8 @@ is_friend (tree type, tree supplicant)
   else
     /* It's a type.  */
     {
-      /* Nested classes are implicitly friends of their enclosing types, as
-	 per core issue 45 (this is a change from the standard).  */
-      for (context = supplicant;
-	   context && TYPE_P (context);
-	   context = TYPE_CONTEXT (context))
-	if (type == context)
-	  return 1;
+      if (same_type_p (supplicant, type))
+	return 1;
       
       list = CLASSTYPE_FRIEND_CLASSES (TREE_TYPE (TYPE_MAIN_DECL (type)));
       for (; list ; list = TREE_CHAIN (list))
@@ -98,13 +93,24 @@ is_friend (tree type, tree supplicant)
 	}
     }      
 
-  if (declp && DECL_FUNCTION_MEMBER_P (supplicant))
-    context = DECL_CONTEXT (supplicant);
-  else if (! declp)
-    /* Local classes have the same access as the enclosing function.  */
-    context = decl_function_context (TYPE_MAIN_DECL (supplicant));
+  if (declp)
+    {
+      if (DECL_FUNCTION_MEMBER_P (supplicant))
+	context = DECL_CONTEXT (supplicant);
+      else
+	context = NULL_TREE;
+    }
   else
-    context = NULL_TREE;
+    {
+      if (TYPE_CONTEXT (supplicant)
+	  && TYPE_P (TYPE_CONTEXT (supplicant)))
+	/* Nested classes get the same access as their enclosing types, as
+	   per DR 45 (this is a change from the standard).  */
+	context = TYPE_CONTEXT (supplicant);
+      else
+	/* Local classes have the same access as the enclosing function.  */
+	context = decl_function_context (TYPE_MAIN_DECL (supplicant));
+    }
 
   /* A namespace is not friend to anybody.  */
   if (context && TREE_CODE (context) == NAMESPACE_DECL)
diff --git a/gcc/cp/search.c b/gcc/cp/search.c
index c227175b..e36f0601 100644
--- a/gcc/cp/search.c
+++ b/gcc/cp/search.c
@@ -873,8 +873,8 @@ friend_accessible_p (tree scope, tree decl, tree binfo)
     if (protected_accessible_p (decl, TREE_VALUE (t), binfo))
       return 1;
 
-  /* Nested classes are implicitly friends of their enclosing types, as
-     per core issue 45 (this is a change from the standard).  */
+  /* Nested classes have the same access as their enclosing types, as
+     per DR 45 (this is a change from the standard).  */
   if (TYPE_P (scope))
     for (t = TYPE_CONTEXT (scope); t && TYPE_P (t); t = TYPE_CONTEXT (t))
       if (protected_accessible_p (decl, t, binfo))
diff --git a/gcc/testsuite/g++.dg/lookup/friend10.C b/gcc/testsuite/g++.dg/lookup/friend10.C
new file mode 100644
index 00000000..fa2eccbe
--- /dev/null
+++ b/gcc/testsuite/g++.dg/lookup/friend10.C
@@ -0,0 +1,22 @@
+// PR c++/18681
+// Bug: The friend declaration in A failed to give C::D access to A::B
+// as specified in DR 45.
+
+class A
+{
+  struct B;
+  friend class C;
+};
+
+class C
+{
+  struct D
+  {
+    void f();
+  };
+};
+
+void C::D::f()
+{
+  A::B* p;
+}
