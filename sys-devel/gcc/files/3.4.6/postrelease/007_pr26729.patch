diff --git a/gcc/fold-const.c b/gcc/fold-const.c
index cc2698da..31b67a0a 100644
--- a/gcc/fold-const.c
+++ b/gcc/fold-const.c
@@ -4107,10 +4107,10 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)
       l_const = fold_convert (lntype, l_const);
       l_const = unextend (l_const, ll_bitsize, ll_unsignedp, ll_and_mask);
       l_const = const_binop (LSHIFT_EXPR, l_const, size_int (xll_bitpos), 0);
-      if (! integer_zerop (const_binop (BIT_AND_EXPR, l_const,
-					fold (build1 (BIT_NOT_EXPR,
-						      lntype, ll_mask)),
-					0)))
+      if (integer_nonzerop (const_binop (BIT_AND_EXPR, l_const,
+					 fold (build1 (BIT_NOT_EXPR,
+						       lntype, ll_mask)),
+					 0)))
 	{
 	  warning ("comparison is always %d", wanted_code == NE_EXPR);
 
@@ -4124,10 +4124,10 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)
       r_const = fold_convert (lntype, r_const);
       r_const = unextend (r_const, rl_bitsize, rl_unsignedp, rl_and_mask);
       r_const = const_binop (LSHIFT_EXPR, r_const, size_int (xrl_bitpos), 0);
-      if (! integer_zerop (const_binop (BIT_AND_EXPR, r_const,
-					fold (build1 (BIT_NOT_EXPR,
-						      lntype, rl_mask)),
-					0)))
+      if (integer_nonzerop (const_binop (BIT_AND_EXPR, r_const,
+					 fold (build1 (BIT_NOT_EXPR,
+						       lntype, rl_mask)),
+					 0)))
 	{
 	  warning ("comparison is always %d", wanted_code == NE_EXPR);
 
diff --git a/gcc/testsuite/gcc.dg/pr26729-1.c b/gcc/testsuite/gcc.dg/pr26729-1.c
new file mode 100644
index 00000000..2f55ef7f
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr26729-1.c
@@ -0,0 +1,16 @@
+/* { dg-do run } */
+/* { dg-options "-O2" } */
+
+void abort(void);
+
+__attribute__((noinline))
+int f (unsigned short word) {  
+  return (word & 0x1) && (((unsigned short) (word & 0x8000)) == 0x8000);
+}
+
+int main(void) {
+  if (!f(0x8001))
+    abort();
+  return 0;
+}
+
